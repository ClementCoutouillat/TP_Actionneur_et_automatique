
NUCLEO-G474RET6-Inverter_Pinout.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c748  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b0  0800c928  0800c928  0001c928  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cdd8  0800cdd8  00020278  2**0
                  CONTENTS
  4 .ARM          00000008  0800cdd8  0800cdd8  0001cdd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cde0  0800cde0  00020278  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cde0  0800cde0  0001cde0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cde4  0800cde4  0001cde4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000278  20000000  0800cde8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007dc  20000278  0800d060  00020278  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a54  0800d060  00020a54  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020278  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000202a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001bcb5  00000000  00000000  000202eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000387d  00000000  00000000  0003bfa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001648  00000000  00000000  0003f820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000113d  00000000  00000000  00040e68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a31e  00000000  00000000  00041fa5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b61e  00000000  00000000  0006c2c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001147c8  00000000  00000000  000878e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007200  00000000  00000000  0019c0ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000087  00000000  00000000  001a32ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000278 	.word	0x20000278
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800c910 	.word	0x0800c910

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000027c 	.word	0x2000027c
 800021c:	0800c910 	.word	0x0800c910

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__gedf2>:
 8000a8c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a90:	e006      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a92:	bf00      	nop

08000a94 <__ledf2>:
 8000a94:	f04f 0c01 	mov.w	ip, #1
 8000a98:	e002      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__cmpdf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ab6:	d01b      	beq.n	8000af0 <__cmpdf2+0x54>
 8000ab8:	b001      	add	sp, #4
 8000aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000abe:	bf0c      	ite	eq
 8000ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ac4:	ea91 0f03 	teqne	r1, r3
 8000ac8:	bf02      	ittt	eq
 8000aca:	ea90 0f02 	teqeq	r0, r2
 8000ace:	2000      	moveq	r0, #0
 8000ad0:	4770      	bxeq	lr
 8000ad2:	f110 0f00 	cmn.w	r0, #0
 8000ad6:	ea91 0f03 	teq	r1, r3
 8000ada:	bf58      	it	pl
 8000adc:	4299      	cmppl	r1, r3
 8000ade:	bf08      	it	eq
 8000ae0:	4290      	cmpeq	r0, r2
 8000ae2:	bf2c      	ite	cs
 8000ae4:	17d8      	asrcs	r0, r3, #31
 8000ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aea:	f040 0001 	orr.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__cmpdf2+0x64>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d107      	bne.n	8000b10 <__cmpdf2+0x74>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d1d6      	bne.n	8000ab8 <__cmpdf2+0x1c>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d0d3      	beq.n	8000ab8 <__cmpdf2+0x1c>
 8000b10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdrcmple>:
 8000b18:	4684      	mov	ip, r0
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4662      	mov	r2, ip
 8000b1e:	468c      	mov	ip, r1
 8000b20:	4619      	mov	r1, r3
 8000b22:	4663      	mov	r3, ip
 8000b24:	e000      	b.n	8000b28 <__aeabi_cdcmpeq>
 8000b26:	bf00      	nop

08000b28 <__aeabi_cdcmpeq>:
 8000b28:	b501      	push	{r0, lr}
 8000b2a:	f7ff ffb7 	bl	8000a9c <__cmpdf2>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	bf48      	it	mi
 8000b32:	f110 0f00 	cmnmi.w	r0, #0
 8000b36:	bd01      	pop	{r0, pc}

08000b38 <__aeabi_dcmpeq>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff fff4 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b40:	bf0c      	ite	eq
 8000b42:	2001      	moveq	r0, #1
 8000b44:	2000      	movne	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmplt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffea 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmple>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffe0 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpge>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffce 	bl	8000b18 <__aeabi_cdrcmple>
 8000b7c:	bf94      	ite	ls
 8000b7e:	2001      	movls	r0, #1
 8000b80:	2000      	movhi	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpgt>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffc4 	bl	8000b18 <__aeabi_cdrcmple>
 8000b90:	bf34      	ite	cc
 8000b92:	2001      	movcc	r0, #1
 8000b94:	2000      	movcs	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmpun>:
 8000b9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x10>
 8000ba6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000baa:	d10a      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb4:	d102      	bne.n	8000bbc <__aeabi_dcmpun+0x20>
 8000bb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0001 	mov.w	r0, #1
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2iz>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d215      	bcs.n	8000bfe <__aeabi_d2iz+0x36>
 8000bd2:	d511      	bpl.n	8000bf8 <__aeabi_d2iz+0x30>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d912      	bls.n	8000c04 <__aeabi_d2iz+0x3c>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bee:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	4240      	negne	r0, r0
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c02:	d105      	bne.n	8000c10 <__aeabi_d2iz+0x48>
 8000c04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	bf08      	it	eq
 8000c0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b970 	b.w	8000fb0 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9e08      	ldr	r6, [sp, #32]
 8000cee:	460d      	mov	r5, r1
 8000cf0:	4604      	mov	r4, r0
 8000cf2:	460f      	mov	r7, r1
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d14a      	bne.n	8000d8e <__udivmoddi4+0xa6>
 8000cf8:	428a      	cmp	r2, r1
 8000cfa:	4694      	mov	ip, r2
 8000cfc:	d965      	bls.n	8000dca <__udivmoddi4+0xe2>
 8000cfe:	fab2 f382 	clz	r3, r2
 8000d02:	b143      	cbz	r3, 8000d16 <__udivmoddi4+0x2e>
 8000d04:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d08:	f1c3 0220 	rsb	r2, r3, #32
 8000d0c:	409f      	lsls	r7, r3
 8000d0e:	fa20 f202 	lsr.w	r2, r0, r2
 8000d12:	4317      	orrs	r7, r2
 8000d14:	409c      	lsls	r4, r3
 8000d16:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d1a:	fa1f f58c 	uxth.w	r5, ip
 8000d1e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d22:	0c22      	lsrs	r2, r4, #16
 8000d24:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d28:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d2c:	fb01 f005 	mul.w	r0, r1, r5
 8000d30:	4290      	cmp	r0, r2
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x62>
 8000d34:	eb1c 0202 	adds.w	r2, ip, r2
 8000d38:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d3c:	f080 811c 	bcs.w	8000f78 <__udivmoddi4+0x290>
 8000d40:	4290      	cmp	r0, r2
 8000d42:	f240 8119 	bls.w	8000f78 <__udivmoddi4+0x290>
 8000d46:	3902      	subs	r1, #2
 8000d48:	4462      	add	r2, ip
 8000d4a:	1a12      	subs	r2, r2, r0
 8000d4c:	b2a4      	uxth	r4, r4
 8000d4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d56:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d5a:	fb00 f505 	mul.w	r5, r0, r5
 8000d5e:	42a5      	cmp	r5, r4
 8000d60:	d90a      	bls.n	8000d78 <__udivmoddi4+0x90>
 8000d62:	eb1c 0404 	adds.w	r4, ip, r4
 8000d66:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d6a:	f080 8107 	bcs.w	8000f7c <__udivmoddi4+0x294>
 8000d6e:	42a5      	cmp	r5, r4
 8000d70:	f240 8104 	bls.w	8000f7c <__udivmoddi4+0x294>
 8000d74:	4464      	add	r4, ip
 8000d76:	3802      	subs	r0, #2
 8000d78:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d7c:	1b64      	subs	r4, r4, r5
 8000d7e:	2100      	movs	r1, #0
 8000d80:	b11e      	cbz	r6, 8000d8a <__udivmoddi4+0xa2>
 8000d82:	40dc      	lsrs	r4, r3
 8000d84:	2300      	movs	r3, #0
 8000d86:	e9c6 4300 	strd	r4, r3, [r6]
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0xbc>
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	f000 80ed 	beq.w	8000f72 <__udivmoddi4+0x28a>
 8000d98:	2100      	movs	r1, #0
 8000d9a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d9e:	4608      	mov	r0, r1
 8000da0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da4:	fab3 f183 	clz	r1, r3
 8000da8:	2900      	cmp	r1, #0
 8000daa:	d149      	bne.n	8000e40 <__udivmoddi4+0x158>
 8000dac:	42ab      	cmp	r3, r5
 8000dae:	d302      	bcc.n	8000db6 <__udivmoddi4+0xce>
 8000db0:	4282      	cmp	r2, r0
 8000db2:	f200 80f8 	bhi.w	8000fa6 <__udivmoddi4+0x2be>
 8000db6:	1a84      	subs	r4, r0, r2
 8000db8:	eb65 0203 	sbc.w	r2, r5, r3
 8000dbc:	2001      	movs	r0, #1
 8000dbe:	4617      	mov	r7, r2
 8000dc0:	2e00      	cmp	r6, #0
 8000dc2:	d0e2      	beq.n	8000d8a <__udivmoddi4+0xa2>
 8000dc4:	e9c6 4700 	strd	r4, r7, [r6]
 8000dc8:	e7df      	b.n	8000d8a <__udivmoddi4+0xa2>
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xe6>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f382 	clz	r3, r2
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	f040 8090 	bne.w	8000ef8 <__udivmoddi4+0x210>
 8000dd8:	1a8a      	subs	r2, r1, r2
 8000dda:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dde:	fa1f fe8c 	uxth.w	lr, ip
 8000de2:	2101      	movs	r1, #1
 8000de4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000de8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dec:	0c22      	lsrs	r2, r4, #16
 8000dee:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000df2:	fb0e f005 	mul.w	r0, lr, r5
 8000df6:	4290      	cmp	r0, r2
 8000df8:	d908      	bls.n	8000e0c <__udivmoddi4+0x124>
 8000dfa:	eb1c 0202 	adds.w	r2, ip, r2
 8000dfe:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x122>
 8000e04:	4290      	cmp	r0, r2
 8000e06:	f200 80cb 	bhi.w	8000fa0 <__udivmoddi4+0x2b8>
 8000e0a:	4645      	mov	r5, r8
 8000e0c:	1a12      	subs	r2, r2, r0
 8000e0e:	b2a4      	uxth	r4, r4
 8000e10:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e14:	fb07 2210 	mls	r2, r7, r0, r2
 8000e18:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e1c:	fb0e fe00 	mul.w	lr, lr, r0
 8000e20:	45a6      	cmp	lr, r4
 8000e22:	d908      	bls.n	8000e36 <__udivmoddi4+0x14e>
 8000e24:	eb1c 0404 	adds.w	r4, ip, r4
 8000e28:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e2c:	d202      	bcs.n	8000e34 <__udivmoddi4+0x14c>
 8000e2e:	45a6      	cmp	lr, r4
 8000e30:	f200 80bb 	bhi.w	8000faa <__udivmoddi4+0x2c2>
 8000e34:	4610      	mov	r0, r2
 8000e36:	eba4 040e 	sub.w	r4, r4, lr
 8000e3a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e3e:	e79f      	b.n	8000d80 <__udivmoddi4+0x98>
 8000e40:	f1c1 0720 	rsb	r7, r1, #32
 8000e44:	408b      	lsls	r3, r1
 8000e46:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e4a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e4e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e52:	fa20 f307 	lsr.w	r3, r0, r7
 8000e56:	40fd      	lsrs	r5, r7
 8000e58:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e5c:	4323      	orrs	r3, r4
 8000e5e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e62:	fa1f fe8c 	uxth.w	lr, ip
 8000e66:	fb09 5518 	mls	r5, r9, r8, r5
 8000e6a:	0c1c      	lsrs	r4, r3, #16
 8000e6c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e70:	fb08 f50e 	mul.w	r5, r8, lr
 8000e74:	42a5      	cmp	r5, r4
 8000e76:	fa02 f201 	lsl.w	r2, r2, r1
 8000e7a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e7e:	d90b      	bls.n	8000e98 <__udivmoddi4+0x1b0>
 8000e80:	eb1c 0404 	adds.w	r4, ip, r4
 8000e84:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e88:	f080 8088 	bcs.w	8000f9c <__udivmoddi4+0x2b4>
 8000e8c:	42a5      	cmp	r5, r4
 8000e8e:	f240 8085 	bls.w	8000f9c <__udivmoddi4+0x2b4>
 8000e92:	f1a8 0802 	sub.w	r8, r8, #2
 8000e96:	4464      	add	r4, ip
 8000e98:	1b64      	subs	r4, r4, r5
 8000e9a:	b29d      	uxth	r5, r3
 8000e9c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ea0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ea4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ea8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000eac:	45a6      	cmp	lr, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x1da>
 8000eb0:	eb1c 0404 	adds.w	r4, ip, r4
 8000eb4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000eb8:	d26c      	bcs.n	8000f94 <__udivmoddi4+0x2ac>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	d96a      	bls.n	8000f94 <__udivmoddi4+0x2ac>
 8000ebe:	3b02      	subs	r3, #2
 8000ec0:	4464      	add	r4, ip
 8000ec2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ec6:	fba3 9502 	umull	r9, r5, r3, r2
 8000eca:	eba4 040e 	sub.w	r4, r4, lr
 8000ece:	42ac      	cmp	r4, r5
 8000ed0:	46c8      	mov	r8, r9
 8000ed2:	46ae      	mov	lr, r5
 8000ed4:	d356      	bcc.n	8000f84 <__udivmoddi4+0x29c>
 8000ed6:	d053      	beq.n	8000f80 <__udivmoddi4+0x298>
 8000ed8:	b156      	cbz	r6, 8000ef0 <__udivmoddi4+0x208>
 8000eda:	ebb0 0208 	subs.w	r2, r0, r8
 8000ede:	eb64 040e 	sbc.w	r4, r4, lr
 8000ee2:	fa04 f707 	lsl.w	r7, r4, r7
 8000ee6:	40ca      	lsrs	r2, r1
 8000ee8:	40cc      	lsrs	r4, r1
 8000eea:	4317      	orrs	r7, r2
 8000eec:	e9c6 7400 	strd	r7, r4, [r6]
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ef8:	f1c3 0120 	rsb	r1, r3, #32
 8000efc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f00:	fa20 f201 	lsr.w	r2, r0, r1
 8000f04:	fa25 f101 	lsr.w	r1, r5, r1
 8000f08:	409d      	lsls	r5, r3
 8000f0a:	432a      	orrs	r2, r5
 8000f0c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f10:	fa1f fe8c 	uxth.w	lr, ip
 8000f14:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f18:	fb07 1510 	mls	r5, r7, r0, r1
 8000f1c:	0c11      	lsrs	r1, r2, #16
 8000f1e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f22:	fb00 f50e 	mul.w	r5, r0, lr
 8000f26:	428d      	cmp	r5, r1
 8000f28:	fa04 f403 	lsl.w	r4, r4, r3
 8000f2c:	d908      	bls.n	8000f40 <__udivmoddi4+0x258>
 8000f2e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f32:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f36:	d22f      	bcs.n	8000f98 <__udivmoddi4+0x2b0>
 8000f38:	428d      	cmp	r5, r1
 8000f3a:	d92d      	bls.n	8000f98 <__udivmoddi4+0x2b0>
 8000f3c:	3802      	subs	r0, #2
 8000f3e:	4461      	add	r1, ip
 8000f40:	1b49      	subs	r1, r1, r5
 8000f42:	b292      	uxth	r2, r2
 8000f44:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f48:	fb07 1115 	mls	r1, r7, r5, r1
 8000f4c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f50:	fb05 f10e 	mul.w	r1, r5, lr
 8000f54:	4291      	cmp	r1, r2
 8000f56:	d908      	bls.n	8000f6a <__udivmoddi4+0x282>
 8000f58:	eb1c 0202 	adds.w	r2, ip, r2
 8000f5c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f60:	d216      	bcs.n	8000f90 <__udivmoddi4+0x2a8>
 8000f62:	4291      	cmp	r1, r2
 8000f64:	d914      	bls.n	8000f90 <__udivmoddi4+0x2a8>
 8000f66:	3d02      	subs	r5, #2
 8000f68:	4462      	add	r2, ip
 8000f6a:	1a52      	subs	r2, r2, r1
 8000f6c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f70:	e738      	b.n	8000de4 <__udivmoddi4+0xfc>
 8000f72:	4631      	mov	r1, r6
 8000f74:	4630      	mov	r0, r6
 8000f76:	e708      	b.n	8000d8a <__udivmoddi4+0xa2>
 8000f78:	4639      	mov	r1, r7
 8000f7a:	e6e6      	b.n	8000d4a <__udivmoddi4+0x62>
 8000f7c:	4610      	mov	r0, r2
 8000f7e:	e6fb      	b.n	8000d78 <__udivmoddi4+0x90>
 8000f80:	4548      	cmp	r0, r9
 8000f82:	d2a9      	bcs.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f84:	ebb9 0802 	subs.w	r8, r9, r2
 8000f88:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f8c:	3b01      	subs	r3, #1
 8000f8e:	e7a3      	b.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f90:	4645      	mov	r5, r8
 8000f92:	e7ea      	b.n	8000f6a <__udivmoddi4+0x282>
 8000f94:	462b      	mov	r3, r5
 8000f96:	e794      	b.n	8000ec2 <__udivmoddi4+0x1da>
 8000f98:	4640      	mov	r0, r8
 8000f9a:	e7d1      	b.n	8000f40 <__udivmoddi4+0x258>
 8000f9c:	46d0      	mov	r8, sl
 8000f9e:	e77b      	b.n	8000e98 <__udivmoddi4+0x1b0>
 8000fa0:	3d02      	subs	r5, #2
 8000fa2:	4462      	add	r2, ip
 8000fa4:	e732      	b.n	8000e0c <__udivmoddi4+0x124>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e70a      	b.n	8000dc0 <__udivmoddi4+0xd8>
 8000faa:	4464      	add	r4, ip
 8000fac:	3802      	subs	r0, #2
 8000fae:	e742      	b.n	8000e36 <__udivmoddi4+0x14e>

08000fb0 <__aeabi_idiv0>:
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b08c      	sub	sp, #48	; 0x30
 8000fb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000fba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	601a      	str	r2, [r3, #0]
 8000fc2:	605a      	str	r2, [r3, #4]
 8000fc4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000fc6:	1d3b      	adds	r3, r7, #4
 8000fc8:	2220      	movs	r2, #32
 8000fca:	2100      	movs	r1, #0
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f009 fb38 	bl	800a642 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000fd2:	4b32      	ldr	r3, [pc, #200]	; (800109c <MX_ADC1_Init+0xe8>)
 8000fd4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000fd8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000fda:	4b30      	ldr	r3, [pc, #192]	; (800109c <MX_ADC1_Init+0xe8>)
 8000fdc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000fe0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fe2:	4b2e      	ldr	r3, [pc, #184]	; (800109c <MX_ADC1_Init+0xe8>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fe8:	4b2c      	ldr	r3, [pc, #176]	; (800109c <MX_ADC1_Init+0xe8>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000fee:	4b2b      	ldr	r3, [pc, #172]	; (800109c <MX_ADC1_Init+0xe8>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ff4:	4b29      	ldr	r3, [pc, #164]	; (800109c <MX_ADC1_Init+0xe8>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ffa:	4b28      	ldr	r3, [pc, #160]	; (800109c <MX_ADC1_Init+0xe8>)
 8000ffc:	2204      	movs	r2, #4
 8000ffe:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001000:	4b26      	ldr	r3, [pc, #152]	; (800109c <MX_ADC1_Init+0xe8>)
 8001002:	2200      	movs	r2, #0
 8001004:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001006:	4b25      	ldr	r3, [pc, #148]	; (800109c <MX_ADC1_Init+0xe8>)
 8001008:	2200      	movs	r2, #0
 800100a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 800100c:	4b23      	ldr	r3, [pc, #140]	; (800109c <MX_ADC1_Init+0xe8>)
 800100e:	2201      	movs	r2, #1
 8001010:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001012:	4b22      	ldr	r3, [pc, #136]	; (800109c <MX_ADC1_Init+0xe8>)
 8001014:	2200      	movs	r2, #0
 8001016:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800101a:	4b20      	ldr	r3, [pc, #128]	; (800109c <MX_ADC1_Init+0xe8>)
 800101c:	2200      	movs	r2, #0
 800101e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001020:	4b1e      	ldr	r3, [pc, #120]	; (800109c <MX_ADC1_Init+0xe8>)
 8001022:	2200      	movs	r2, #0
 8001024:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001026:	4b1d      	ldr	r3, [pc, #116]	; (800109c <MX_ADC1_Init+0xe8>)
 8001028:	2200      	movs	r2, #0
 800102a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800102e:	4b1b      	ldr	r3, [pc, #108]	; (800109c <MX_ADC1_Init+0xe8>)
 8001030:	2200      	movs	r2, #0
 8001032:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001034:	4b19      	ldr	r3, [pc, #100]	; (800109c <MX_ADC1_Init+0xe8>)
 8001036:	2200      	movs	r2, #0
 8001038:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800103c:	4817      	ldr	r0, [pc, #92]	; (800109c <MX_ADC1_Init+0xe8>)
 800103e:	f001 fe69 	bl	8002d14 <HAL_ADC_Init>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001048:	f000 fb44 	bl	80016d4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800104c:	2300      	movs	r3, #0
 800104e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001050:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001054:	4619      	mov	r1, r3
 8001056:	4811      	ldr	r0, [pc, #68]	; (800109c <MX_ADC1_Init+0xe8>)
 8001058:	f003 f9e0 	bl	800441c <HAL_ADCEx_MultiModeConfigChannel>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001062:	f000 fb37 	bl	80016d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001066:	4b0e      	ldr	r3, [pc, #56]	; (80010a0 <MX_ADC1_Init+0xec>)
 8001068:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800106a:	2306      	movs	r3, #6
 800106c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 800106e:	2302      	movs	r3, #2
 8001070:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001072:	237f      	movs	r3, #127	; 0x7f
 8001074:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001076:	2304      	movs	r3, #4
 8001078:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800107a:	2300      	movs	r3, #0
 800107c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800107e:	1d3b      	adds	r3, r7, #4
 8001080:	4619      	mov	r1, r3
 8001082:	4806      	ldr	r0, [pc, #24]	; (800109c <MX_ADC1_Init+0xe8>)
 8001084:	f002 fcd0 	bl	8003a28 <HAL_ADC_ConfigChannel>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800108e:	f000 fb21 	bl	80016d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001092:	bf00      	nop
 8001094:	3730      	adds	r7, #48	; 0x30
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	20000294 	.word	0x20000294
 80010a0:	21800100 	.word	0x21800100

080010a4 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b088      	sub	sp, #32
 80010a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010aa:	463b      	mov	r3, r7
 80010ac:	2220      	movs	r2, #32
 80010ae:	2100      	movs	r1, #0
 80010b0:	4618      	mov	r0, r3
 80010b2:	f009 fac6 	bl	800a642 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80010b6:	4b2b      	ldr	r3, [pc, #172]	; (8001164 <MX_ADC2_Init+0xc0>)
 80010b8:	4a2b      	ldr	r2, [pc, #172]	; (8001168 <MX_ADC2_Init+0xc4>)
 80010ba:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010bc:	4b29      	ldr	r3, [pc, #164]	; (8001164 <MX_ADC2_Init+0xc0>)
 80010be:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80010c2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80010c4:	4b27      	ldr	r3, [pc, #156]	; (8001164 <MX_ADC2_Init+0xc0>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010ca:	4b26      	ldr	r3, [pc, #152]	; (8001164 <MX_ADC2_Init+0xc0>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80010d0:	4b24      	ldr	r3, [pc, #144]	; (8001164 <MX_ADC2_Init+0xc0>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010d6:	4b23      	ldr	r3, [pc, #140]	; (8001164 <MX_ADC2_Init+0xc0>)
 80010d8:	2200      	movs	r2, #0
 80010da:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010dc:	4b21      	ldr	r3, [pc, #132]	; (8001164 <MX_ADC2_Init+0xc0>)
 80010de:	2204      	movs	r2, #4
 80010e0:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80010e2:	4b20      	ldr	r3, [pc, #128]	; (8001164 <MX_ADC2_Init+0xc0>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80010e8:	4b1e      	ldr	r3, [pc, #120]	; (8001164 <MX_ADC2_Init+0xc0>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 80010ee:	4b1d      	ldr	r3, [pc, #116]	; (8001164 <MX_ADC2_Init+0xc0>)
 80010f0:	2201      	movs	r2, #1
 80010f2:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80010f4:	4b1b      	ldr	r3, [pc, #108]	; (8001164 <MX_ADC2_Init+0xc0>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010fc:	4b19      	ldr	r3, [pc, #100]	; (8001164 <MX_ADC2_Init+0xc0>)
 80010fe:	2200      	movs	r2, #0
 8001100:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001102:	4b18      	ldr	r3, [pc, #96]	; (8001164 <MX_ADC2_Init+0xc0>)
 8001104:	2200      	movs	r2, #0
 8001106:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001108:	4b16      	ldr	r3, [pc, #88]	; (8001164 <MX_ADC2_Init+0xc0>)
 800110a:	2200      	movs	r2, #0
 800110c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001110:	4b14      	ldr	r3, [pc, #80]	; (8001164 <MX_ADC2_Init+0xc0>)
 8001112:	2200      	movs	r2, #0
 8001114:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8001116:	4b13      	ldr	r3, [pc, #76]	; (8001164 <MX_ADC2_Init+0xc0>)
 8001118:	2200      	movs	r2, #0
 800111a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800111e:	4811      	ldr	r0, [pc, #68]	; (8001164 <MX_ADC2_Init+0xc0>)
 8001120:	f001 fdf8 	bl	8002d14 <HAL_ADC_Init>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 800112a:	f000 fad3 	bl	80016d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800112e:	4b0f      	ldr	r3, [pc, #60]	; (800116c <MX_ADC2_Init+0xc8>)
 8001130:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001132:	2306      	movs	r3, #6
 8001134:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001136:	2300      	movs	r3, #0
 8001138:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800113a:	237f      	movs	r3, #127	; 0x7f
 800113c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800113e:	2304      	movs	r3, #4
 8001140:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001142:	2300      	movs	r3, #0
 8001144:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001146:	463b      	mov	r3, r7
 8001148:	4619      	mov	r1, r3
 800114a:	4806      	ldr	r0, [pc, #24]	; (8001164 <MX_ADC2_Init+0xc0>)
 800114c:	f002 fc6c 	bl	8003a28 <HAL_ADC_ConfigChannel>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8001156:	f000 fabd 	bl	80016d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800115a:	bf00      	nop
 800115c:	3720      	adds	r7, #32
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	20000300 	.word	0x20000300
 8001168:	50000100 	.word	0x50000100
 800116c:	19200040 	.word	0x19200040

08001170 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b0a4      	sub	sp, #144	; 0x90
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001178:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	605a      	str	r2, [r3, #4]
 8001182:	609a      	str	r2, [r3, #8]
 8001184:	60da      	str	r2, [r3, #12]
 8001186:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001188:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800118c:	2254      	movs	r2, #84	; 0x54
 800118e:	2100      	movs	r1, #0
 8001190:	4618      	mov	r0, r3
 8001192:	f009 fa56 	bl	800a642 <memset>
  if(adcHandle->Instance==ADC1)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800119e:	d17c      	bne.n	800129a <HAL_ADC_MspInit+0x12a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80011a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80011a4:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80011a6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80011aa:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011b0:	4618      	mov	r0, r3
 80011b2:	f004 fbb3 	bl	800591c <HAL_RCCEx_PeriphCLKConfig>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80011bc:	f000 fa8a 	bl	80016d4 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80011c0:	4b78      	ldr	r3, [pc, #480]	; (80013a4 <HAL_ADC_MspInit+0x234>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	3301      	adds	r3, #1
 80011c6:	4a77      	ldr	r2, [pc, #476]	; (80013a4 <HAL_ADC_MspInit+0x234>)
 80011c8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80011ca:	4b76      	ldr	r3, [pc, #472]	; (80013a4 <HAL_ADC_MspInit+0x234>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d10b      	bne.n	80011ea <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80011d2:	4b75      	ldr	r3, [pc, #468]	; (80013a8 <HAL_ADC_MspInit+0x238>)
 80011d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011d6:	4a74      	ldr	r2, [pc, #464]	; (80013a8 <HAL_ADC_MspInit+0x238>)
 80011d8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80011dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011de:	4b72      	ldr	r3, [pc, #456]	; (80013a8 <HAL_ADC_MspInit+0x238>)
 80011e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011e6:	627b      	str	r3, [r7, #36]	; 0x24
 80011e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ea:	4b6f      	ldr	r3, [pc, #444]	; (80013a8 <HAL_ADC_MspInit+0x238>)
 80011ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ee:	4a6e      	ldr	r2, [pc, #440]	; (80013a8 <HAL_ADC_MspInit+0x238>)
 80011f0:	f043 0304 	orr.w	r3, r3, #4
 80011f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011f6:	4b6c      	ldr	r3, [pc, #432]	; (80013a8 <HAL_ADC_MspInit+0x238>)
 80011f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011fa:	f003 0304 	and.w	r3, r3, #4
 80011fe:	623b      	str	r3, [r7, #32]
 8001200:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001202:	4b69      	ldr	r3, [pc, #420]	; (80013a8 <HAL_ADC_MspInit+0x238>)
 8001204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001206:	4a68      	ldr	r2, [pc, #416]	; (80013a8 <HAL_ADC_MspInit+0x238>)
 8001208:	f043 0301 	orr.w	r3, r3, #1
 800120c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800120e:	4b66      	ldr	r3, [pc, #408]	; (80013a8 <HAL_ADC_MspInit+0x238>)
 8001210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001212:	f003 0301 	and.w	r3, r3, #1
 8001216:	61fb      	str	r3, [r7, #28]
 8001218:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800121a:	4b63      	ldr	r3, [pc, #396]	; (80013a8 <HAL_ADC_MspInit+0x238>)
 800121c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800121e:	4a62      	ldr	r2, [pc, #392]	; (80013a8 <HAL_ADC_MspInit+0x238>)
 8001220:	f043 0302 	orr.w	r3, r3, #2
 8001224:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001226:	4b60      	ldr	r3, [pc, #384]	; (80013a8 <HAL_ADC_MspInit+0x238>)
 8001228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800122a:	f003 0302 	and.w	r3, r3, #2
 800122e:	61bb      	str	r3, [r7, #24]
 8001230:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> ADC1_IN8
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = Bus_Imes_Pin;
 8001232:	2304      	movs	r3, #4
 8001234:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001236:	2303      	movs	r3, #3
 8001238:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123c:	2300      	movs	r3, #0
 800123e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(Bus_Imes_GPIO_Port, &GPIO_InitStruct);
 8001242:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001246:	4619      	mov	r1, r3
 8001248:	4858      	ldr	r0, [pc, #352]	; (80013ac <HAL_ADC_MspInit+0x23c>)
 800124a:	f003 fb8f 	bl	800496c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_Imes_Pin;
 800124e:	2302      	movs	r3, #2
 8001250:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001252:	2303      	movs	r3, #3
 8001254:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001258:	2300      	movs	r3, #0
 800125a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(U_Imes_GPIO_Port, &GPIO_InitStruct);
 800125e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001262:	4619      	mov	r1, r3
 8001264:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001268:	f003 fb80 	bl	800496c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800126c:	2303      	movs	r3, #3
 800126e:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001270:	2303      	movs	r3, #3
 8001272:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001276:	2300      	movs	r3, #0
 8001278:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800127c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001280:	4619      	mov	r1, r3
 8001282:	484b      	ldr	r0, [pc, #300]	; (80013b0 <HAL_ADC_MspInit+0x240>)
 8001284:	f003 fb72 	bl	800496c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001288:	2200      	movs	r2, #0
 800128a:	2100      	movs	r1, #0
 800128c:	2012      	movs	r0, #18
 800128e:	f003 fa85 	bl	800479c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001292:	2012      	movs	r0, #18
 8001294:	f003 fa9c 	bl	80047d0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8001298:	e080      	b.n	800139c <HAL_ADC_MspInit+0x22c>
  else if(adcHandle->Instance==ADC2)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a45      	ldr	r2, [pc, #276]	; (80013b4 <HAL_ADC_MspInit+0x244>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d17b      	bne.n	800139c <HAL_ADC_MspInit+0x22c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80012a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80012a8:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80012aa:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80012ae:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012b4:	4618      	mov	r0, r3
 80012b6:	f004 fb31 	bl	800591c <HAL_RCCEx_PeriphCLKConfig>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <HAL_ADC_MspInit+0x154>
      Error_Handler();
 80012c0:	f000 fa08 	bl	80016d4 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80012c4:	4b37      	ldr	r3, [pc, #220]	; (80013a4 <HAL_ADC_MspInit+0x234>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	3301      	adds	r3, #1
 80012ca:	4a36      	ldr	r2, [pc, #216]	; (80013a4 <HAL_ADC_MspInit+0x234>)
 80012cc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80012ce:	4b35      	ldr	r3, [pc, #212]	; (80013a4 <HAL_ADC_MspInit+0x234>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d10b      	bne.n	80012ee <HAL_ADC_MspInit+0x17e>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80012d6:	4b34      	ldr	r3, [pc, #208]	; (80013a8 <HAL_ADC_MspInit+0x238>)
 80012d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012da:	4a33      	ldr	r2, [pc, #204]	; (80013a8 <HAL_ADC_MspInit+0x238>)
 80012dc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80012e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012e2:	4b31      	ldr	r3, [pc, #196]	; (80013a8 <HAL_ADC_MspInit+0x238>)
 80012e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012ea:	617b      	str	r3, [r7, #20]
 80012ec:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ee:	4b2e      	ldr	r3, [pc, #184]	; (80013a8 <HAL_ADC_MspInit+0x238>)
 80012f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012f2:	4a2d      	ldr	r2, [pc, #180]	; (80013a8 <HAL_ADC_MspInit+0x238>)
 80012f4:	f043 0304 	orr.w	r3, r3, #4
 80012f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012fa:	4b2b      	ldr	r3, [pc, #172]	; (80013a8 <HAL_ADC_MspInit+0x238>)
 80012fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012fe:	f003 0304 	and.w	r3, r3, #4
 8001302:	613b      	str	r3, [r7, #16]
 8001304:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001306:	4b28      	ldr	r3, [pc, #160]	; (80013a8 <HAL_ADC_MspInit+0x238>)
 8001308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800130a:	4a27      	ldr	r2, [pc, #156]	; (80013a8 <HAL_ADC_MspInit+0x238>)
 800130c:	f043 0301 	orr.w	r3, r3, #1
 8001310:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001312:	4b25      	ldr	r3, [pc, #148]	; (80013a8 <HAL_ADC_MspInit+0x238>)
 8001314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001316:	f003 0301 	and.w	r3, r3, #1
 800131a:	60fb      	str	r3, [r7, #12]
 800131c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800131e:	4b22      	ldr	r3, [pc, #136]	; (80013a8 <HAL_ADC_MspInit+0x238>)
 8001320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001322:	4a21      	ldr	r2, [pc, #132]	; (80013a8 <HAL_ADC_MspInit+0x238>)
 8001324:	f043 0302 	orr.w	r3, r3, #2
 8001328:	64d3      	str	r3, [r2, #76]	; 0x4c
 800132a:	4b1f      	ldr	r3, [pc, #124]	; (80013a8 <HAL_ADC_MspInit+0x238>)
 800132c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800132e:	f003 0302 	and.w	r3, r3, #2
 8001332:	60bb      	str	r3, [r7, #8]
 8001334:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = U_VPh_Pin|W_VPh_Pin|V_VPh_Pin;
 8001336:	230b      	movs	r3, #11
 8001338:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800133a:	2303      	movs	r3, #3
 800133c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001340:	2300      	movs	r3, #0
 8001342:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001346:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800134a:	4619      	mov	r1, r3
 800134c:	4817      	ldr	r0, [pc, #92]	; (80013ac <HAL_ADC_MspInit+0x23c>)
 800134e:	f003 fb0d 	bl	800496c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Bus_V_Pin;
 8001352:	2301      	movs	r3, #1
 8001354:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001356:	2303      	movs	r3, #3
 8001358:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135c:	2300      	movs	r3, #0
 800135e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(Bus_V_GPIO_Port, &GPIO_InitStruct);
 8001362:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001366:	4619      	mov	r1, r3
 8001368:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800136c:	f003 fafe 	bl	800496c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001370:	2304      	movs	r3, #4
 8001372:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001374:	2303      	movs	r3, #3
 8001376:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137a:	2300      	movs	r3, #0
 800137c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001380:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001384:	4619      	mov	r1, r3
 8001386:	480a      	ldr	r0, [pc, #40]	; (80013b0 <HAL_ADC_MspInit+0x240>)
 8001388:	f003 faf0 	bl	800496c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800138c:	2200      	movs	r2, #0
 800138e:	2100      	movs	r1, #0
 8001390:	2012      	movs	r0, #18
 8001392:	f003 fa03 	bl	800479c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001396:	2012      	movs	r0, #18
 8001398:	f003 fa1a 	bl	80047d0 <HAL_NVIC_EnableIRQ>
}
 800139c:	bf00      	nop
 800139e:	3790      	adds	r7, #144	; 0x90
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	2000036c 	.word	0x2000036c
 80013a8:	40021000 	.word	0x40021000
 80013ac:	48000800 	.word	0x48000800
 80013b0:	48000400 	.word	0x48000400
 80013b4:	50000100 	.word	0x50000100

080013b8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b08a      	sub	sp, #40	; 0x28
 80013bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013be:	f107 0314 	add.w	r3, r7, #20
 80013c2:	2200      	movs	r2, #0
 80013c4:	601a      	str	r2, [r3, #0]
 80013c6:	605a      	str	r2, [r3, #4]
 80013c8:	609a      	str	r2, [r3, #8]
 80013ca:	60da      	str	r2, [r3, #12]
 80013cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ce:	4b3f      	ldr	r3, [pc, #252]	; (80014cc <MX_GPIO_Init+0x114>)
 80013d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013d2:	4a3e      	ldr	r2, [pc, #248]	; (80014cc <MX_GPIO_Init+0x114>)
 80013d4:	f043 0304 	orr.w	r3, r3, #4
 80013d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013da:	4b3c      	ldr	r3, [pc, #240]	; (80014cc <MX_GPIO_Init+0x114>)
 80013dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013de:	f003 0304 	and.w	r3, r3, #4
 80013e2:	613b      	str	r3, [r7, #16]
 80013e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80013e6:	4b39      	ldr	r3, [pc, #228]	; (80014cc <MX_GPIO_Init+0x114>)
 80013e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ea:	4a38      	ldr	r2, [pc, #224]	; (80014cc <MX_GPIO_Init+0x114>)
 80013ec:	f043 0320 	orr.w	r3, r3, #32
 80013f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013f2:	4b36      	ldr	r3, [pc, #216]	; (80014cc <MX_GPIO_Init+0x114>)
 80013f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013f6:	f003 0320 	and.w	r3, r3, #32
 80013fa:	60fb      	str	r3, [r7, #12]
 80013fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013fe:	4b33      	ldr	r3, [pc, #204]	; (80014cc <MX_GPIO_Init+0x114>)
 8001400:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001402:	4a32      	ldr	r2, [pc, #200]	; (80014cc <MX_GPIO_Init+0x114>)
 8001404:	f043 0301 	orr.w	r3, r3, #1
 8001408:	64d3      	str	r3, [r2, #76]	; 0x4c
 800140a:	4b30      	ldr	r3, [pc, #192]	; (80014cc <MX_GPIO_Init+0x114>)
 800140c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800140e:	f003 0301 	and.w	r3, r3, #1
 8001412:	60bb      	str	r3, [r7, #8]
 8001414:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001416:	4b2d      	ldr	r3, [pc, #180]	; (80014cc <MX_GPIO_Init+0x114>)
 8001418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800141a:	4a2c      	ldr	r2, [pc, #176]	; (80014cc <MX_GPIO_Init+0x114>)
 800141c:	f043 0302 	orr.w	r3, r3, #2
 8001420:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001422:	4b2a      	ldr	r3, [pc, #168]	; (80014cc <MX_GPIO_Init+0x114>)
 8001424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001426:	f003 0302 	and.w	r3, r3, #2
 800142a:	607b      	str	r3, [r7, #4]
 800142c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800142e:	4b27      	ldr	r3, [pc, #156]	; (80014cc <MX_GPIO_Init+0x114>)
 8001430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001432:	4a26      	ldr	r2, [pc, #152]	; (80014cc <MX_GPIO_Init+0x114>)
 8001434:	f043 0308 	orr.w	r3, r3, #8
 8001438:	64d3      	str	r3, [r2, #76]	; 0x4c
 800143a:	4b24      	ldr	r3, [pc, #144]	; (80014cc <MX_GPIO_Init+0x114>)
 800143c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800143e:	f003 0308 	and.w	r3, r3, #8
 8001442:	603b      	str	r3, [r7, #0]
 8001444:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_LED_GPIO_Port, USR_LED_Pin, GPIO_PIN_RESET);
 8001446:	2200      	movs	r2, #0
 8001448:	2120      	movs	r1, #32
 800144a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800144e:	f003 fc0f 	bl	8004c70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRST_SafetyUC_GPIO_Port, NRST_SafetyUC_Pin, GPIO_PIN_RESET);
 8001452:	2200      	movs	r2, #0
 8001454:	2104      	movs	r1, #4
 8001456:	481e      	ldr	r0, [pc, #120]	; (80014d0 <MX_GPIO_Init+0x118>)
 8001458:	f003 fc0a 	bl	8004c70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_BTN_Pin;
 800145c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001460:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001462:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001466:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001468:	2300      	movs	r3, #0
 800146a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USR_BTN_GPIO_Port, &GPIO_InitStruct);
 800146c:	f107 0314 	add.w	r3, r7, #20
 8001470:	4619      	mov	r1, r3
 8001472:	4818      	ldr	r0, [pc, #96]	; (80014d4 <MX_GPIO_Init+0x11c>)
 8001474:	f003 fa7a 	bl	800496c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_LED_Pin;
 8001478:	2320      	movs	r3, #32
 800147a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800147c:	2301      	movs	r3, #1
 800147e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001480:	2300      	movs	r3, #0
 8001482:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001484:	2300      	movs	r3, #0
 8001486:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USR_LED_GPIO_Port, &GPIO_InitStruct);
 8001488:	f107 0314 	add.w	r3, r7, #20
 800148c:	4619      	mov	r1, r3
 800148e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001492:	f003 fa6b 	bl	800496c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRST_SafetyUC_Pin;
 8001496:	2304      	movs	r3, #4
 8001498:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800149a:	2301      	movs	r3, #1
 800149c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149e:	2300      	movs	r3, #0
 80014a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a2:	2300      	movs	r3, #0
 80014a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRST_SafetyUC_GPIO_Port, &GPIO_InitStruct);
 80014a6:	f107 0314 	add.w	r3, r7, #20
 80014aa:	4619      	mov	r1, r3
 80014ac:	4808      	ldr	r0, [pc, #32]	; (80014d0 <MX_GPIO_Init+0x118>)
 80014ae:	f003 fa5d 	bl	800496c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80014b2:	2200      	movs	r2, #0
 80014b4:	2100      	movs	r1, #0
 80014b6:	2028      	movs	r0, #40	; 0x28
 80014b8:	f003 f970 	bl	800479c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80014bc:	2028      	movs	r0, #40	; 0x28
 80014be:	f003 f987 	bl	80047d0 <HAL_NVIC_EnableIRQ>

}
 80014c2:	bf00      	nop
 80014c4:	3728      	adds	r7, #40	; 0x28
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	40021000 	.word	0x40021000
 80014d0:	48000c00 	.word	0x48000c00
 80014d4:	48000800 	.word	0x48000800

080014d8 <ChangeSpeed>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void ChangeSpeed(int speedValue){
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
	TIM1->CCR1 = (TIM1->ARR)*speedValue/100;
 80014e0:	4b0e      	ldr	r3, [pc, #56]	; (800151c <ChangeSpeed+0x44>)
 80014e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014e4:	687a      	ldr	r2, [r7, #4]
 80014e6:	fb02 f303 	mul.w	r3, r2, r3
 80014ea:	4a0c      	ldr	r2, [pc, #48]	; (800151c <ChangeSpeed+0x44>)
 80014ec:	490c      	ldr	r1, [pc, #48]	; (8001520 <ChangeSpeed+0x48>)
 80014ee:	fba1 1303 	umull	r1, r3, r1, r3
 80014f2:	095b      	lsrs	r3, r3, #5
 80014f4:	6353      	str	r3, [r2, #52]	; 0x34
	TIM1->CCR2 =  (TIM1->ARR)*(100-speedValue)/100;
 80014f6:	4b09      	ldr	r3, [pc, #36]	; (800151c <ChangeSpeed+0x44>)
 80014f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014fa:	687a      	ldr	r2, [r7, #4]
 80014fc:	f1c2 0264 	rsb	r2, r2, #100	; 0x64
 8001500:	fb02 f303 	mul.w	r3, r2, r3
 8001504:	4a05      	ldr	r2, [pc, #20]	; (800151c <ChangeSpeed+0x44>)
 8001506:	4906      	ldr	r1, [pc, #24]	; (8001520 <ChangeSpeed+0x48>)
 8001508:	fba1 1303 	umull	r1, r3, r1, r3
 800150c:	095b      	lsrs	r3, r3, #5
 800150e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001510:	bf00      	nop
 8001512:	370c      	adds	r7, #12
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr
 800151c:	40012c00 	.word	0x40012c00
 8001520:	51eb851f 	.word	0x51eb851f

08001524 <read_current>:

void read_current()
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
	HAL_ADC_Start_IT(&hadc1);
 8001528:	4802      	ldr	r0, [pc, #8]	; (8001534 <read_current+0x10>)
 800152a:	f001 fe99 	bl	8003260 <HAL_ADC_Start_IT>
}
 800152e:	bf00      	nop
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	20000294 	.word	0x20000294

08001538 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b086      	sub	sp, #24
 800153c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	speedMesuree=20;
 800153e:	4b30      	ldr	r3, [pc, #192]	; (8001600 <main+0xc8>)
 8001540:	2214      	movs	r2, #20
 8001542:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001544:	f001 f96b 	bl	800281e <HAL_Init>

  /* USER CODE BEGIN Init */
	char buffer[20]="";
 8001548:	2300      	movs	r3, #0
 800154a:	603b      	str	r3, [r7, #0]
 800154c:	1d3b      	adds	r3, r7, #4
 800154e:	2200      	movs	r2, #0
 8001550:	601a      	str	r2, [r3, #0]
 8001552:	605a      	str	r2, [r3, #4]
 8001554:	609a      	str	r2, [r3, #8]
 8001556:	60da      	str	r2, [r3, #12]
	int input;
	int nbChar =0;
 8001558:	2300      	movs	r3, #0
 800155a:	617b      	str	r3, [r7, #20]
	int vitesseCible;
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800155c:	f000 f85e 	bl	800161c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001560:	f7ff ff2a 	bl	80013b8 <MX_GPIO_Init>
  MX_ADC2_Init();
 8001564:	f7ff fd9e 	bl	80010a4 <MX_ADC2_Init>
  MX_ADC1_Init();
 8001568:	f7ff fd24 	bl	8000fb4 <MX_ADC1_Init>
  MX_TIM1_Init();
 800156c:	f000 fafc 	bl	8001b68 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001570:	f000 fbaa 	bl	8001cc8 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8001574:	f000 fdd0 	bl	8002118 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001578:	f000 fe1a 	bl	80021b0 <MX_USART3_UART_Init>
  MX_USART1_UART_Init();
 800157c:	f000 fd80 	bl	8002080 <MX_USART1_UART_Init>
  MX_TIM7_Init();
 8001580:	f000 fbee 	bl	8001d60 <MX_TIM7_Init>
  MX_TIM16_Init();
 8001584:	f000 fc24 	bl	8001dd0 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim7);
 8001588:	481e      	ldr	r0, [pc, #120]	; (8001604 <main+0xcc>)
 800158a:	f004 fc6d 	bl	8005e68 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2); //D5
	HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_2);
	*/

	//HAL_ADC_Start_IT(&hadc1);
	HAL_ADC_Start(&hadc1);
 800158e:	481e      	ldr	r0, [pc, #120]	; (8001608 <main+0xd0>)
 8001590:	f001 fd82 	bl	8003098 <HAL_ADC_Start>
	//HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
	adc_value = HAL_ADC_GetValue(&hadc1);
 8001594:	481c      	ldr	r0, [pc, #112]	; (8001608 <main+0xd0>)
 8001596:	f001 ffbb 	bl	8003510 <HAL_ADC_GetValue>
 800159a:	4603      	mov	r3, r0
 800159c:	b29a      	uxth	r2, r3
 800159e:	4b1b      	ldr	r3, [pc, #108]	; (800160c <main+0xd4>)
 80015a0:	801a      	strh	r2, [r3, #0]
	offset_courant=(((adc_value)/4096.0)*3.3);
 80015a2:	4b1a      	ldr	r3, [pc, #104]	; (800160c <main+0xd4>)
 80015a4:	881b      	ldrh	r3, [r3, #0]
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7fe fff4 	bl	8000594 <__aeabi_i2d>
 80015ac:	f04f 0200 	mov.w	r2, #0
 80015b0:	4b17      	ldr	r3, [pc, #92]	; (8001610 <main+0xd8>)
 80015b2:	f7ff f983 	bl	80008bc <__aeabi_ddiv>
 80015b6:	4602      	mov	r2, r0
 80015b8:	460b      	mov	r3, r1
 80015ba:	4610      	mov	r0, r2
 80015bc:	4619      	mov	r1, r3
 80015be:	a30e      	add	r3, pc, #56	; (adr r3, 80015f8 <main+0xc0>)
 80015c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015c4:	f7ff f850 	bl	8000668 <__aeabi_dmul>
 80015c8:	4602      	mov	r2, r0
 80015ca:	460b      	mov	r3, r1
 80015cc:	4610      	mov	r0, r2
 80015ce:	4619      	mov	r1, r3
 80015d0:	f7ff fb22 	bl	8000c18 <__aeabi_d2f>
 80015d4:	4603      	mov	r3, r0
 80015d6:	4a0f      	ldr	r2, [pc, #60]	; (8001614 <main+0xdc>)
 80015d8:	6013      	str	r3, [r2, #0]
	adc_value = 0;
 80015da:	4b0c      	ldr	r3, [pc, #48]	; (800160c <main+0xd4>)
 80015dc:	2200      	movs	r2, #0
 80015de:	801a      	strh	r2, [r3, #0]
	offset_courant = 0;
 80015e0:	4b0c      	ldr	r3, [pc, #48]	; (8001614 <main+0xdc>)
 80015e2:	f04f 0200 	mov.w	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]


	//HAL_ADC_PollForConversion(&hadc1);

	Shell_Init();
 80015e8:	f000 ff1a 	bl	8002420 <Shell_Init>

	printf("Entrez 'speed XXXX' : ");
 80015ec:	480a      	ldr	r0, [pc, #40]	; (8001618 <main+0xe0>)
 80015ee:	f008 ff7f 	bl	800a4f0 <iprintf>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{

		Shell_Loop();
 80015f2:	f000 ff55 	bl	80024a0 <Shell_Loop>
	{
 80015f6:	e7fc      	b.n	80015f2 <main+0xba>
 80015f8:	66666666 	.word	0x66666666
 80015fc:	400a6666 	.word	0x400a6666
 8001600:	20000370 	.word	0x20000370
 8001604:	20000468 	.word	0x20000468
 8001608:	20000294 	.word	0x20000294
 800160c:	20000374 	.word	0x20000374
 8001610:	40b00000 	.word	0x40b00000
 8001614:	2000037c 	.word	0x2000037c
 8001618:	0800c928 	.word	0x0800c928

0800161c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b094      	sub	sp, #80	; 0x50
 8001620:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001622:	f107 0318 	add.w	r3, r7, #24
 8001626:	2238      	movs	r2, #56	; 0x38
 8001628:	2100      	movs	r1, #0
 800162a:	4618      	mov	r0, r3
 800162c:	f009 f809 	bl	800a642 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001630:	1d3b      	adds	r3, r7, #4
 8001632:	2200      	movs	r2, #0
 8001634:	601a      	str	r2, [r3, #0]
 8001636:	605a      	str	r2, [r3, #4]
 8001638:	609a      	str	r2, [r3, #8]
 800163a:	60da      	str	r2, [r3, #12]
 800163c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800163e:	2000      	movs	r0, #0
 8001640:	f003 fb52 	bl	8004ce8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001644:	2301      	movs	r3, #1
 8001646:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001648:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800164c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800164e:	2302      	movs	r3, #2
 8001650:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001652:	2303      	movs	r3, #3
 8001654:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8001656:	2306      	movs	r3, #6
 8001658:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800165a:	2355      	movs	r3, #85	; 0x55
 800165c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800165e:	2302      	movs	r3, #2
 8001660:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001662:	2302      	movs	r3, #2
 8001664:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001666:	2302      	movs	r3, #2
 8001668:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800166a:	f107 0318 	add.w	r3, r7, #24
 800166e:	4618      	mov	r0, r3
 8001670:	f003 fbee 	bl	8004e50 <HAL_RCC_OscConfig>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <SystemClock_Config+0x62>
  {
    Error_Handler();
 800167a:	f000 f82b 	bl	80016d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800167e:	230f      	movs	r3, #15
 8001680:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001682:	2303      	movs	r3, #3
 8001684:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001686:	2300      	movs	r3, #0
 8001688:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800168a:	2300      	movs	r3, #0
 800168c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800168e:	2300      	movs	r3, #0
 8001690:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001692:	1d3b      	adds	r3, r7, #4
 8001694:	2104      	movs	r1, #4
 8001696:	4618      	mov	r0, r3
 8001698:	f003 fef2 	bl	8005480 <HAL_RCC_ClockConfig>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80016a2:	f000 f817 	bl	80016d4 <Error_Handler>
  }
}
 80016a6:	bf00      	nop
 80016a8:	3750      	adds	r7, #80	; 0x50
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
	...

080016b0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a04      	ldr	r2, [pc, #16]	; (80016d0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d101      	bne.n	80016c6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80016c2:	f001 f8c5 	bl	8002850 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80016c6:	bf00      	nop
 80016c8:	3708      	adds	r7, #8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	40001000 	.word	0x40001000

080016d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016d8:	b672      	cpsid	i
}
 80016da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80016dc:	e7fe      	b.n	80016dc <Error_Handler+0x8>
	...

080016e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016e6:	4b0f      	ldr	r3, [pc, #60]	; (8001724 <HAL_MspInit+0x44>)
 80016e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016ea:	4a0e      	ldr	r2, [pc, #56]	; (8001724 <HAL_MspInit+0x44>)
 80016ec:	f043 0301 	orr.w	r3, r3, #1
 80016f0:	6613      	str	r3, [r2, #96]	; 0x60
 80016f2:	4b0c      	ldr	r3, [pc, #48]	; (8001724 <HAL_MspInit+0x44>)
 80016f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016f6:	f003 0301 	and.w	r3, r3, #1
 80016fa:	607b      	str	r3, [r7, #4]
 80016fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016fe:	4b09      	ldr	r3, [pc, #36]	; (8001724 <HAL_MspInit+0x44>)
 8001700:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001702:	4a08      	ldr	r2, [pc, #32]	; (8001724 <HAL_MspInit+0x44>)
 8001704:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001708:	6593      	str	r3, [r2, #88]	; 0x58
 800170a:	4b06      	ldr	r3, [pc, #24]	; (8001724 <HAL_MspInit+0x44>)
 800170c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800170e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001712:	603b      	str	r3, [r7, #0]
 8001714:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001716:	f003 fb8b 	bl	8004e30 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800171a:	bf00      	nop
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	40021000 	.word	0x40021000

08001728 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b08c      	sub	sp, #48	; 0x30
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001730:	2300      	movs	r3, #0
 8001732:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8001734:	2300      	movs	r3, #0
 8001736:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001738:	4b2c      	ldr	r3, [pc, #176]	; (80017ec <HAL_InitTick+0xc4>)
 800173a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800173c:	4a2b      	ldr	r2, [pc, #172]	; (80017ec <HAL_InitTick+0xc4>)
 800173e:	f043 0310 	orr.w	r3, r3, #16
 8001742:	6593      	str	r3, [r2, #88]	; 0x58
 8001744:	4b29      	ldr	r3, [pc, #164]	; (80017ec <HAL_InitTick+0xc4>)
 8001746:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001748:	f003 0310 	and.w	r3, r3, #16
 800174c:	60bb      	str	r3, [r7, #8]
 800174e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001750:	f107 020c 	add.w	r2, r7, #12
 8001754:	f107 0310 	add.w	r3, r7, #16
 8001758:	4611      	mov	r1, r2
 800175a:	4618      	mov	r0, r3
 800175c:	f004 f866 	bl	800582c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001760:	f004 f838 	bl	80057d4 <HAL_RCC_GetPCLK1Freq>
 8001764:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001768:	4a21      	ldr	r2, [pc, #132]	; (80017f0 <HAL_InitTick+0xc8>)
 800176a:	fba2 2303 	umull	r2, r3, r2, r3
 800176e:	0c9b      	lsrs	r3, r3, #18
 8001770:	3b01      	subs	r3, #1
 8001772:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001774:	4b1f      	ldr	r3, [pc, #124]	; (80017f4 <HAL_InitTick+0xcc>)
 8001776:	4a20      	ldr	r2, [pc, #128]	; (80017f8 <HAL_InitTick+0xd0>)
 8001778:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800177a:	4b1e      	ldr	r3, [pc, #120]	; (80017f4 <HAL_InitTick+0xcc>)
 800177c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001780:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001782:	4a1c      	ldr	r2, [pc, #112]	; (80017f4 <HAL_InitTick+0xcc>)
 8001784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001786:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001788:	4b1a      	ldr	r3, [pc, #104]	; (80017f4 <HAL_InitTick+0xcc>)
 800178a:	2200      	movs	r2, #0
 800178c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800178e:	4b19      	ldr	r3, [pc, #100]	; (80017f4 <HAL_InitTick+0xcc>)
 8001790:	2200      	movs	r2, #0
 8001792:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8001794:	4817      	ldr	r0, [pc, #92]	; (80017f4 <HAL_InitTick+0xcc>)
 8001796:	f004 fb0f 	bl	8005db8 <HAL_TIM_Base_Init>
 800179a:	4603      	mov	r3, r0
 800179c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80017a0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d11b      	bne.n	80017e0 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80017a8:	4812      	ldr	r0, [pc, #72]	; (80017f4 <HAL_InitTick+0xcc>)
 80017aa:	f004 fb5d 	bl	8005e68 <HAL_TIM_Base_Start_IT>
 80017ae:	4603      	mov	r3, r0
 80017b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80017b4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d111      	bne.n	80017e0 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80017bc:	2036      	movs	r0, #54	; 0x36
 80017be:	f003 f807 	bl	80047d0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2b0f      	cmp	r3, #15
 80017c6:	d808      	bhi.n	80017da <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80017c8:	2200      	movs	r2, #0
 80017ca:	6879      	ldr	r1, [r7, #4]
 80017cc:	2036      	movs	r0, #54	; 0x36
 80017ce:	f002 ffe5 	bl	800479c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80017d2:	4a0a      	ldr	r2, [pc, #40]	; (80017fc <HAL_InitTick+0xd4>)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6013      	str	r3, [r2, #0]
 80017d8:	e002      	b.n	80017e0 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80017e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3730      	adds	r7, #48	; 0x30
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	40021000 	.word	0x40021000
 80017f0:	431bde83 	.word	0x431bde83
 80017f4:	20000380 	.word	0x20000380
 80017f8:	40001000 	.word	0x40001000
 80017fc:	200000a8 	.word	0x200000a8

08001800 <NMI_Handler>:
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8001804:	e7fe      	b.n	8001804 <NMI_Handler+0x4>

08001806 <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 8001806:	b480      	push	{r7}
 8001808:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1)
 800180a:	e7fe      	b.n	800180a <HardFault_Handler+0x4>

0800180c <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1)
 8001810:	e7fe      	b.n	8001810 <MemManage_Handler+0x4>

08001812 <BusFault_Handler>:

/**
 * @brief This function handles Prefetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
 8001812:	b480      	push	{r7}
 8001814:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1)
 8001816:	e7fe      	b.n	8001816 <BusFault_Handler+0x4>

08001818 <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1)
 800181c:	e7fe      	b.n	800181c <UsageFault_Handler+0x4>

0800181e <SVC_Handler>:

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void)
{
 800181e:	b480      	push	{r7}
 8001820:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 8001822:	bf00      	nop
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr

0800182c <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 8001830:	bf00      	nop
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr

0800183a <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void)
{
 800183a:	b480      	push	{r7}
 800183c:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 800183e:	bf00      	nop
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr

08001848 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
	/* USER CODE END SysTick_IRQn 0 */

	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 800184c:	bf00      	nop
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr
	...

08001858 <ADC1_2_IRQHandler>:

/**
 * @brief This function handles ADC1 and ADC2 global interrupt.
 */
void ADC1_2_IRQHandler(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN ADC1_2_IRQn 0 */
	adc_value = HAL_ADC_GetValue(&hadc1);
 800185c:	481e      	ldr	r0, [pc, #120]	; (80018d8 <ADC1_2_IRQHandler+0x80>)
 800185e:	f001 fe57 	bl	8003510 <HAL_ADC_GetValue>
 8001862:	4603      	mov	r3, r0
 8001864:	b29a      	uxth	r2, r3
 8001866:	4b1d      	ldr	r3, [pc, #116]	; (80018dc <ADC1_2_IRQHandler+0x84>)
 8001868:	801a      	strh	r2, [r3, #0]
	courant_mes  = (float)((adc_value)/ADC_Max_Val);
 800186a:	4b1c      	ldr	r3, [pc, #112]	; (80018dc <ADC1_2_IRQHandler+0x84>)
 800186c:	881b      	ldrh	r3, [r3, #0]
 800186e:	0b1b      	lsrs	r3, r3, #12
 8001870:	b29b      	uxth	r3, r3
 8001872:	ee07 3a90 	vmov	s15, r3
 8001876:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800187a:	4b19      	ldr	r3, [pc, #100]	; (80018e0 <ADC1_2_IRQHandler+0x88>)
 800187c:	edc3 7a00 	vstr	s15, [r3]
	courant_mes *= ADC_Tension_ref;
 8001880:	4b17      	ldr	r3, [pc, #92]	; (80018e0 <ADC1_2_IRQHandler+0x88>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4618      	mov	r0, r3
 8001886:	f7fe fe97 	bl	80005b8 <__aeabi_f2d>
 800188a:	a311      	add	r3, pc, #68	; (adr r3, 80018d0 <ADC1_2_IRQHandler+0x78>)
 800188c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001890:	f7fe feea 	bl	8000668 <__aeabi_dmul>
 8001894:	4602      	mov	r2, r0
 8001896:	460b      	mov	r3, r1
 8001898:	4610      	mov	r0, r2
 800189a:	4619      	mov	r1, r3
 800189c:	f7ff f9bc 	bl	8000c18 <__aeabi_d2f>
 80018a0:	4603      	mov	r3, r0
 80018a2:	4a0f      	ldr	r2, [pc, #60]	; (80018e0 <ADC1_2_IRQHandler+0x88>)
 80018a4:	6013      	str	r3, [r2, #0]
	courant_mes -= offset_courant;
 80018a6:	4b0e      	ldr	r3, [pc, #56]	; (80018e0 <ADC1_2_IRQHandler+0x88>)
 80018a8:	ed93 7a00 	vldr	s14, [r3]
 80018ac:	4b0d      	ldr	r3, [pc, #52]	; (80018e4 <ADC1_2_IRQHandler+0x8c>)
 80018ae:	edd3 7a00 	vldr	s15, [r3]
 80018b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018b6:	4b0a      	ldr	r3, [pc, #40]	; (80018e0 <ADC1_2_IRQHandler+0x88>)
 80018b8:	edc3 7a00 	vstr	s15, [r3]

	//printf("valeur courant: %f",courant_mes);

	/* USER CODE END ADC1_2_IRQn 0 */
	HAL_ADC_IRQHandler(&hadc1);
 80018bc:	4806      	ldr	r0, [pc, #24]	; (80018d8 <ADC1_2_IRQHandler+0x80>)
 80018be:	f001 fe35 	bl	800352c <HAL_ADC_IRQHandler>
	HAL_ADC_IRQHandler(&hadc2);
 80018c2:	4809      	ldr	r0, [pc, #36]	; (80018e8 <ADC1_2_IRQHandler+0x90>)
 80018c4:	f001 fe32 	bl	800352c <HAL_ADC_IRQHandler>
	/* USER CODE BEGIN ADC1_2_IRQn 1 */

	/* USER CODE END ADC1_2_IRQn 1 */
}
 80018c8:	bf00      	nop
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	f3af 8000 	nop.w
 80018d0:	66666666 	.word	0x66666666
 80018d4:	400a6666 	.word	0x400a6666
 80018d8:	20000294 	.word	0x20000294
 80018dc:	20000374 	.word	0x20000374
 80018e0:	20000378 	.word	0x20000378
 80018e4:	2000037c 	.word	0x2000037c
 80018e8:	20000300 	.word	0x20000300

080018ec <TIM1_UP_TIM16_IRQHandler>:

/**
 * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
 */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */
	read_current();
 80018f0:	f7ff fe18 	bl	8001524 <read_current>
	/* USER CODE END TIM1_UP_TIM16_IRQn 0 */
	HAL_TIM_IRQHandler(&htim1);
 80018f4:	4803      	ldr	r0, [pc, #12]	; (8001904 <TIM1_UP_TIM16_IRQHandler+0x18>)
 80018f6:	f004 fd35 	bl	8006364 <HAL_TIM_IRQHandler>
	HAL_TIM_IRQHandler(&htim16);
 80018fa:	4803      	ldr	r0, [pc, #12]	; (8001908 <TIM1_UP_TIM16_IRQHandler+0x1c>)
 80018fc:	f004 fd32 	bl	8006364 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

	/* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001900:	bf00      	nop
 8001902:	bd80      	pop	{r7, pc}
 8001904:	200003d0 	.word	0x200003d0
 8001908:	200004b4 	.word	0x200004b4

0800190c <USART2_IRQHandler>:

/**
 * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
 */
void USART2_IRQHandler(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART2_IRQn 0 */

	/* USER CODE END USART2_IRQn 0 */
	HAL_UART_IRQHandler(&huart2);
 8001910:	4802      	ldr	r0, [pc, #8]	; (800191c <USART2_IRQHandler+0x10>)
 8001912:	f006 f90d 	bl	8007b30 <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART2_IRQn 1 */

	/* USER CODE END USART2_IRQn 1 */
}
 8001916:	bf00      	nop
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	20000590 	.word	0x20000590

08001920 <USART3_IRQHandler>:

/**
 * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
 */
void USART3_IRQHandler(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART3_IRQn 0 */

	/* USER CODE END USART3_IRQn 0 */
	HAL_UART_IRQHandler(&huart3);
 8001924:	4802      	ldr	r0, [pc, #8]	; (8001930 <USART3_IRQHandler+0x10>)
 8001926:	f006 f903 	bl	8007b30 <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART3_IRQn 1 */

	/* USER CODE END USART3_IRQn 1 */
}
 800192a:	bf00      	nop
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	20000620 	.word	0x20000620

08001934 <EXTI15_10_IRQHandler>:

/**
 * @brief This function handles EXTI line[15:10] interrupts.
 */
void EXTI15_10_IRQHandler(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN EXTI15_10_IRQn 0 */

	/* USER CODE END EXTI15_10_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(USR_BTN_Pin);
 8001938:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800193c:	f003 f9b0 	bl	8004ca0 <HAL_GPIO_EXTI_IRQHandler>
	/* USER CODE BEGIN EXTI15_10_IRQn 1 */

	/* USER CODE END EXTI15_10_IRQn 1 */
}
 8001940:	bf00      	nop
 8001942:	bd80      	pop	{r7, pc}

08001944 <TIM6_DAC_IRQHandler>:

/**
 * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
 */
void TIM6_DAC_IRQHandler(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM6_DAC_IRQn 0 */

	/* USER CODE END TIM6_DAC_IRQn 0 */
	HAL_TIM_IRQHandler(&htim6);
 8001948:	4802      	ldr	r0, [pc, #8]	; (8001954 <TIM6_DAC_IRQHandler+0x10>)
 800194a:	f004 fd0b 	bl	8006364 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM6_DAC_IRQn 1 */

	/* USER CODE END TIM6_DAC_IRQn 1 */
}
 800194e:	bf00      	nop
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	20000380 	.word	0x20000380

08001958 <TIM7_DAC_IRQHandler>:

/**
 * @brief This function handles TIM7 global interrupt, DAC2 and DAC4 channel underrun error interrupts.
 */
void TIM7_DAC_IRQHandler(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM7_DAC_IRQn 0 */
	if(speedMesuree!= speedValue){
 800195c:	4b13      	ldr	r3, [pc, #76]	; (80019ac <TIM7_DAC_IRQHandler+0x54>)
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	4b13      	ldr	r3, [pc, #76]	; (80019b0 <TIM7_DAC_IRQHandler+0x58>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	429a      	cmp	r2, r3
 8001966:	d01b      	beq.n	80019a0 <TIM7_DAC_IRQHandler+0x48>
		if (speedMesuree<speedValue){
 8001968:	4b10      	ldr	r3, [pc, #64]	; (80019ac <TIM7_DAC_IRQHandler+0x54>)
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	4b10      	ldr	r3, [pc, #64]	; (80019b0 <TIM7_DAC_IRQHandler+0x58>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	429a      	cmp	r2, r3
 8001972:	da05      	bge.n	8001980 <TIM7_DAC_IRQHandler+0x28>
			speedMesuree ++;
 8001974:	4b0d      	ldr	r3, [pc, #52]	; (80019ac <TIM7_DAC_IRQHandler+0x54>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	3301      	adds	r3, #1
 800197a:	4a0c      	ldr	r2, [pc, #48]	; (80019ac <TIM7_DAC_IRQHandler+0x54>)
 800197c:	6013      	str	r3, [r2, #0]
 800197e:	e00a      	b.n	8001996 <TIM7_DAC_IRQHandler+0x3e>
		}
		else if(speedMesuree>speedValue){
 8001980:	4b0a      	ldr	r3, [pc, #40]	; (80019ac <TIM7_DAC_IRQHandler+0x54>)
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	4b0a      	ldr	r3, [pc, #40]	; (80019b0 <TIM7_DAC_IRQHandler+0x58>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	429a      	cmp	r2, r3
 800198a:	dd04      	ble.n	8001996 <TIM7_DAC_IRQHandler+0x3e>
			speedMesuree --;
 800198c:	4b07      	ldr	r3, [pc, #28]	; (80019ac <TIM7_DAC_IRQHandler+0x54>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	3b01      	subs	r3, #1
 8001992:	4a06      	ldr	r2, [pc, #24]	; (80019ac <TIM7_DAC_IRQHandler+0x54>)
 8001994:	6013      	str	r3, [r2, #0]
		}
		ChangeSpeed(speedMesuree);
 8001996:	4b05      	ldr	r3, [pc, #20]	; (80019ac <TIM7_DAC_IRQHandler+0x54>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4618      	mov	r0, r3
 800199c:	f7ff fd9c 	bl	80014d8 <ChangeSpeed>
	}
	/* USER CODE END TIM7_DAC_IRQn 0 */
	HAL_TIM_IRQHandler(&htim7);
 80019a0:	4804      	ldr	r0, [pc, #16]	; (80019b4 <TIM7_DAC_IRQHandler+0x5c>)
 80019a2:	f004 fcdf 	bl	8006364 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM7_DAC_IRQn 1 */

	/* USER CODE END TIM7_DAC_IRQn 1 */
}
 80019a6:	bf00      	nop
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	20000370 	.word	0x20000370
 80019b0:	20000838 	.word	0x20000838
 80019b4:	20000468 	.word	0x20000468

080019b8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  return 1;
 80019bc:	2301      	movs	r3, #1
}
 80019be:	4618      	mov	r0, r3
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr

080019c8 <_kill>:

int _kill(int pid, int sig)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80019d2:	f008 fef7 	bl	800a7c4 <__errno>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2216      	movs	r2, #22
 80019da:	601a      	str	r2, [r3, #0]
  return -1;
 80019dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3708      	adds	r7, #8
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}

080019e8 <_exit>:

void _exit (int status)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80019f0:	f04f 31ff 	mov.w	r1, #4294967295
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f7ff ffe7 	bl	80019c8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80019fa:	e7fe      	b.n	80019fa <_exit+0x12>

080019fc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b086      	sub	sp, #24
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	60f8      	str	r0, [r7, #12]
 8001a04:	60b9      	str	r1, [r7, #8]
 8001a06:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a08:	2300      	movs	r3, #0
 8001a0a:	617b      	str	r3, [r7, #20]
 8001a0c:	e00a      	b.n	8001a24 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a0e:	f3af 8000 	nop.w
 8001a12:	4601      	mov	r1, r0
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	1c5a      	adds	r2, r3, #1
 8001a18:	60ba      	str	r2, [r7, #8]
 8001a1a:	b2ca      	uxtb	r2, r1
 8001a1c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	3301      	adds	r3, #1
 8001a22:	617b      	str	r3, [r7, #20]
 8001a24:	697a      	ldr	r2, [r7, #20]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	dbf0      	blt.n	8001a0e <_read+0x12>
  }

  return len;
 8001a2c:	687b      	ldr	r3, [r7, #4]
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3718      	adds	r7, #24
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}

08001a36 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a36:	b580      	push	{r7, lr}
 8001a38:	b086      	sub	sp, #24
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	60f8      	str	r0, [r7, #12]
 8001a3e:	60b9      	str	r1, [r7, #8]
 8001a40:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a42:	2300      	movs	r3, #0
 8001a44:	617b      	str	r3, [r7, #20]
 8001a46:	e009      	b.n	8001a5c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	1c5a      	adds	r2, r3, #1
 8001a4c:	60ba      	str	r2, [r7, #8]
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	4618      	mov	r0, r3
 8001a52:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	3301      	adds	r3, #1
 8001a5a:	617b      	str	r3, [r7, #20]
 8001a5c:	697a      	ldr	r2, [r7, #20]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	429a      	cmp	r2, r3
 8001a62:	dbf1      	blt.n	8001a48 <_write+0x12>
  }
  return len;
 8001a64:	687b      	ldr	r3, [r7, #4]
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3718      	adds	r7, #24
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}

08001a6e <_close>:

int _close(int file)
{
 8001a6e:	b480      	push	{r7}
 8001a70:	b083      	sub	sp, #12
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	370c      	adds	r7, #12
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr

08001a86 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a86:	b480      	push	{r7}
 8001a88:	b083      	sub	sp, #12
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]
 8001a8e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a96:	605a      	str	r2, [r3, #4]
  return 0;
 8001a98:	2300      	movs	r3, #0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	370c      	adds	r7, #12
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr

08001aa6 <_isatty>:

int _isatty(int file)
{
 8001aa6:	b480      	push	{r7}
 8001aa8:	b083      	sub	sp, #12
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001aae:	2301      	movs	r3, #1
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	370c      	adds	r7, #12
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr

08001abc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b085      	sub	sp, #20
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	60f8      	str	r0, [r7, #12]
 8001ac4:	60b9      	str	r1, [r7, #8]
 8001ac6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ac8:	2300      	movs	r3, #0
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3714      	adds	r7, #20
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
	...

08001ad8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b086      	sub	sp, #24
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ae0:	4a14      	ldr	r2, [pc, #80]	; (8001b34 <_sbrk+0x5c>)
 8001ae2:	4b15      	ldr	r3, [pc, #84]	; (8001b38 <_sbrk+0x60>)
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001aec:	4b13      	ldr	r3, [pc, #76]	; (8001b3c <_sbrk+0x64>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d102      	bne.n	8001afa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001af4:	4b11      	ldr	r3, [pc, #68]	; (8001b3c <_sbrk+0x64>)
 8001af6:	4a12      	ldr	r2, [pc, #72]	; (8001b40 <_sbrk+0x68>)
 8001af8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001afa:	4b10      	ldr	r3, [pc, #64]	; (8001b3c <_sbrk+0x64>)
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4413      	add	r3, r2
 8001b02:	693a      	ldr	r2, [r7, #16]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d207      	bcs.n	8001b18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b08:	f008 fe5c 	bl	800a7c4 <__errno>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	220c      	movs	r2, #12
 8001b10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b12:	f04f 33ff 	mov.w	r3, #4294967295
 8001b16:	e009      	b.n	8001b2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b18:	4b08      	ldr	r3, [pc, #32]	; (8001b3c <_sbrk+0x64>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b1e:	4b07      	ldr	r3, [pc, #28]	; (8001b3c <_sbrk+0x64>)
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4413      	add	r3, r2
 8001b26:	4a05      	ldr	r2, [pc, #20]	; (8001b3c <_sbrk+0x64>)
 8001b28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3718      	adds	r7, #24
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	20020000 	.word	0x20020000
 8001b38:	00000400 	.word	0x00000400
 8001b3c:	200003cc 	.word	0x200003cc
 8001b40:	20000a58 	.word	0x20000a58

08001b44 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001b48:	4b06      	ldr	r3, [pc, #24]	; (8001b64 <SystemInit+0x20>)
 8001b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b4e:	4a05      	ldr	r2, [pc, #20]	; (8001b64 <SystemInit+0x20>)
 8001b50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b58:	bf00      	nop
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	e000ed00 	.word	0xe000ed00

08001b68 <MX_TIM1_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b098      	sub	sp, #96	; 0x60
 8001b6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b6e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001b72:	2200      	movs	r2, #0
 8001b74:	601a      	str	r2, [r3, #0]
 8001b76:	605a      	str	r2, [r3, #4]
 8001b78:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b7a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001b7e:	2200      	movs	r2, #0
 8001b80:	601a      	str	r2, [r3, #0]
 8001b82:	605a      	str	r2, [r3, #4]
 8001b84:	609a      	str	r2, [r3, #8]
 8001b86:	60da      	str	r2, [r3, #12]
 8001b88:	611a      	str	r2, [r3, #16]
 8001b8a:	615a      	str	r2, [r3, #20]
 8001b8c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b8e:	1d3b      	adds	r3, r7, #4
 8001b90:	2234      	movs	r2, #52	; 0x34
 8001b92:	2100      	movs	r1, #0
 8001b94:	4618      	mov	r0, r3
 8001b96:	f008 fd54 	bl	800a642 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b9a:	4b49      	ldr	r3, [pc, #292]	; (8001cc0 <MX_TIM1_Init+0x158>)
 8001b9c:	4a49      	ldr	r2, [pc, #292]	; (8001cc4 <MX_TIM1_Init+0x15c>)
 8001b9e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7;
 8001ba0:	4b47      	ldr	r3, [pc, #284]	; (8001cc0 <MX_TIM1_Init+0x158>)
 8001ba2:	2207      	movs	r2, #7
 8001ba4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001ba6:	4b46      	ldr	r3, [pc, #280]	; (8001cc0 <MX_TIM1_Init+0x158>)
 8001ba8:	2220      	movs	r2, #32
 8001baa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1023;
 8001bac:	4b44      	ldr	r3, [pc, #272]	; (8001cc0 <MX_TIM1_Init+0x158>)
 8001bae:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8001bb2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bb4:	4b42      	ldr	r3, [pc, #264]	; (8001cc0 <MX_TIM1_Init+0x158>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001bba:	4b41      	ldr	r3, [pc, #260]	; (8001cc0 <MX_TIM1_Init+0x158>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bc0:	4b3f      	ldr	r3, [pc, #252]	; (8001cc0 <MX_TIM1_Init+0x158>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001bc6:	483e      	ldr	r0, [pc, #248]	; (8001cc0 <MX_TIM1_Init+0x158>)
 8001bc8:	f004 f9c6 	bl	8005f58 <HAL_TIM_PWM_Init>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001bd2:	f7ff fd7f 	bl	80016d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bde:	2300      	movs	r3, #0
 8001be0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001be2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001be6:	4619      	mov	r1, r3
 8001be8:	4835      	ldr	r0, [pc, #212]	; (8001cc0 <MX_TIM1_Init+0x158>)
 8001bea:	f005 fcb1 	bl	8007550 <HAL_TIMEx_MasterConfigSynchronization>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001bf4:	f7ff fd6e 	bl	80016d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bf8:	2360      	movs	r3, #96	; 0x60
 8001bfa:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 819;
 8001bfc:	f240 3333 	movw	r3, #819	; 0x333
 8001c00:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c02:	2300      	movs	r3, #0
 8001c04:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001c06:	2300      	movs	r3, #0
 8001c08:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001c12:	2300      	movs	r3, #0
 8001c14:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c16:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	4828      	ldr	r0, [pc, #160]	; (8001cc0 <MX_TIM1_Init+0x158>)
 8001c20:	f004 fd20 	bl	8006664 <HAL_TIM_PWM_ConfigChannel>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8001c2a:	f7ff fd53 	bl	80016d4 <Error_Handler>
  }
  sConfigOC.Pulse = 204;
 8001c2e:	23cc      	movs	r3, #204	; 0xcc
 8001c30:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c32:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001c36:	2204      	movs	r2, #4
 8001c38:	4619      	mov	r1, r3
 8001c3a:	4821      	ldr	r0, [pc, #132]	; (8001cc0 <MX_TIM1_Init+0x158>)
 8001c3c:	f004 fd12 	bl	8006664 <HAL_TIM_PWM_ConfigChannel>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <MX_TIM1_Init+0xe2>
  {
    Error_Handler();
 8001c46:	f7ff fd45 	bl	80016d4 <Error_Handler>
  }
  sConfigOC.Pulse = 205;
 8001c4a:	23cd      	movs	r3, #205	; 0xcd
 8001c4c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001c4e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001c52:	2208      	movs	r2, #8
 8001c54:	4619      	mov	r1, r3
 8001c56:	481a      	ldr	r0, [pc, #104]	; (8001cc0 <MX_TIM1_Init+0x158>)
 8001c58:	f004 fd04 	bl	8006664 <HAL_TIM_PWM_ConfigChannel>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001c62:	f7ff fd37 	bl	80016d4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001c66:	2300      	movs	r3, #0
 8001c68:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 200;
 8001c72:	23c8      	movs	r3, #200	; 0xc8
 8001c74:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001c76:	2300      	movs	r3, #0
 8001c78:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001c7a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c7e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001c80:	2300      	movs	r3, #0
 8001c82:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001c84:	2300      	movs	r3, #0
 8001c86:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001c8c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c90:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001c92:	2300      	movs	r3, #0
 8001c94:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001c96:	2300      	movs	r3, #0
 8001c98:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001c9e:	1d3b      	adds	r3, r7, #4
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	4807      	ldr	r0, [pc, #28]	; (8001cc0 <MX_TIM1_Init+0x158>)
 8001ca4:	f005 fcea 	bl	800767c <HAL_TIMEx_ConfigBreakDeadTime>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d001      	beq.n	8001cb2 <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 8001cae:	f7ff fd11 	bl	80016d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001cb2:	4803      	ldr	r0, [pc, #12]	; (8001cc0 <MX_TIM1_Init+0x158>)
 8001cb4:	f000 f97c 	bl	8001fb0 <HAL_TIM_MspPostInit>

}
 8001cb8:	bf00      	nop
 8001cba:	3760      	adds	r7, #96	; 0x60
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	200003d0 	.word	0x200003d0
 8001cc4:	40012c00 	.word	0x40012c00

08001cc8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b088      	sub	sp, #32
 8001ccc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_HallSensor_InitTypeDef sConfig = {0};
 8001cce:	f107 0310 	add.w	r3, r7, #16
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	601a      	str	r2, [r3, #0]
 8001cd6:	605a      	str	r2, [r3, #4]
 8001cd8:	609a      	str	r2, [r3, #8]
 8001cda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cdc:	1d3b      	adds	r3, r7, #4
 8001cde:	2200      	movs	r2, #0
 8001ce0:	601a      	str	r2, [r3, #0]
 8001ce2:	605a      	str	r2, [r3, #4]
 8001ce4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ce6:	4b1c      	ldr	r3, [pc, #112]	; (8001d58 <MX_TIM3_Init+0x90>)
 8001ce8:	4a1c      	ldr	r2, [pc, #112]	; (8001d5c <MX_TIM3_Init+0x94>)
 8001cea:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001cec:	4b1a      	ldr	r3, [pc, #104]	; (8001d58 <MX_TIM3_Init+0x90>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cf2:	4b19      	ldr	r3, [pc, #100]	; (8001d58 <MX_TIM3_Init+0x90>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001cf8:	4b17      	ldr	r3, [pc, #92]	; (8001d58 <MX_TIM3_Init+0x90>)
 8001cfa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cfe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d00:	4b15      	ldr	r3, [pc, #84]	; (8001d58 <MX_TIM3_Init+0x90>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d06:	4b14      	ldr	r3, [pc, #80]	; (8001d58 <MX_TIM3_Init+0x90>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	619a      	str	r2, [r3, #24]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001d10:	2300      	movs	r3, #0
 8001d12:	617b      	str	r3, [r7, #20]
  sConfig.IC1Filter = 0;
 8001d14:	2300      	movs	r3, #0
 8001d16:	61bb      	str	r3, [r7, #24]
  sConfig.Commutation_Delay = 0;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_HallSensor_Init(&htim3, &sConfig) != HAL_OK)
 8001d1c:	f107 0310 	add.w	r3, r7, #16
 8001d20:	4619      	mov	r1, r3
 8001d22:	480d      	ldr	r0, [pc, #52]	; (8001d58 <MX_TIM3_Init+0x90>)
 8001d24:	f005 fa45 	bl	80071b2 <HAL_TIMEx_HallSensor_Init>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8001d2e:	f7ff fcd1 	bl	80016d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8001d32:	2350      	movs	r3, #80	; 0x50
 8001d34:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d36:	2300      	movs	r3, #0
 8001d38:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d3a:	1d3b      	adds	r3, r7, #4
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	4806      	ldr	r0, [pc, #24]	; (8001d58 <MX_TIM3_Init+0x90>)
 8001d40:	f005 fc06 	bl	8007550 <HAL_TIMEx_MasterConfigSynchronization>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8001d4a:	f7ff fcc3 	bl	80016d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001d4e:	bf00      	nop
 8001d50:	3720      	adds	r7, #32
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	2000041c 	.word	0x2000041c
 8001d5c:	40000400 	.word	0x40000400

08001d60 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d66:	1d3b      	adds	r3, r7, #4
 8001d68:	2200      	movs	r2, #0
 8001d6a:	601a      	str	r2, [r3, #0]
 8001d6c:	605a      	str	r2, [r3, #4]
 8001d6e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001d70:	4b15      	ldr	r3, [pc, #84]	; (8001dc8 <MX_TIM7_Init+0x68>)
 8001d72:	4a16      	ldr	r2, [pc, #88]	; (8001dcc <MX_TIM7_Init+0x6c>)
 8001d74:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 3000;
 8001d76:	4b14      	ldr	r3, [pc, #80]	; (8001dc8 <MX_TIM7_Init+0x68>)
 8001d78:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001d7c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d7e:	4b12      	ldr	r3, [pc, #72]	; (8001dc8 <MX_TIM7_Init+0x68>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 8001d84:	4b10      	ldr	r3, [pc, #64]	; (8001dc8 <MX_TIM7_Init+0x68>)
 8001d86:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d8a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d8c:	4b0e      	ldr	r3, [pc, #56]	; (8001dc8 <MX_TIM7_Init+0x68>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001d92:	480d      	ldr	r0, [pc, #52]	; (8001dc8 <MX_TIM7_Init+0x68>)
 8001d94:	f004 f810 	bl	8005db8 <HAL_TIM_Base_Init>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8001d9e:	f7ff fc99 	bl	80016d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001da2:	2300      	movs	r3, #0
 8001da4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001da6:	2300      	movs	r3, #0
 8001da8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001daa:	1d3b      	adds	r3, r7, #4
 8001dac:	4619      	mov	r1, r3
 8001dae:	4806      	ldr	r0, [pc, #24]	; (8001dc8 <MX_TIM7_Init+0x68>)
 8001db0:	f005 fbce 	bl	8007550 <HAL_TIMEx_MasterConfigSynchronization>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8001dba:	f7ff fc8b 	bl	80016d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001dbe:	bf00      	nop
 8001dc0:	3710      	adds	r7, #16
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	20000468 	.word	0x20000468
 8001dcc:	40001400 	.word	0x40001400

08001dd0 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001dd4:	4b0f      	ldr	r3, [pc, #60]	; (8001e14 <MX_TIM16_Init+0x44>)
 8001dd6:	4a10      	ldr	r2, [pc, #64]	; (8001e18 <MX_TIM16_Init+0x48>)
 8001dd8:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8001dda:	4b0e      	ldr	r3, [pc, #56]	; (8001e14 <MX_TIM16_Init+0x44>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001de0:	4b0c      	ldr	r3, [pc, #48]	; (8001e14 <MX_TIM16_Init+0x44>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8001de6:	4b0b      	ldr	r3, [pc, #44]	; (8001e14 <MX_TIM16_Init+0x44>)
 8001de8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001dec:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dee:	4b09      	ldr	r3, [pc, #36]	; (8001e14 <MX_TIM16_Init+0x44>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001df4:	4b07      	ldr	r3, [pc, #28]	; (8001e14 <MX_TIM16_Init+0x44>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dfa:	4b06      	ldr	r3, [pc, #24]	; (8001e14 <MX_TIM16_Init+0x44>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001e00:	4804      	ldr	r0, [pc, #16]	; (8001e14 <MX_TIM16_Init+0x44>)
 8001e02:	f003 ffd9 	bl	8005db8 <HAL_TIM_Base_Init>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d001      	beq.n	8001e10 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8001e0c:	f7ff fc62 	bl	80016d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001e10:	bf00      	nop
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	200004b4 	.word	0x200004b4
 8001e18:	40014400 	.word	0x40014400

08001e1c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a0d      	ldr	r2, [pc, #52]	; (8001e60 <HAL_TIM_PWM_MspInit+0x44>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d113      	bne.n	8001e56 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e2e:	4b0d      	ldr	r3, [pc, #52]	; (8001e64 <HAL_TIM_PWM_MspInit+0x48>)
 8001e30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e32:	4a0c      	ldr	r2, [pc, #48]	; (8001e64 <HAL_TIM_PWM_MspInit+0x48>)
 8001e34:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001e38:	6613      	str	r3, [r2, #96]	; 0x60
 8001e3a:	4b0a      	ldr	r3, [pc, #40]	; (8001e64 <HAL_TIM_PWM_MspInit+0x48>)
 8001e3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e42:	60fb      	str	r3, [r7, #12]
 8001e44:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001e46:	2200      	movs	r2, #0
 8001e48:	2100      	movs	r1, #0
 8001e4a:	2019      	movs	r0, #25
 8001e4c:	f002 fca6 	bl	800479c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001e50:	2019      	movs	r0, #25
 8001e52:	f002 fcbd 	bl	80047d0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001e56:	bf00      	nop
 8001e58:	3710      	adds	r7, #16
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	40012c00 	.word	0x40012c00
 8001e64:	40021000 	.word	0x40021000

08001e68 <HAL_TIMEx_HallSensor_MspInit>:

void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef* timex_hallsensorHandle)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b08a      	sub	sp, #40	; 0x28
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e70:	f107 0314 	add.w	r3, r7, #20
 8001e74:	2200      	movs	r2, #0
 8001e76:	601a      	str	r2, [r3, #0]
 8001e78:	605a      	str	r2, [r3, #4]
 8001e7a:	609a      	str	r2, [r3, #8]
 8001e7c:	60da      	str	r2, [r3, #12]
 8001e7e:	611a      	str	r2, [r3, #16]
  if(timex_hallsensorHandle->Instance==TIM3)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a26      	ldr	r2, [pc, #152]	; (8001f20 <HAL_TIMEx_HallSensor_MspInit+0xb8>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d145      	bne.n	8001f16 <HAL_TIMEx_HallSensor_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e8a:	4b26      	ldr	r3, [pc, #152]	; (8001f24 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001e8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e8e:	4a25      	ldr	r2, [pc, #148]	; (8001f24 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001e90:	f043 0302 	orr.w	r3, r3, #2
 8001e94:	6593      	str	r3, [r2, #88]	; 0x58
 8001e96:	4b23      	ldr	r3, [pc, #140]	; (8001f24 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e9a:	f003 0302 	and.w	r3, r3, #2
 8001e9e:	613b      	str	r3, [r7, #16]
 8001ea0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ea2:	4b20      	ldr	r3, [pc, #128]	; (8001f24 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001ea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ea6:	4a1f      	ldr	r2, [pc, #124]	; (8001f24 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001ea8:	f043 0301 	orr.w	r3, r3, #1
 8001eac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001eae:	4b1d      	ldr	r3, [pc, #116]	; (8001f24 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001eb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eb2:	f003 0301 	and.w	r3, r3, #1
 8001eb6:	60fb      	str	r3, [r7, #12]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eba:	4b1a      	ldr	r3, [pc, #104]	; (8001f24 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ebe:	4a19      	ldr	r2, [pc, #100]	; (8001f24 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001ec0:	f043 0304 	orr.w	r3, r3, #4
 8001ec4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ec6:	4b17      	ldr	r3, [pc, #92]	; (8001f24 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001ec8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eca:	f003 0304 	and.w	r3, r3, #4
 8001ece:	60bb      	str	r3, [r7, #8]
 8001ed0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001ed2:	2350      	movs	r3, #80	; 0x50
 8001ed4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eda:	2300      	movs	r3, #0
 8001edc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ee6:	f107 0314 	add.w	r3, r7, #20
 8001eea:	4619      	mov	r1, r3
 8001eec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ef0:	f002 fd3c 	bl	800496c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001ef4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ef8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001efa:	2302      	movs	r3, #2
 8001efc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efe:	2300      	movs	r3, #0
 8001f00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f02:	2300      	movs	r3, #0
 8001f04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f06:	2302      	movs	r3, #2
 8001f08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f0a:	f107 0314 	add.w	r3, r7, #20
 8001f0e:	4619      	mov	r1, r3
 8001f10:	4805      	ldr	r0, [pc, #20]	; (8001f28 <HAL_TIMEx_HallSensor_MspInit+0xc0>)
 8001f12:	f002 fd2b 	bl	800496c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001f16:	bf00      	nop
 8001f18:	3728      	adds	r7, #40	; 0x28
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	40000400 	.word	0x40000400
 8001f24:	40021000 	.word	0x40021000
 8001f28:	48000800 	.word	0x48000800

08001f2c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b084      	sub	sp, #16
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a1a      	ldr	r2, [pc, #104]	; (8001fa4 <HAL_TIM_Base_MspInit+0x78>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d114      	bne.n	8001f68 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001f3e:	4b1a      	ldr	r3, [pc, #104]	; (8001fa8 <HAL_TIM_Base_MspInit+0x7c>)
 8001f40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f42:	4a19      	ldr	r2, [pc, #100]	; (8001fa8 <HAL_TIM_Base_MspInit+0x7c>)
 8001f44:	f043 0320 	orr.w	r3, r3, #32
 8001f48:	6593      	str	r3, [r2, #88]	; 0x58
 8001f4a:	4b17      	ldr	r3, [pc, #92]	; (8001fa8 <HAL_TIM_Base_MspInit+0x7c>)
 8001f4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f4e:	f003 0320 	and.w	r3, r3, #32
 8001f52:	60fb      	str	r3, [r7, #12]
 8001f54:	68fb      	ldr	r3, [r7, #12]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_DAC_IRQn, 0, 0);
 8001f56:	2200      	movs	r2, #0
 8001f58:	2100      	movs	r1, #0
 8001f5a:	2037      	movs	r0, #55	; 0x37
 8001f5c:	f002 fc1e 	bl	800479c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_DAC_IRQn);
 8001f60:	2037      	movs	r0, #55	; 0x37
 8001f62:	f002 fc35 	bl	80047d0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8001f66:	e018      	b.n	8001f9a <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM16)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a0f      	ldr	r2, [pc, #60]	; (8001fac <HAL_TIM_Base_MspInit+0x80>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d113      	bne.n	8001f9a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001f72:	4b0d      	ldr	r3, [pc, #52]	; (8001fa8 <HAL_TIM_Base_MspInit+0x7c>)
 8001f74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f76:	4a0c      	ldr	r2, [pc, #48]	; (8001fa8 <HAL_TIM_Base_MspInit+0x7c>)
 8001f78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f7c:	6613      	str	r3, [r2, #96]	; 0x60
 8001f7e:	4b0a      	ldr	r3, [pc, #40]	; (8001fa8 <HAL_TIM_Base_MspInit+0x7c>)
 8001f80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f86:	60bb      	str	r3, [r7, #8]
 8001f88:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	2100      	movs	r1, #0
 8001f8e:	2019      	movs	r0, #25
 8001f90:	f002 fc04 	bl	800479c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001f94:	2019      	movs	r0, #25
 8001f96:	f002 fc1b 	bl	80047d0 <HAL_NVIC_EnableIRQ>
}
 8001f9a:	bf00      	nop
 8001f9c:	3710      	adds	r7, #16
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	40001400 	.word	0x40001400
 8001fa8:	40021000 	.word	0x40021000
 8001fac:	40014400 	.word	0x40014400

08001fb0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b08a      	sub	sp, #40	; 0x28
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb8:	f107 0314 	add.w	r3, r7, #20
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	601a      	str	r2, [r3, #0]
 8001fc0:	605a      	str	r2, [r3, #4]
 8001fc2:	609a      	str	r2, [r3, #8]
 8001fc4:	60da      	str	r2, [r3, #12]
 8001fc6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a29      	ldr	r2, [pc, #164]	; (8002074 <HAL_TIM_MspPostInit+0xc4>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d14b      	bne.n	800206a <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fd2:	4b29      	ldr	r3, [pc, #164]	; (8002078 <HAL_TIM_MspPostInit+0xc8>)
 8001fd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fd6:	4a28      	ldr	r2, [pc, #160]	; (8002078 <HAL_TIM_MspPostInit+0xc8>)
 8001fd8:	f043 0302 	orr.w	r3, r3, #2
 8001fdc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fde:	4b26      	ldr	r3, [pc, #152]	; (8002078 <HAL_TIM_MspPostInit+0xc8>)
 8001fe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fe2:	f003 0302 	and.w	r3, r3, #2
 8001fe6:	613b      	str	r3, [r7, #16]
 8001fe8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fea:	4b23      	ldr	r3, [pc, #140]	; (8002078 <HAL_TIM_MspPostInit+0xc8>)
 8001fec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fee:	4a22      	ldr	r2, [pc, #136]	; (8002078 <HAL_TIM_MspPostInit+0xc8>)
 8001ff0:	f043 0301 	orr.w	r3, r3, #1
 8001ff4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ff6:	4b20      	ldr	r3, [pc, #128]	; (8002078 <HAL_TIM_MspPostInit+0xc8>)
 8001ff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ffa:	f003 0301 	and.w	r3, r3, #1
 8001ffe:	60fb      	str	r3, [r7, #12]
 8002000:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = U_PWM_L_Pin|V_PWM_L_Pin;
 8002002:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8002006:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002008:	2302      	movs	r3, #2
 800200a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800200c:	2300      	movs	r3, #0
 800200e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002010:	2300      	movs	r3, #0
 8002012:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002014:	2306      	movs	r3, #6
 8002016:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002018:	f107 0314 	add.w	r3, r7, #20
 800201c:	4619      	mov	r1, r3
 800201e:	4817      	ldr	r0, [pc, #92]	; (800207c <HAL_TIM_MspPostInit+0xcc>)
 8002020:	f002 fca4 	bl	800496c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = W_PWM_L_Pin;
 8002024:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002028:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800202a:	2302      	movs	r3, #2
 800202c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202e:	2300      	movs	r3, #0
 8002030:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002032:	2300      	movs	r3, #0
 8002034:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8002036:	2304      	movs	r3, #4
 8002038:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(W_PWM_L_GPIO_Port, &GPIO_InitStruct);
 800203a:	f107 0314 	add.w	r3, r7, #20
 800203e:	4619      	mov	r1, r3
 8002040:	480e      	ldr	r0, [pc, #56]	; (800207c <HAL_TIM_MspPostInit+0xcc>)
 8002042:	f002 fc93 	bl	800496c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_PWM_H_Pin|V_PWM_H_Pin|W_PWM_H_Pin;
 8002046:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800204a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800204c:	2302      	movs	r3, #2
 800204e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002050:	2300      	movs	r3, #0
 8002052:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002054:	2300      	movs	r3, #0
 8002056:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002058:	2306      	movs	r3, #6
 800205a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800205c:	f107 0314 	add.w	r3, r7, #20
 8002060:	4619      	mov	r1, r3
 8002062:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002066:	f002 fc81 	bl	800496c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800206a:	bf00      	nop
 800206c:	3728      	adds	r7, #40	; 0x28
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	40012c00 	.word	0x40012c00
 8002078:	40021000 	.word	0x40021000
 800207c:	48000400 	.word	0x48000400

08002080 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002084:	4b22      	ldr	r3, [pc, #136]	; (8002110 <MX_USART1_UART_Init+0x90>)
 8002086:	4a23      	ldr	r2, [pc, #140]	; (8002114 <MX_USART1_UART_Init+0x94>)
 8002088:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800208a:	4b21      	ldr	r3, [pc, #132]	; (8002110 <MX_USART1_UART_Init+0x90>)
 800208c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002090:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002092:	4b1f      	ldr	r3, [pc, #124]	; (8002110 <MX_USART1_UART_Init+0x90>)
 8002094:	2200      	movs	r2, #0
 8002096:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002098:	4b1d      	ldr	r3, [pc, #116]	; (8002110 <MX_USART1_UART_Init+0x90>)
 800209a:	2200      	movs	r2, #0
 800209c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800209e:	4b1c      	ldr	r3, [pc, #112]	; (8002110 <MX_USART1_UART_Init+0x90>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80020a4:	4b1a      	ldr	r3, [pc, #104]	; (8002110 <MX_USART1_UART_Init+0x90>)
 80020a6:	220c      	movs	r2, #12
 80020a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020aa:	4b19      	ldr	r3, [pc, #100]	; (8002110 <MX_USART1_UART_Init+0x90>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80020b0:	4b17      	ldr	r3, [pc, #92]	; (8002110 <MX_USART1_UART_Init+0x90>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80020b6:	4b16      	ldr	r3, [pc, #88]	; (8002110 <MX_USART1_UART_Init+0x90>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80020bc:	4b14      	ldr	r3, [pc, #80]	; (8002110 <MX_USART1_UART_Init+0x90>)
 80020be:	2200      	movs	r2, #0
 80020c0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020c2:	4b13      	ldr	r3, [pc, #76]	; (8002110 <MX_USART1_UART_Init+0x90>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80020c8:	4811      	ldr	r0, [pc, #68]	; (8002110 <MX_USART1_UART_Init+0x90>)
 80020ca:	f005 fbf4 	bl	80078b6 <HAL_UART_Init>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d001      	beq.n	80020d8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80020d4:	f7ff fafe 	bl	80016d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80020d8:	2100      	movs	r1, #0
 80020da:	480d      	ldr	r0, [pc, #52]	; (8002110 <MX_USART1_UART_Init+0x90>)
 80020dc:	f007 fb97 	bl	800980e <HAL_UARTEx_SetTxFifoThreshold>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80020e6:	f7ff faf5 	bl	80016d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80020ea:	2100      	movs	r1, #0
 80020ec:	4808      	ldr	r0, [pc, #32]	; (8002110 <MX_USART1_UART_Init+0x90>)
 80020ee:	f007 fbcc 	bl	800988a <HAL_UARTEx_SetRxFifoThreshold>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d001      	beq.n	80020fc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80020f8:	f7ff faec 	bl	80016d4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80020fc:	4804      	ldr	r0, [pc, #16]	; (8002110 <MX_USART1_UART_Init+0x90>)
 80020fe:	f007 fb4d 	bl	800979c <HAL_UARTEx_DisableFifoMode>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d001      	beq.n	800210c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002108:	f7ff fae4 	bl	80016d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800210c:	bf00      	nop
 800210e:	bd80      	pop	{r7, pc}
 8002110:	20000500 	.word	0x20000500
 8002114:	40013800 	.word	0x40013800

08002118 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800211c:	4b22      	ldr	r3, [pc, #136]	; (80021a8 <MX_USART2_UART_Init+0x90>)
 800211e:	4a23      	ldr	r2, [pc, #140]	; (80021ac <MX_USART2_UART_Init+0x94>)
 8002120:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002122:	4b21      	ldr	r3, [pc, #132]	; (80021a8 <MX_USART2_UART_Init+0x90>)
 8002124:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002128:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800212a:	4b1f      	ldr	r3, [pc, #124]	; (80021a8 <MX_USART2_UART_Init+0x90>)
 800212c:	2200      	movs	r2, #0
 800212e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002130:	4b1d      	ldr	r3, [pc, #116]	; (80021a8 <MX_USART2_UART_Init+0x90>)
 8002132:	2200      	movs	r2, #0
 8002134:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002136:	4b1c      	ldr	r3, [pc, #112]	; (80021a8 <MX_USART2_UART_Init+0x90>)
 8002138:	2200      	movs	r2, #0
 800213a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800213c:	4b1a      	ldr	r3, [pc, #104]	; (80021a8 <MX_USART2_UART_Init+0x90>)
 800213e:	220c      	movs	r2, #12
 8002140:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002142:	4b19      	ldr	r3, [pc, #100]	; (80021a8 <MX_USART2_UART_Init+0x90>)
 8002144:	2200      	movs	r2, #0
 8002146:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002148:	4b17      	ldr	r3, [pc, #92]	; (80021a8 <MX_USART2_UART_Init+0x90>)
 800214a:	2200      	movs	r2, #0
 800214c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800214e:	4b16      	ldr	r3, [pc, #88]	; (80021a8 <MX_USART2_UART_Init+0x90>)
 8002150:	2200      	movs	r2, #0
 8002152:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002154:	4b14      	ldr	r3, [pc, #80]	; (80021a8 <MX_USART2_UART_Init+0x90>)
 8002156:	2200      	movs	r2, #0
 8002158:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800215a:	4b13      	ldr	r3, [pc, #76]	; (80021a8 <MX_USART2_UART_Init+0x90>)
 800215c:	2200      	movs	r2, #0
 800215e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002160:	4811      	ldr	r0, [pc, #68]	; (80021a8 <MX_USART2_UART_Init+0x90>)
 8002162:	f005 fba8 	bl	80078b6 <HAL_UART_Init>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d001      	beq.n	8002170 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800216c:	f7ff fab2 	bl	80016d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002170:	2100      	movs	r1, #0
 8002172:	480d      	ldr	r0, [pc, #52]	; (80021a8 <MX_USART2_UART_Init+0x90>)
 8002174:	f007 fb4b 	bl	800980e <HAL_UARTEx_SetTxFifoThreshold>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d001      	beq.n	8002182 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800217e:	f7ff faa9 	bl	80016d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002182:	2100      	movs	r1, #0
 8002184:	4808      	ldr	r0, [pc, #32]	; (80021a8 <MX_USART2_UART_Init+0x90>)
 8002186:	f007 fb80 	bl	800988a <HAL_UARTEx_SetRxFifoThreshold>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d001      	beq.n	8002194 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002190:	f7ff faa0 	bl	80016d4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002194:	4804      	ldr	r0, [pc, #16]	; (80021a8 <MX_USART2_UART_Init+0x90>)
 8002196:	f007 fb01 	bl	800979c <HAL_UARTEx_DisableFifoMode>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d001      	beq.n	80021a4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80021a0:	f7ff fa98 	bl	80016d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80021a4:	bf00      	nop
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	20000590 	.word	0x20000590
 80021ac:	40004400 	.word	0x40004400

080021b0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80021b4:	4b22      	ldr	r3, [pc, #136]	; (8002240 <MX_USART3_UART_Init+0x90>)
 80021b6:	4a23      	ldr	r2, [pc, #140]	; (8002244 <MX_USART3_UART_Init+0x94>)
 80021b8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80021ba:	4b21      	ldr	r3, [pc, #132]	; (8002240 <MX_USART3_UART_Init+0x90>)
 80021bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80021c0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80021c2:	4b1f      	ldr	r3, [pc, #124]	; (8002240 <MX_USART3_UART_Init+0x90>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80021c8:	4b1d      	ldr	r3, [pc, #116]	; (8002240 <MX_USART3_UART_Init+0x90>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80021ce:	4b1c      	ldr	r3, [pc, #112]	; (8002240 <MX_USART3_UART_Init+0x90>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80021d4:	4b1a      	ldr	r3, [pc, #104]	; (8002240 <MX_USART3_UART_Init+0x90>)
 80021d6:	220c      	movs	r2, #12
 80021d8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021da:	4b19      	ldr	r3, [pc, #100]	; (8002240 <MX_USART3_UART_Init+0x90>)
 80021dc:	2200      	movs	r2, #0
 80021de:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80021e0:	4b17      	ldr	r3, [pc, #92]	; (8002240 <MX_USART3_UART_Init+0x90>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80021e6:	4b16      	ldr	r3, [pc, #88]	; (8002240 <MX_USART3_UART_Init+0x90>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80021ec:	4b14      	ldr	r3, [pc, #80]	; (8002240 <MX_USART3_UART_Init+0x90>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80021f2:	4b13      	ldr	r3, [pc, #76]	; (8002240 <MX_USART3_UART_Init+0x90>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80021f8:	4811      	ldr	r0, [pc, #68]	; (8002240 <MX_USART3_UART_Init+0x90>)
 80021fa:	f005 fb5c 	bl	80078b6 <HAL_UART_Init>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d001      	beq.n	8002208 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002204:	f7ff fa66 	bl	80016d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002208:	2100      	movs	r1, #0
 800220a:	480d      	ldr	r0, [pc, #52]	; (8002240 <MX_USART3_UART_Init+0x90>)
 800220c:	f007 faff 	bl	800980e <HAL_UARTEx_SetTxFifoThreshold>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d001      	beq.n	800221a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002216:	f7ff fa5d 	bl	80016d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800221a:	2100      	movs	r1, #0
 800221c:	4808      	ldr	r0, [pc, #32]	; (8002240 <MX_USART3_UART_Init+0x90>)
 800221e:	f007 fb34 	bl	800988a <HAL_UARTEx_SetRxFifoThreshold>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d001      	beq.n	800222c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002228:	f7ff fa54 	bl	80016d4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800222c:	4804      	ldr	r0, [pc, #16]	; (8002240 <MX_USART3_UART_Init+0x90>)
 800222e:	f007 fab5 	bl	800979c <HAL_UARTEx_DisableFifoMode>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d001      	beq.n	800223c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002238:	f7ff fa4c 	bl	80016d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800223c:	bf00      	nop
 800223e:	bd80      	pop	{r7, pc}
 8002240:	20000620 	.word	0x20000620
 8002244:	40004800 	.word	0x40004800

08002248 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b0a2      	sub	sp, #136	; 0x88
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002250:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002254:	2200      	movs	r2, #0
 8002256:	601a      	str	r2, [r3, #0]
 8002258:	605a      	str	r2, [r3, #4]
 800225a:	609a      	str	r2, [r3, #8]
 800225c:	60da      	str	r2, [r3, #12]
 800225e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002260:	f107 0320 	add.w	r3, r7, #32
 8002264:	2254      	movs	r2, #84	; 0x54
 8002266:	2100      	movs	r1, #0
 8002268:	4618      	mov	r0, r3
 800226a:	f008 f9ea 	bl	800a642 <memset>
  if(uartHandle->Instance==USART1)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a66      	ldr	r2, [pc, #408]	; (800240c <HAL_UART_MspInit+0x1c4>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d138      	bne.n	80022ea <HAL_UART_MspInit+0xa2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002278:	2301      	movs	r3, #1
 800227a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800227c:	2300      	movs	r3, #0
 800227e:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002280:	f107 0320 	add.w	r3, r7, #32
 8002284:	4618      	mov	r0, r3
 8002286:	f003 fb49 	bl	800591c <HAL_RCCEx_PeriphCLKConfig>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d001      	beq.n	8002294 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002290:	f7ff fa20 	bl	80016d4 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002294:	4b5e      	ldr	r3, [pc, #376]	; (8002410 <HAL_UART_MspInit+0x1c8>)
 8002296:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002298:	4a5d      	ldr	r2, [pc, #372]	; (8002410 <HAL_UART_MspInit+0x1c8>)
 800229a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800229e:	6613      	str	r3, [r2, #96]	; 0x60
 80022a0:	4b5b      	ldr	r3, [pc, #364]	; (8002410 <HAL_UART_MspInit+0x1c8>)
 80022a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022a8:	61fb      	str	r3, [r7, #28]
 80022aa:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022ac:	4b58      	ldr	r3, [pc, #352]	; (8002410 <HAL_UART_MspInit+0x1c8>)
 80022ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022b0:	4a57      	ldr	r2, [pc, #348]	; (8002410 <HAL_UART_MspInit+0x1c8>)
 80022b2:	f043 0304 	orr.w	r3, r3, #4
 80022b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022b8:	4b55      	ldr	r3, [pc, #340]	; (8002410 <HAL_UART_MspInit+0x1c8>)
 80022ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022bc:	f003 0304 	and.w	r3, r3, #4
 80022c0:	61bb      	str	r3, [r7, #24]
 80022c2:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80022c4:	2330      	movs	r3, #48	; 0x30
 80022c6:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022c8:	2302      	movs	r3, #2
 80022ca:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022cc:	2300      	movs	r3, #0
 80022ce:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022d0:	2300      	movs	r3, #0
 80022d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80022d6:	2307      	movs	r3, #7
 80022d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022dc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80022e0:	4619      	mov	r1, r3
 80022e2:	484c      	ldr	r0, [pc, #304]	; (8002414 <HAL_UART_MspInit+0x1cc>)
 80022e4:	f002 fb42 	bl	800496c <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80022e8:	e08c      	b.n	8002404 <HAL_UART_MspInit+0x1bc>
  else if(uartHandle->Instance==USART2)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a4a      	ldr	r2, [pc, #296]	; (8002418 <HAL_UART_MspInit+0x1d0>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d141      	bne.n	8002378 <HAL_UART_MspInit+0x130>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80022f4:	2302      	movs	r3, #2
 80022f6:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80022f8:	2300      	movs	r3, #0
 80022fa:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022fc:	f107 0320 	add.w	r3, r7, #32
 8002300:	4618      	mov	r0, r3
 8002302:	f003 fb0b 	bl	800591c <HAL_RCCEx_PeriphCLKConfig>
 8002306:	4603      	mov	r3, r0
 8002308:	2b00      	cmp	r3, #0
 800230a:	d001      	beq.n	8002310 <HAL_UART_MspInit+0xc8>
      Error_Handler();
 800230c:	f7ff f9e2 	bl	80016d4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002310:	4b3f      	ldr	r3, [pc, #252]	; (8002410 <HAL_UART_MspInit+0x1c8>)
 8002312:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002314:	4a3e      	ldr	r2, [pc, #248]	; (8002410 <HAL_UART_MspInit+0x1c8>)
 8002316:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800231a:	6593      	str	r3, [r2, #88]	; 0x58
 800231c:	4b3c      	ldr	r3, [pc, #240]	; (8002410 <HAL_UART_MspInit+0x1c8>)
 800231e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002320:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002324:	617b      	str	r3, [r7, #20]
 8002326:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002328:	4b39      	ldr	r3, [pc, #228]	; (8002410 <HAL_UART_MspInit+0x1c8>)
 800232a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800232c:	4a38      	ldr	r2, [pc, #224]	; (8002410 <HAL_UART_MspInit+0x1c8>)
 800232e:	f043 0301 	orr.w	r3, r3, #1
 8002332:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002334:	4b36      	ldr	r3, [pc, #216]	; (8002410 <HAL_UART_MspInit+0x1c8>)
 8002336:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002338:	f003 0301 	and.w	r3, r3, #1
 800233c:	613b      	str	r3, [r7, #16]
 800233e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002340:	230c      	movs	r3, #12
 8002342:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002344:	2302      	movs	r3, #2
 8002346:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002348:	2300      	movs	r3, #0
 800234a:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800234c:	2300      	movs	r3, #0
 800234e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002352:	2307      	movs	r3, #7
 8002354:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002358:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800235c:	4619      	mov	r1, r3
 800235e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002362:	f002 fb03 	bl	800496c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002366:	2200      	movs	r2, #0
 8002368:	2100      	movs	r1, #0
 800236a:	2026      	movs	r0, #38	; 0x26
 800236c:	f002 fa16 	bl	800479c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002370:	2026      	movs	r0, #38	; 0x26
 8002372:	f002 fa2d 	bl	80047d0 <HAL_NVIC_EnableIRQ>
}
 8002376:	e045      	b.n	8002404 <HAL_UART_MspInit+0x1bc>
  else if(uartHandle->Instance==USART3)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a27      	ldr	r2, [pc, #156]	; (800241c <HAL_UART_MspInit+0x1d4>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d140      	bne.n	8002404 <HAL_UART_MspInit+0x1bc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002382:	2304      	movs	r3, #4
 8002384:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002386:	2300      	movs	r3, #0
 8002388:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800238a:	f107 0320 	add.w	r3, r7, #32
 800238e:	4618      	mov	r0, r3
 8002390:	f003 fac4 	bl	800591c <HAL_RCCEx_PeriphCLKConfig>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d001      	beq.n	800239e <HAL_UART_MspInit+0x156>
      Error_Handler();
 800239a:	f7ff f99b 	bl	80016d4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800239e:	4b1c      	ldr	r3, [pc, #112]	; (8002410 <HAL_UART_MspInit+0x1c8>)
 80023a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023a2:	4a1b      	ldr	r2, [pc, #108]	; (8002410 <HAL_UART_MspInit+0x1c8>)
 80023a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023a8:	6593      	str	r3, [r2, #88]	; 0x58
 80023aa:	4b19      	ldr	r3, [pc, #100]	; (8002410 <HAL_UART_MspInit+0x1c8>)
 80023ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023b2:	60fb      	str	r3, [r7, #12]
 80023b4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023b6:	4b16      	ldr	r3, [pc, #88]	; (8002410 <HAL_UART_MspInit+0x1c8>)
 80023b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023ba:	4a15      	ldr	r2, [pc, #84]	; (8002410 <HAL_UART_MspInit+0x1c8>)
 80023bc:	f043 0304 	orr.w	r3, r3, #4
 80023c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023c2:	4b13      	ldr	r3, [pc, #76]	; (8002410 <HAL_UART_MspInit+0x1c8>)
 80023c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023c6:	f003 0304 	and.w	r3, r3, #4
 80023ca:	60bb      	str	r3, [r7, #8]
 80023cc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80023ce:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80023d2:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023d4:	2302      	movs	r3, #2
 80023d6:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d8:	2300      	movs	r3, #0
 80023da:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023dc:	2300      	movs	r3, #0
 80023de:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80023e2:	2307      	movs	r3, #7
 80023e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023e8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80023ec:	4619      	mov	r1, r3
 80023ee:	4809      	ldr	r0, [pc, #36]	; (8002414 <HAL_UART_MspInit+0x1cc>)
 80023f0:	f002 fabc 	bl	800496c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80023f4:	2200      	movs	r2, #0
 80023f6:	2100      	movs	r1, #0
 80023f8:	2027      	movs	r0, #39	; 0x27
 80023fa:	f002 f9cf 	bl	800479c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80023fe:	2027      	movs	r0, #39	; 0x27
 8002400:	f002 f9e6 	bl	80047d0 <HAL_NVIC_EnableIRQ>
}
 8002404:	bf00      	nop
 8002406:	3788      	adds	r7, #136	; 0x88
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}
 800240c:	40013800 	.word	0x40013800
 8002410:	40021000 	.word	0x40021000
 8002414:	48000800 	.word	0x48000800
 8002418:	40004400 	.word	0x40004400
 800241c:	40004800 	.word	0x40004800

08002420 <Shell_Init>:
uint32_t    speedValue;
uint32_t 	courant[50];



void Shell_Init(void){
 8002420:	b580      	push	{r7, lr}
 8002422:	af00      	add	r7, sp, #0
	memset(argv, NULL, MAX_ARGS*sizeof(char*));
 8002424:	2224      	movs	r2, #36	; 0x24
 8002426:	2100      	movs	r1, #0
 8002428:	4816      	ldr	r0, [pc, #88]	; (8002484 <Shell_Init+0x64>)
 800242a:	f008 f90a 	bl	800a642 <memset>
	memset(cmdBuffer, NULL, CMD_BUFFER_SIZE*sizeof(char));
 800242e:	2240      	movs	r2, #64	; 0x40
 8002430:	2100      	movs	r1, #0
 8002432:	4815      	ldr	r0, [pc, #84]	; (8002488 <Shell_Init+0x68>)
 8002434:	f008 f905 	bl	800a642 <memset>
 8002438:	4b14      	ldr	r3, [pc, #80]	; (800248c <Shell_Init+0x6c>)
 800243a:	2200      	movs	r2, #0
 800243c:	701a      	strb	r2, [r3, #0]
	memset(uartRxBuffer, NULL, UART_RX_BUFFER_SIZE*sizeof(char));
	memset(uartTxBuffer, NULL, UART_TX_BUFFER_SIZE*sizeof(char));
 800243e:	2240      	movs	r2, #64	; 0x40
 8002440:	2100      	movs	r1, #0
 8002442:	4813      	ldr	r0, [pc, #76]	; (8002490 <Shell_Init+0x70>)
 8002444:	f008 f8fd 	bl	800a642 <memset>

	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8002448:	2201      	movs	r2, #1
 800244a:	4910      	ldr	r1, [pc, #64]	; (800248c <Shell_Init+0x6c>)
 800244c:	4811      	ldr	r0, [pc, #68]	; (8002494 <Shell_Init+0x74>)
 800244e:	f005 fb19 	bl	8007a84 <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart2, started, strlen((char *)started), HAL_MAX_DELAY);
 8002452:	4811      	ldr	r0, [pc, #68]	; (8002498 <Shell_Init+0x78>)
 8002454:	f7fd ff44 	bl	80002e0 <strlen>
 8002458:	4603      	mov	r3, r0
 800245a:	b29a      	uxth	r2, r3
 800245c:	f04f 33ff 	mov.w	r3, #4294967295
 8002460:	490d      	ldr	r1, [pc, #52]	; (8002498 <Shell_Init+0x78>)
 8002462:	480c      	ldr	r0, [pc, #48]	; (8002494 <Shell_Init+0x74>)
 8002464:	f005 fa77 	bl	8007956 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, prompt, strlen((char *)prompt), HAL_MAX_DELAY);
 8002468:	480c      	ldr	r0, [pc, #48]	; (800249c <Shell_Init+0x7c>)
 800246a:	f7fd ff39 	bl	80002e0 <strlen>
 800246e:	4603      	mov	r3, r0
 8002470:	b29a      	uxth	r2, r3
 8002472:	f04f 33ff 	mov.w	r3, #4294967295
 8002476:	4909      	ldr	r1, [pc, #36]	; (800249c <Shell_Init+0x7c>)
 8002478:	4806      	ldr	r0, [pc, #24]	; (8002494 <Shell_Init+0x74>)
 800247a:	f005 fa6c 	bl	8007956 <HAL_UART_Transmit>
}
 800247e:	bf00      	nop
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	2000073c 	.word	0x2000073c
 8002488:	200006f8 	.word	0x200006f8
 800248c:	200006b4 	.word	0x200006b4
 8002490:	200006b8 	.word	0x200006b8
 8002494:	20000590 	.word	0x20000590
 8002498:	20000020 	.word	0x20000020
 800249c:	20000004 	.word	0x20000004

080024a0 <Shell_Loop>:

void Shell_Loop(void){
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
	if(uartRxReceived){
 80024a6:	4b9c      	ldr	r3, [pc, #624]	; (8002718 <Shell_Loop+0x278>)
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d05b      	beq.n	8002566 <Shell_Loop+0xc6>
		switch(uartRxBuffer[0]){
 80024ae:	4b9b      	ldr	r3, [pc, #620]	; (800271c <Shell_Loop+0x27c>)
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	2b08      	cmp	r3, #8
 80024b4:	d034      	beq.n	8002520 <Shell_Loop+0x80>
 80024b6:	2b0d      	cmp	r3, #13
 80024b8:	d142      	bne.n	8002540 <Shell_Loop+0xa0>
		case ASCII_CR: // Nouvelle ligne, instruction à traiter
			HAL_UART_Transmit(&huart2, newline, sizeof(newline), HAL_MAX_DELAY);
 80024ba:	f04f 33ff 	mov.w	r3, #4294967295
 80024be:	2203      	movs	r2, #3
 80024c0:	4997      	ldr	r1, [pc, #604]	; (8002720 <Shell_Loop+0x280>)
 80024c2:	4898      	ldr	r0, [pc, #608]	; (8002724 <Shell_Loop+0x284>)
 80024c4:	f005 fa47 	bl	8007956 <HAL_UART_Transmit>
			cmdBuffer[idx_cmd] = '\0';
 80024c8:	4b97      	ldr	r3, [pc, #604]	; (8002728 <Shell_Loop+0x288>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a97      	ldr	r2, [pc, #604]	; (800272c <Shell_Loop+0x28c>)
 80024ce:	2100      	movs	r1, #0
 80024d0:	54d1      	strb	r1, [r2, r3]
			argc = 0;
 80024d2:	4b97      	ldr	r3, [pc, #604]	; (8002730 <Shell_Loop+0x290>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	601a      	str	r2, [r3, #0]
			token = strtok(cmdBuffer, " ");
 80024d8:	4996      	ldr	r1, [pc, #600]	; (8002734 <Shell_Loop+0x294>)
 80024da:	4894      	ldr	r0, [pc, #592]	; (800272c <Shell_Loop+0x28c>)
 80024dc:	f008 f8cc 	bl	800a678 <strtok>
 80024e0:	4603      	mov	r3, r0
 80024e2:	4a95      	ldr	r2, [pc, #596]	; (8002738 <Shell_Loop+0x298>)
 80024e4:	6013      	str	r3, [r2, #0]
			while(token!=NULL){
 80024e6:	e010      	b.n	800250a <Shell_Loop+0x6a>
				argv[argc++] = token;
 80024e8:	4b91      	ldr	r3, [pc, #580]	; (8002730 <Shell_Loop+0x290>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	1c5a      	adds	r2, r3, #1
 80024ee:	4990      	ldr	r1, [pc, #576]	; (8002730 <Shell_Loop+0x290>)
 80024f0:	600a      	str	r2, [r1, #0]
 80024f2:	4a91      	ldr	r2, [pc, #580]	; (8002738 <Shell_Loop+0x298>)
 80024f4:	6812      	ldr	r2, [r2, #0]
 80024f6:	4991      	ldr	r1, [pc, #580]	; (800273c <Shell_Loop+0x29c>)
 80024f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				token = strtok(NULL, " ");
 80024fc:	498d      	ldr	r1, [pc, #564]	; (8002734 <Shell_Loop+0x294>)
 80024fe:	2000      	movs	r0, #0
 8002500:	f008 f8ba 	bl	800a678 <strtok>
 8002504:	4603      	mov	r3, r0
 8002506:	4a8c      	ldr	r2, [pc, #560]	; (8002738 <Shell_Loop+0x298>)
 8002508:	6013      	str	r3, [r2, #0]
			while(token!=NULL){
 800250a:	4b8b      	ldr	r3, [pc, #556]	; (8002738 <Shell_Loop+0x298>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d1ea      	bne.n	80024e8 <Shell_Loop+0x48>
			}
			idx_cmd = 0;
 8002512:	4b85      	ldr	r3, [pc, #532]	; (8002728 <Shell_Loop+0x288>)
 8002514:	2200      	movs	r2, #0
 8002516:	601a      	str	r2, [r3, #0]
			newCmdReady = 1;
 8002518:	4b89      	ldr	r3, [pc, #548]	; (8002740 <Shell_Loop+0x2a0>)
 800251a:	2201      	movs	r2, #1
 800251c:	601a      	str	r2, [r3, #0]
			break;
 800251e:	e01f      	b.n	8002560 <Shell_Loop+0xc0>
		case ASCII_BACK: // Suppression du dernier caractère
			cmdBuffer[idx_cmd--] = '\0';
 8002520:	4b81      	ldr	r3, [pc, #516]	; (8002728 <Shell_Loop+0x288>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	1e5a      	subs	r2, r3, #1
 8002526:	4980      	ldr	r1, [pc, #512]	; (8002728 <Shell_Loop+0x288>)
 8002528:	600a      	str	r2, [r1, #0]
 800252a:	4a80      	ldr	r2, [pc, #512]	; (800272c <Shell_Loop+0x28c>)
 800252c:	2100      	movs	r1, #0
 800252e:	54d1      	strb	r1, [r2, r3]
			HAL_UART_Transmit(&huart2, backspace, sizeof(backspace), HAL_MAX_DELAY);
 8002530:	f04f 33ff 	mov.w	r3, #4294967295
 8002534:	2204      	movs	r2, #4
 8002536:	4983      	ldr	r1, [pc, #524]	; (8002744 <Shell_Loop+0x2a4>)
 8002538:	487a      	ldr	r0, [pc, #488]	; (8002724 <Shell_Loop+0x284>)
 800253a:	f005 fa0c 	bl	8007956 <HAL_UART_Transmit>
			break;
 800253e:	e00f      	b.n	8002560 <Shell_Loop+0xc0>

		default: // Nouveau caractère
			cmdBuffer[idx_cmd++] = uartRxBuffer[0];
 8002540:	4b79      	ldr	r3, [pc, #484]	; (8002728 <Shell_Loop+0x288>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	1c5a      	adds	r2, r3, #1
 8002546:	4978      	ldr	r1, [pc, #480]	; (8002728 <Shell_Loop+0x288>)
 8002548:	600a      	str	r2, [r1, #0]
 800254a:	4a74      	ldr	r2, [pc, #464]	; (800271c <Shell_Loop+0x27c>)
 800254c:	7811      	ldrb	r1, [r2, #0]
 800254e:	4a77      	ldr	r2, [pc, #476]	; (800272c <Shell_Loop+0x28c>)
 8002550:	54d1      	strb	r1, [r2, r3]
			HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 8002552:	f04f 33ff 	mov.w	r3, #4294967295
 8002556:	2201      	movs	r2, #1
 8002558:	4970      	ldr	r1, [pc, #448]	; (800271c <Shell_Loop+0x27c>)
 800255a:	4872      	ldr	r0, [pc, #456]	; (8002724 <Shell_Loop+0x284>)
 800255c:	f005 f9fb 	bl	8007956 <HAL_UART_Transmit>
		}
		uartRxReceived = 0;
 8002560:	4b6d      	ldr	r3, [pc, #436]	; (8002718 <Shell_Loop+0x278>)
 8002562:	2200      	movs	r2, #0
 8002564:	701a      	strb	r2, [r3, #0]
	}

	if(newCmdReady){
 8002566:	4b76      	ldr	r3, [pc, #472]	; (8002740 <Shell_Loop+0x2a0>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	2b00      	cmp	r3, #0
 800256c:	f000 80d0 	beq.w	8002710 <Shell_Loop+0x270>

		if (strncmp(cmdBuffer,"speed=",strlen("speed="))==0)
 8002570:	2206      	movs	r2, #6
 8002572:	4975      	ldr	r1, [pc, #468]	; (8002748 <Shell_Loop+0x2a8>)
 8002574:	486d      	ldr	r0, [pc, #436]	; (800272c <Shell_Loop+0x28c>)
 8002576:	f008 f86c 	bl	800a652 <strncmp>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d12d      	bne.n	80025dc <Shell_Loop+0x13c>
		{

			speedValue= atoi(cmdBuffer+strlen("speed="));
 8002580:	4b72      	ldr	r3, [pc, #456]	; (800274c <Shell_Loop+0x2ac>)
 8002582:	4618      	mov	r0, r3
 8002584:	f007 fa0e 	bl	80099a4 <atoi>
 8002588:	4603      	mov	r3, r0
 800258a:	461a      	mov	r2, r3
 800258c:	4b70      	ldr	r3, [pc, #448]	; (8002750 <Shell_Loop+0x2b0>)
 800258e:	601a      	str	r2, [r3, #0]

			if (speedValue> maxSpeed)
 8002590:	4b6f      	ldr	r3, [pc, #444]	; (8002750 <Shell_Loop+0x2b0>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a6f      	ldr	r2, [pc, #444]	; (8002754 <Shell_Loop+0x2b4>)
 8002596:	6812      	ldr	r2, [r2, #0]
 8002598:	4293      	cmp	r3, r2
 800259a:	d905      	bls.n	80025a8 <Shell_Loop+0x108>
			{
				speedValue= maxSpeed;
 800259c:	4b6d      	ldr	r3, [pc, #436]	; (8002754 <Shell_Loop+0x2b4>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	461a      	mov	r2, r3
 80025a2:	4b6b      	ldr	r3, [pc, #428]	; (8002750 <Shell_Loop+0x2b0>)
 80025a4:	601a      	str	r2, [r3, #0]
 80025a6:	e00a      	b.n	80025be <Shell_Loop+0x11e>

			}
			else if (speedValue< minSpeed)
 80025a8:	4b69      	ldr	r3, [pc, #420]	; (8002750 <Shell_Loop+0x2b0>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a6a      	ldr	r2, [pc, #424]	; (8002758 <Shell_Loop+0x2b8>)
 80025ae:	6812      	ldr	r2, [r2, #0]
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d204      	bcs.n	80025be <Shell_Loop+0x11e>
			{
				speedValue = minSpeed;
 80025b4:	4b68      	ldr	r3, [pc, #416]	; (8002758 <Shell_Loop+0x2b8>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	461a      	mov	r2, r3
 80025ba:	4b65      	ldr	r3, [pc, #404]	; (8002750 <Shell_Loop+0x2b0>)
 80025bc:	601a      	str	r2, [r3, #0]

			}
			//ChangeSpeed(speedValue);
			sprintf(speed,"Speed is changed to %d\r\n",speedValue);
 80025be:	4b64      	ldr	r3, [pc, #400]	; (8002750 <Shell_Loop+0x2b0>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	461a      	mov	r2, r3
 80025c4:	4965      	ldr	r1, [pc, #404]	; (800275c <Shell_Loop+0x2bc>)
 80025c6:	4866      	ldr	r0, [pc, #408]	; (8002760 <Shell_Loop+0x2c0>)
 80025c8:	f007 ffd8 	bl	800a57c <siprintf>
			HAL_UART_Transmit(&huart2, speed, sizeof(speed), HAL_MAX_DELAY);
 80025cc:	f04f 33ff 	mov.w	r3, #4294967295
 80025d0:	22c8      	movs	r2, #200	; 0xc8
 80025d2:	4963      	ldr	r1, [pc, #396]	; (8002760 <Shell_Loop+0x2c0>)
 80025d4:	4853      	ldr	r0, [pc, #332]	; (8002724 <Shell_Loop+0x284>)
 80025d6:	f005 f9be 	bl	8007956 <HAL_UART_Transmit>
 80025da:	e08f      	b.n	80026fc <Shell_Loop+0x25c>
		}

		else if (strncmp(cmdBuffer,"start",strlen("stop"))==0)
 80025dc:	2204      	movs	r2, #4
 80025de:	4961      	ldr	r1, [pc, #388]	; (8002764 <Shell_Loop+0x2c4>)
 80025e0:	4852      	ldr	r0, [pc, #328]	; (800272c <Shell_Loop+0x28c>)
 80025e2:	f008 f836 	bl	800a652 <strncmp>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d126      	bne.n	800263a <Shell_Loop+0x19a>
				{
					HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1); //D11
 80025ec:	2100      	movs	r1, #0
 80025ee:	485e      	ldr	r0, [pc, #376]	; (8002768 <Shell_Loop+0x2c8>)
 80025f0:	f003 fd0a 	bl	8006008 <HAL_TIM_PWM_Start>
					HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_1);
 80025f4:	2100      	movs	r1, #0
 80025f6:	485c      	ldr	r0, [pc, #368]	; (8002768 <Shell_Loop+0x2c8>)
 80025f8:	f004 fe8a 	bl	8007310 <HAL_TIMEx_PWMN_Start>

					TIM1->CCR1 = (TIM1->ARR)*50/100;
 80025fc:	4b5b      	ldr	r3, [pc, #364]	; (800276c <Shell_Loop+0x2cc>)
 80025fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002600:	2232      	movs	r2, #50	; 0x32
 8002602:	fb02 f303 	mul.w	r3, r2, r3
 8002606:	4a59      	ldr	r2, [pc, #356]	; (800276c <Shell_Loop+0x2cc>)
 8002608:	4959      	ldr	r1, [pc, #356]	; (8002770 <Shell_Loop+0x2d0>)
 800260a:	fba1 1303 	umull	r1, r3, r1, r3
 800260e:	095b      	lsrs	r3, r3, #5
 8002610:	6353      	str	r3, [r2, #52]	; 0x34

					HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2); //D5
 8002612:	2104      	movs	r1, #4
 8002614:	4854      	ldr	r0, [pc, #336]	; (8002768 <Shell_Loop+0x2c8>)
 8002616:	f003 fcf7 	bl	8006008 <HAL_TIM_PWM_Start>
					HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_2);
 800261a:	2104      	movs	r1, #4
 800261c:	4852      	ldr	r0, [pc, #328]	; (8002768 <Shell_Loop+0x2c8>)
 800261e:	f004 fe77 	bl	8007310 <HAL_TIMEx_PWMN_Start>

					TIM1->CCR2 = (TIM1->ARR)*50/100;
 8002622:	4b52      	ldr	r3, [pc, #328]	; (800276c <Shell_Loop+0x2cc>)
 8002624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002626:	2232      	movs	r2, #50	; 0x32
 8002628:	fb02 f303 	mul.w	r3, r2, r3
 800262c:	4a4f      	ldr	r2, [pc, #316]	; (800276c <Shell_Loop+0x2cc>)
 800262e:	4950      	ldr	r1, [pc, #320]	; (8002770 <Shell_Loop+0x2d0>)
 8002630:	fba1 1303 	umull	r1, r3, r1, r3
 8002634:	095b      	lsrs	r3, r3, #5
 8002636:	6393      	str	r3, [r2, #56]	; 0x38
 8002638:	e060      	b.n	80026fc <Shell_Loop+0x25c>



				}

		else if (strncmp(cmdBuffer,"courant",strlen("courant"))==0)
 800263a:	2207      	movs	r2, #7
 800263c:	494d      	ldr	r1, [pc, #308]	; (8002774 <Shell_Loop+0x2d4>)
 800263e:	483b      	ldr	r0, [pc, #236]	; (800272c <Shell_Loop+0x28c>)
 8002640:	f008 f807 	bl	800a652 <strncmp>
 8002644:	4603      	mov	r3, r0
 8002646:	2b00      	cmp	r3, #0
 8002648:	d120      	bne.n	800268c <Shell_Loop+0x1ec>
				{
					//courant_mes = read_current();
					courant_mes = 0;
 800264a:	4b4b      	ldr	r3, [pc, #300]	; (8002778 <Shell_Loop+0x2d8>)
 800264c:	f04f 0200 	mov.w	r2, #0
 8002650:	601a      	str	r2, [r3, #0]
					courant_mes = HAL_ADC_GetValue(&hadc1);
 8002652:	484a      	ldr	r0, [pc, #296]	; (800277c <Shell_Loop+0x2dc>)
 8002654:	f000 ff5c 	bl	8003510 <HAL_ADC_GetValue>
 8002658:	ee07 0a90 	vmov	s15, r0
 800265c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002660:	4b45      	ldr	r3, [pc, #276]	; (8002778 <Shell_Loop+0x2d8>)
 8002662:	edc3 7a00 	vstr	s15, [r3]
					sprintf(courant,"Current value is %f\r\n",courant_mes);
 8002666:	4b44      	ldr	r3, [pc, #272]	; (8002778 <Shell_Loop+0x2d8>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4618      	mov	r0, r3
 800266c:	f7fd ffa4 	bl	80005b8 <__aeabi_f2d>
 8002670:	4602      	mov	r2, r0
 8002672:	460b      	mov	r3, r1
 8002674:	4942      	ldr	r1, [pc, #264]	; (8002780 <Shell_Loop+0x2e0>)
 8002676:	4843      	ldr	r0, [pc, #268]	; (8002784 <Shell_Loop+0x2e4>)
 8002678:	f007 ff80 	bl	800a57c <siprintf>
					HAL_UART_Transmit(&huart2, courant, sizeof(courant), HAL_MAX_DELAY);
 800267c:	f04f 33ff 	mov.w	r3, #4294967295
 8002680:	22c8      	movs	r2, #200	; 0xc8
 8002682:	4940      	ldr	r1, [pc, #256]	; (8002784 <Shell_Loop+0x2e4>)
 8002684:	4827      	ldr	r0, [pc, #156]	; (8002724 <Shell_Loop+0x284>)
 8002686:	f005 f966 	bl	8007956 <HAL_UART_Transmit>
 800268a:	e037      	b.n	80026fc <Shell_Loop+0x25c>
				}

		else if (strncmp(cmdBuffer,"stop",strlen("stop"))==0)
 800268c:	2204      	movs	r2, #4
 800268e:	493e      	ldr	r1, [pc, #248]	; (8002788 <Shell_Loop+0x2e8>)
 8002690:	4826      	ldr	r0, [pc, #152]	; (800272c <Shell_Loop+0x28c>)
 8002692:	f007 ffde 	bl	800a652 <strncmp>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d110      	bne.n	80026be <Shell_Loop+0x21e>
		{
			HAL_TIM_PWM_Stop(&htim1,TIM_CHANNEL_1); //D11
 800269c:	2100      	movs	r1, #0
 800269e:	4832      	ldr	r0, [pc, #200]	; (8002768 <Shell_Loop+0x2c8>)
 80026a0:	f003 fdc4 	bl	800622c <HAL_TIM_PWM_Stop>
			HAL_TIMEx_PWMN_Stop(&htim1,TIM_CHANNEL_1);
 80026a4:	2100      	movs	r1, #0
 80026a6:	4830      	ldr	r0, [pc, #192]	; (8002768 <Shell_Loop+0x2c8>)
 80026a8:	f004 fef4 	bl	8007494 <HAL_TIMEx_PWMN_Stop>
			HAL_TIM_PWM_Stop(&htim1,TIM_CHANNEL_2); //D5
 80026ac:	2104      	movs	r1, #4
 80026ae:	482e      	ldr	r0, [pc, #184]	; (8002768 <Shell_Loop+0x2c8>)
 80026b0:	f003 fdbc 	bl	800622c <HAL_TIM_PWM_Stop>
			HAL_TIMEx_PWMN_Stop(&htim1,TIM_CHANNEL_2);
 80026b4:	2104      	movs	r1, #4
 80026b6:	482c      	ldr	r0, [pc, #176]	; (8002768 <Shell_Loop+0x2c8>)
 80026b8:	f004 feec 	bl	8007494 <HAL_TIMEx_PWMN_Stop>
 80026bc:	e01e      	b.n	80026fc <Shell_Loop+0x25c>

		}

		else if(strcmp(argv[0],"help")==0){
 80026be:	4b1f      	ldr	r3, [pc, #124]	; (800273c <Shell_Loop+0x29c>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4932      	ldr	r1, [pc, #200]	; (800278c <Shell_Loop+0x2ec>)
 80026c4:	4618      	mov	r0, r3
 80026c6:	f7fd fdab 	bl	8000220 <strcmp>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d10e      	bne.n	80026ee <Shell_Loop+0x24e>
			int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Print all available functions here\r\n");
 80026d0:	4a2f      	ldr	r2, [pc, #188]	; (8002790 <Shell_Loop+0x2f0>)
 80026d2:	2140      	movs	r1, #64	; 0x40
 80026d4:	482f      	ldr	r0, [pc, #188]	; (8002794 <Shell_Loop+0x2f4>)
 80026d6:	f007 ff1d 	bl	800a514 <sniprintf>
 80026da:	6078      	str	r0, [r7, #4]
			HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	b29a      	uxth	r2, r3
 80026e0:	f04f 33ff 	mov.w	r3, #4294967295
 80026e4:	492b      	ldr	r1, [pc, #172]	; (8002794 <Shell_Loop+0x2f4>)
 80026e6:	480f      	ldr	r0, [pc, #60]	; (8002724 <Shell_Loop+0x284>)
 80026e8:	f005 f935 	bl	8007956 <HAL_UART_Transmit>
 80026ec:	e006      	b.n	80026fc <Shell_Loop+0x25c>
		}
		else{
			HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 80026ee:	f04f 33ff 	mov.w	r3, #4294967295
 80026f2:	2214      	movs	r2, #20
 80026f4:	4928      	ldr	r1, [pc, #160]	; (8002798 <Shell_Loop+0x2f8>)
 80026f6:	480b      	ldr	r0, [pc, #44]	; (8002724 <Shell_Loop+0x284>)
 80026f8:	f005 f92d 	bl	8007956 <HAL_UART_Transmit>
		}
		HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 80026fc:	f04f 33ff 	mov.w	r3, #4294967295
 8002700:	221c      	movs	r2, #28
 8002702:	4926      	ldr	r1, [pc, #152]	; (800279c <Shell_Loop+0x2fc>)
 8002704:	4807      	ldr	r0, [pc, #28]	; (8002724 <Shell_Loop+0x284>)
 8002706:	f005 f926 	bl	8007956 <HAL_UART_Transmit>
		newCmdReady = 0;
 800270a:	4b0d      	ldr	r3, [pc, #52]	; (8002740 <Shell_Loop+0x2a0>)
 800270c:	2200      	movs	r2, #0
 800270e:	601a      	str	r2, [r3, #0]
	}
}
 8002710:	bf00      	nop
 8002712:	3708      	adds	r7, #8
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}
 8002718:	200006b0 	.word	0x200006b0
 800271c:	200006b4 	.word	0x200006b4
 8002720:	20000088 	.word	0x20000088
 8002724:	20000590 	.word	0x20000590
 8002728:	20000738 	.word	0x20000738
 800272c:	200006f8 	.word	0x200006f8
 8002730:	20000760 	.word	0x20000760
 8002734:	0800c940 	.word	0x0800c940
 8002738:	20000764 	.word	0x20000764
 800273c:	2000073c 	.word	0x2000073c
 8002740:	20000768 	.word	0x20000768
 8002744:	2000008c 	.word	0x2000008c
 8002748:	0800c944 	.word	0x0800c944
 800274c:	200006fe 	.word	0x200006fe
 8002750:	20000838 	.word	0x20000838
 8002754:	200000a4 	.word	0x200000a4
 8002758:	2000076c 	.word	0x2000076c
 800275c:	0800c94c 	.word	0x0800c94c
 8002760:	20000770 	.word	0x20000770
 8002764:	0800c968 	.word	0x0800c968
 8002768:	200003d0 	.word	0x200003d0
 800276c:	40012c00 	.word	0x40012c00
 8002770:	51eb851f 	.word	0x51eb851f
 8002774:	0800c970 	.word	0x0800c970
 8002778:	20000378 	.word	0x20000378
 800277c:	20000294 	.word	0x20000294
 8002780:	0800c978 	.word	0x0800c978
 8002784:	2000083c 	.word	0x2000083c
 8002788:	0800c990 	.word	0x0800c990
 800278c:	0800c998 	.word	0x0800c998
 8002790:	0800c9a0 	.word	0x0800c9a0
 8002794:	200006b8 	.word	0x200006b8
 8002798:	20000090 	.word	0x20000090
 800279c:	20000004 	.word	0x20000004

080027a0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart){
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
	uartRxReceived = 1;
 80027a8:	4b05      	ldr	r3, [pc, #20]	; (80027c0 <HAL_UART_RxCpltCallback+0x20>)
 80027aa:	2201      	movs	r2, #1
 80027ac:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 80027ae:	2201      	movs	r2, #1
 80027b0:	4904      	ldr	r1, [pc, #16]	; (80027c4 <HAL_UART_RxCpltCallback+0x24>)
 80027b2:	4805      	ldr	r0, [pc, #20]	; (80027c8 <HAL_UART_RxCpltCallback+0x28>)
 80027b4:	f005 f966 	bl	8007a84 <HAL_UART_Receive_IT>
}
 80027b8:	bf00      	nop
 80027ba:	3708      	adds	r7, #8
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	200006b0 	.word	0x200006b0
 80027c4:	200006b4 	.word	0x200006b4
 80027c8:	20000590 	.word	0x20000590

080027cc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80027cc:	480d      	ldr	r0, [pc, #52]	; (8002804 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80027ce:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80027d0:	480d      	ldr	r0, [pc, #52]	; (8002808 <LoopForever+0x6>)
  ldr r1, =_edata
 80027d2:	490e      	ldr	r1, [pc, #56]	; (800280c <LoopForever+0xa>)
  ldr r2, =_sidata
 80027d4:	4a0e      	ldr	r2, [pc, #56]	; (8002810 <LoopForever+0xe>)
  movs r3, #0
 80027d6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80027d8:	e002      	b.n	80027e0 <LoopCopyDataInit>

080027da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027de:	3304      	adds	r3, #4

080027e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027e4:	d3f9      	bcc.n	80027da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027e6:	4a0b      	ldr	r2, [pc, #44]	; (8002814 <LoopForever+0x12>)
  ldr r4, =_ebss
 80027e8:	4c0b      	ldr	r4, [pc, #44]	; (8002818 <LoopForever+0x16>)
  movs r3, #0
 80027ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027ec:	e001      	b.n	80027f2 <LoopFillZerobss>

080027ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027f0:	3204      	adds	r2, #4

080027f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027f4:	d3fb      	bcc.n	80027ee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80027f6:	f7ff f9a5 	bl	8001b44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80027fa:	f007 ffe9 	bl	800a7d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80027fe:	f7fe fe9b 	bl	8001538 <main>

08002802 <LoopForever>:

LoopForever:
    b LoopForever
 8002802:	e7fe      	b.n	8002802 <LoopForever>
  ldr   r0, =_estack
 8002804:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002808:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800280c:	20000278 	.word	0x20000278
  ldr r2, =_sidata
 8002810:	0800cde8 	.word	0x0800cde8
  ldr r2, =_sbss
 8002814:	20000278 	.word	0x20000278
  ldr r4, =_ebss
 8002818:	20000a54 	.word	0x20000a54

0800281c <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800281c:	e7fe      	b.n	800281c <ADC3_IRQHandler>

0800281e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800281e:	b580      	push	{r7, lr}
 8002820:	b082      	sub	sp, #8
 8002822:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002824:	2300      	movs	r3, #0
 8002826:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002828:	2003      	movs	r0, #3
 800282a:	f001 ffac 	bl	8004786 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800282e:	200f      	movs	r0, #15
 8002830:	f7fe ff7a 	bl	8001728 <HAL_InitTick>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d002      	beq.n	8002840 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	71fb      	strb	r3, [r7, #7]
 800283e:	e001      	b.n	8002844 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002840:	f7fe ff4e 	bl	80016e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002844:	79fb      	ldrb	r3, [r7, #7]

}
 8002846:	4618      	mov	r0, r3
 8002848:	3708      	adds	r7, #8
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
	...

08002850 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002854:	4b05      	ldr	r3, [pc, #20]	; (800286c <HAL_IncTick+0x1c>)
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	4b05      	ldr	r3, [pc, #20]	; (8002870 <HAL_IncTick+0x20>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4413      	add	r3, r2
 800285e:	4a03      	ldr	r2, [pc, #12]	; (800286c <HAL_IncTick+0x1c>)
 8002860:	6013      	str	r3, [r2, #0]
}
 8002862:	bf00      	nop
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr
 800286c:	20000904 	.word	0x20000904
 8002870:	200000ac 	.word	0x200000ac

08002874 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002874:	b480      	push	{r7}
 8002876:	af00      	add	r7, sp, #0
  return uwTick;
 8002878:	4b03      	ldr	r3, [pc, #12]	; (8002888 <HAL_GetTick+0x14>)
 800287a:	681b      	ldr	r3, [r3, #0]
}
 800287c:	4618      	mov	r0, r3
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop
 8002888:	20000904 	.word	0x20000904

0800288c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	431a      	orrs	r2, r3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	609a      	str	r2, [r3, #8]
}
 80028a6:	bf00      	nop
 80028a8:	370c      	adds	r7, #12
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr

080028b2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80028b2:	b480      	push	{r7}
 80028b4:	b083      	sub	sp, #12
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	6078      	str	r0, [r7, #4]
 80028ba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	431a      	orrs	r2, r3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	609a      	str	r2, [r3, #8]
}
 80028cc:	bf00      	nop
 80028ce:	370c      	adds	r7, #12
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr

080028d8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	370c      	adds	r7, #12
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr

080028f4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b087      	sub	sp, #28
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	60f8      	str	r0, [r7, #12]
 80028fc:	60b9      	str	r1, [r7, #8]
 80028fe:	607a      	str	r2, [r7, #4]
 8002900:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	3360      	adds	r3, #96	; 0x60
 8002906:	461a      	mov	r2, r3
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	4413      	add	r3, r2
 800290e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	4b08      	ldr	r3, [pc, #32]	; (8002938 <LL_ADC_SetOffset+0x44>)
 8002916:	4013      	ands	r3, r2
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800291e:	683a      	ldr	r2, [r7, #0]
 8002920:	430a      	orrs	r2, r1
 8002922:	4313      	orrs	r3, r2
 8002924:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800292c:	bf00      	nop
 800292e:	371c      	adds	r7, #28
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr
 8002938:	03fff000 	.word	0x03fff000

0800293c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800293c:	b480      	push	{r7}
 800293e:	b085      	sub	sp, #20
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	3360      	adds	r3, #96	; 0x60
 800294a:	461a      	mov	r2, r3
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	4413      	add	r3, r2
 8002952:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800295c:	4618      	mov	r0, r3
 800295e:	3714      	adds	r7, #20
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr

08002968 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002968:	b480      	push	{r7}
 800296a:	b087      	sub	sp, #28
 800296c:	af00      	add	r7, sp, #0
 800296e:	60f8      	str	r0, [r7, #12]
 8002970:	60b9      	str	r1, [r7, #8]
 8002972:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	3360      	adds	r3, #96	; 0x60
 8002978:	461a      	mov	r2, r3
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	4413      	add	r3, r2
 8002980:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	431a      	orrs	r2, r3
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002992:	bf00      	nop
 8002994:	371c      	adds	r7, #28
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr

0800299e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800299e:	b480      	push	{r7}
 80029a0:	b087      	sub	sp, #28
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	60f8      	str	r0, [r7, #12]
 80029a6:	60b9      	str	r1, [r7, #8]
 80029a8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	3360      	adds	r3, #96	; 0x60
 80029ae:	461a      	mov	r2, r3
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	4413      	add	r3, r2
 80029b6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	431a      	orrs	r2, r3
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80029c8:	bf00      	nop
 80029ca:	371c      	adds	r7, #28
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr

080029d4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b087      	sub	sp, #28
 80029d8:	af00      	add	r7, sp, #0
 80029da:	60f8      	str	r0, [r7, #12]
 80029dc:	60b9      	str	r1, [r7, #8]
 80029de:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	3360      	adds	r3, #96	; 0x60
 80029e4:	461a      	mov	r2, r3
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	4413      	add	r3, r2
 80029ec:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	431a      	orrs	r2, r3
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80029fe:	bf00      	nop
 8002a00:	371c      	adds	r7, #28
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr

08002a0a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002a0a:	b480      	push	{r7}
 8002a0c:	b083      	sub	sp, #12
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	6078      	str	r0, [r7, #4]
 8002a12:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	695b      	ldr	r3, [r3, #20]
 8002a18:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	431a      	orrs	r2, r3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	615a      	str	r2, [r3, #20]
}
 8002a24:	bf00      	nop
 8002a26:	370c      	adds	r7, #12
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr

08002a30 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d101      	bne.n	8002a48 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002a44:	2301      	movs	r3, #1
 8002a46:	e000      	b.n	8002a4a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002a48:	2300      	movs	r3, #0
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	370c      	adds	r7, #12
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr

08002a56 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002a56:	b480      	push	{r7}
 8002a58:	b087      	sub	sp, #28
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	60f8      	str	r0, [r7, #12]
 8002a5e:	60b9      	str	r1, [r7, #8]
 8002a60:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	3330      	adds	r3, #48	; 0x30
 8002a66:	461a      	mov	r2, r3
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	0a1b      	lsrs	r3, r3, #8
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	f003 030c 	and.w	r3, r3, #12
 8002a72:	4413      	add	r3, r2
 8002a74:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	f003 031f 	and.w	r3, r3, #31
 8002a80:	211f      	movs	r1, #31
 8002a82:	fa01 f303 	lsl.w	r3, r1, r3
 8002a86:	43db      	mvns	r3, r3
 8002a88:	401a      	ands	r2, r3
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	0e9b      	lsrs	r3, r3, #26
 8002a8e:	f003 011f 	and.w	r1, r3, #31
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	f003 031f 	and.w	r3, r3, #31
 8002a98:	fa01 f303 	lsl.w	r3, r1, r3
 8002a9c:	431a      	orrs	r2, r3
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002aa2:	bf00      	nop
 8002aa4:	371c      	adds	r7, #28
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr

08002aae <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002aae:	b480      	push	{r7}
 8002ab0:	b083      	sub	sp, #12
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aba:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d101      	bne.n	8002ac6 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e000      	b.n	8002ac8 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002ac6:	2300      	movs	r3, #0
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	370c      	adds	r7, #12
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr

08002ad4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b087      	sub	sp, #28
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	60f8      	str	r0, [r7, #12]
 8002adc:	60b9      	str	r1, [r7, #8]
 8002ade:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	3314      	adds	r3, #20
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	0e5b      	lsrs	r3, r3, #25
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	f003 0304 	and.w	r3, r3, #4
 8002af0:	4413      	add	r3, r2
 8002af2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	0d1b      	lsrs	r3, r3, #20
 8002afc:	f003 031f 	and.w	r3, r3, #31
 8002b00:	2107      	movs	r1, #7
 8002b02:	fa01 f303 	lsl.w	r3, r1, r3
 8002b06:	43db      	mvns	r3, r3
 8002b08:	401a      	ands	r2, r3
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	0d1b      	lsrs	r3, r3, #20
 8002b0e:	f003 031f 	and.w	r3, r3, #31
 8002b12:	6879      	ldr	r1, [r7, #4]
 8002b14:	fa01 f303 	lsl.w	r3, r1, r3
 8002b18:	431a      	orrs	r2, r3
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002b1e:	bf00      	nop
 8002b20:	371c      	adds	r7, #28
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr
	...

08002b2c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b085      	sub	sp, #20
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	60f8      	str	r0, [r7, #12]
 8002b34:	60b9      	str	r1, [r7, #8]
 8002b36:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	4a0f      	ldr	r2, [pc, #60]	; (8002b78 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d10a      	bne.n	8002b56 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b4c:	431a      	orrs	r2, r3
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8002b54:	e00a      	b.n	8002b6c <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b62:	43db      	mvns	r3, r3
 8002b64:	401a      	ands	r2, r3
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8002b6c:	bf00      	nop
 8002b6e:	3714      	adds	r7, #20
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr
 8002b78:	407f0000 	.word	0x407f0000

08002b7c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	f003 031f 	and.w	r3, r3, #31
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	370c      	adds	r7, #12
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr

08002b98 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	370c      	adds	r7, #12
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr

08002bb4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b083      	sub	sp, #12
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002bc4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	6093      	str	r3, [r2, #8]
}
 8002bcc:	bf00      	nop
 8002bce:	370c      	adds	r7, #12
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr

08002bd8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002be8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002bec:	d101      	bne.n	8002bf2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e000      	b.n	8002bf4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002bf2:	2300      	movs	r3, #0
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	370c      	adds	r7, #12
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr

08002c00 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002c10:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002c14:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002c1c:	bf00      	nop
 8002c1e:	370c      	adds	r7, #12
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr

08002c28 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c38:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c3c:	d101      	bne.n	8002c42 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e000      	b.n	8002c44 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002c42:	2300      	movs	r3, #0
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	370c      	adds	r7, #12
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr

08002c50 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002c60:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002c64:	f043 0201 	orr.w	r2, r3, #1
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002c6c:	bf00      	nop
 8002c6e:	370c      	adds	r7, #12
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr

08002c78 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	f003 0301 	and.w	r3, r3, #1
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d101      	bne.n	8002c90 <LL_ADC_IsEnabled+0x18>
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e000      	b.n	8002c92 <LL_ADC_IsEnabled+0x1a>
 8002c90:	2300      	movs	r3, #0
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	370c      	adds	r7, #12
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr

08002c9e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002c9e:	b480      	push	{r7}
 8002ca0:	b083      	sub	sp, #12
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002cae:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002cb2:	f043 0204 	orr.w	r2, r3, #4
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002cba:	bf00      	nop
 8002cbc:	370c      	adds	r7, #12
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr

08002cc6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002cc6:	b480      	push	{r7}
 8002cc8:	b083      	sub	sp, #12
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	f003 0304 	and.w	r3, r3, #4
 8002cd6:	2b04      	cmp	r3, #4
 8002cd8:	d101      	bne.n	8002cde <LL_ADC_REG_IsConversionOngoing+0x18>
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e000      	b.n	8002ce0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002cde:	2300      	movs	r3, #0
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	370c      	adds	r7, #12
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr

08002cec <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	f003 0308 	and.w	r3, r3, #8
 8002cfc:	2b08      	cmp	r3, #8
 8002cfe:	d101      	bne.n	8002d04 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002d00:	2301      	movs	r3, #1
 8002d02:	e000      	b.n	8002d06 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002d04:	2300      	movs	r3, #0
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	370c      	adds	r7, #12
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr
	...

08002d14 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002d14:	b590      	push	{r4, r7, lr}
 8002d16:	b089      	sub	sp, #36	; 0x24
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002d20:	2300      	movs	r3, #0
 8002d22:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d101      	bne.n	8002d2e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e1af      	b.n	800308e <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	695b      	ldr	r3, [r3, #20]
 8002d32:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d109      	bne.n	8002d50 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	f7fe fa17 	bl	8001170 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4618      	mov	r0, r3
 8002d56:	f7ff ff3f 	bl	8002bd8 <LL_ADC_IsDeepPowerDownEnabled>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d004      	beq.n	8002d6a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4618      	mov	r0, r3
 8002d66:	f7ff ff25 	bl	8002bb4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f7ff ff5a 	bl	8002c28 <LL_ADC_IsInternalRegulatorEnabled>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d115      	bne.n	8002da6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f7ff ff3e 	bl	8002c00 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d84:	4b9f      	ldr	r3, [pc, #636]	; (8003004 <HAL_ADC_Init+0x2f0>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	099b      	lsrs	r3, r3, #6
 8002d8a:	4a9f      	ldr	r2, [pc, #636]	; (8003008 <HAL_ADC_Init+0x2f4>)
 8002d8c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d90:	099b      	lsrs	r3, r3, #6
 8002d92:	3301      	adds	r3, #1
 8002d94:	005b      	lsls	r3, r3, #1
 8002d96:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002d98:	e002      	b.n	8002da0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	3b01      	subs	r3, #1
 8002d9e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d1f9      	bne.n	8002d9a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4618      	mov	r0, r3
 8002dac:	f7ff ff3c 	bl	8002c28 <LL_ADC_IsInternalRegulatorEnabled>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d10d      	bne.n	8002dd2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dba:	f043 0210 	orr.w	r2, r3, #16
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dc6:	f043 0201 	orr.w	r2, r3, #1
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f7ff ff75 	bl	8002cc6 <LL_ADC_REG_IsConversionOngoing>
 8002ddc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002de2:	f003 0310 	and.w	r3, r3, #16
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	f040 8148 	bne.w	800307c <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	f040 8144 	bne.w	800307c <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002df8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002dfc:	f043 0202 	orr.w	r2, r3, #2
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f7ff ff35 	bl	8002c78 <LL_ADC_IsEnabled>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d141      	bne.n	8002e98 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e1c:	d004      	beq.n	8002e28 <HAL_ADC_Init+0x114>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a7a      	ldr	r2, [pc, #488]	; (800300c <HAL_ADC_Init+0x2f8>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d10f      	bne.n	8002e48 <HAL_ADC_Init+0x134>
 8002e28:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002e2c:	f7ff ff24 	bl	8002c78 <LL_ADC_IsEnabled>
 8002e30:	4604      	mov	r4, r0
 8002e32:	4876      	ldr	r0, [pc, #472]	; (800300c <HAL_ADC_Init+0x2f8>)
 8002e34:	f7ff ff20 	bl	8002c78 <LL_ADC_IsEnabled>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	4323      	orrs	r3, r4
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	bf0c      	ite	eq
 8002e40:	2301      	moveq	r3, #1
 8002e42:	2300      	movne	r3, #0
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	e012      	b.n	8002e6e <HAL_ADC_Init+0x15a>
 8002e48:	4871      	ldr	r0, [pc, #452]	; (8003010 <HAL_ADC_Init+0x2fc>)
 8002e4a:	f7ff ff15 	bl	8002c78 <LL_ADC_IsEnabled>
 8002e4e:	4604      	mov	r4, r0
 8002e50:	4870      	ldr	r0, [pc, #448]	; (8003014 <HAL_ADC_Init+0x300>)
 8002e52:	f7ff ff11 	bl	8002c78 <LL_ADC_IsEnabled>
 8002e56:	4603      	mov	r3, r0
 8002e58:	431c      	orrs	r4, r3
 8002e5a:	486f      	ldr	r0, [pc, #444]	; (8003018 <HAL_ADC_Init+0x304>)
 8002e5c:	f7ff ff0c 	bl	8002c78 <LL_ADC_IsEnabled>
 8002e60:	4603      	mov	r3, r0
 8002e62:	4323      	orrs	r3, r4
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	bf0c      	ite	eq
 8002e68:	2301      	moveq	r3, #1
 8002e6a:	2300      	movne	r3, #0
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d012      	beq.n	8002e98 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e7a:	d004      	beq.n	8002e86 <HAL_ADC_Init+0x172>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a62      	ldr	r2, [pc, #392]	; (800300c <HAL_ADC_Init+0x2f8>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d101      	bne.n	8002e8a <HAL_ADC_Init+0x176>
 8002e86:	4a65      	ldr	r2, [pc, #404]	; (800301c <HAL_ADC_Init+0x308>)
 8002e88:	e000      	b.n	8002e8c <HAL_ADC_Init+0x178>
 8002e8a:	4a65      	ldr	r2, [pc, #404]	; (8003020 <HAL_ADC_Init+0x30c>)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	4619      	mov	r1, r3
 8002e92:	4610      	mov	r0, r2
 8002e94:	f7ff fcfa 	bl	800288c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	7f5b      	ldrb	r3, [r3, #29]
 8002e9c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002ea2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002ea8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002eae:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002eb6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d106      	bne.n	8002ed4 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eca:	3b01      	subs	r3, #1
 8002ecc:	045b      	lsls	r3, r3, #17
 8002ece:	69ba      	ldr	r2, [r7, #24]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d009      	beq.n	8002ef0 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee0:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002eea:	69ba      	ldr	r2, [r7, #24]
 8002eec:	4313      	orrs	r3, r2
 8002eee:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	68da      	ldr	r2, [r3, #12]
 8002ef6:	4b4b      	ldr	r3, [pc, #300]	; (8003024 <HAL_ADC_Init+0x310>)
 8002ef8:	4013      	ands	r3, r2
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	6812      	ldr	r2, [r2, #0]
 8002efe:	69b9      	ldr	r1, [r7, #24]
 8002f00:	430b      	orrs	r3, r1
 8002f02:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	691b      	ldr	r3, [r3, #16]
 8002f0a:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	430a      	orrs	r2, r1
 8002f18:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7ff fed1 	bl	8002cc6 <LL_ADC_REG_IsConversionOngoing>
 8002f24:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f7ff fede 	bl	8002cec <LL_ADC_INJ_IsConversionOngoing>
 8002f30:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d17f      	bne.n	8003038 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d17c      	bne.n	8003038 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002f42:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002f4a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	68db      	ldr	r3, [r3, #12]
 8002f56:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f5a:	f023 0302 	bic.w	r3, r3, #2
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	6812      	ldr	r2, [r2, #0]
 8002f62:	69b9      	ldr	r1, [r7, #24]
 8002f64:	430b      	orrs	r3, r1
 8002f66:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	691b      	ldr	r3, [r3, #16]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d017      	beq.n	8002fa0 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	691a      	ldr	r2, [r3, #16]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002f7e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002f88:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002f8c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	6911      	ldr	r1, [r2, #16]
 8002f94:	687a      	ldr	r2, [r7, #4]
 8002f96:	6812      	ldr	r2, [r2, #0]
 8002f98:	430b      	orrs	r3, r1
 8002f9a:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002f9e:	e013      	b.n	8002fc8 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	691a      	ldr	r2, [r3, #16]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002fae:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002fb8:	687a      	ldr	r2, [r7, #4]
 8002fba:	6812      	ldr	r2, [r2, #0]
 8002fbc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002fc0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002fc4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d12a      	bne.n	8003028 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	691b      	ldr	r3, [r3, #16]
 8002fd8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002fdc:	f023 0304 	bic.w	r3, r3, #4
 8002fe0:	687a      	ldr	r2, [r7, #4]
 8002fe2:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002fe8:	4311      	orrs	r1, r2
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002fee:	4311      	orrs	r1, r2
 8002ff0:	687a      	ldr	r2, [r7, #4]
 8002ff2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002ff4:	430a      	orrs	r2, r1
 8002ff6:	431a      	orrs	r2, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f042 0201 	orr.w	r2, r2, #1
 8003000:	611a      	str	r2, [r3, #16]
 8003002:	e019      	b.n	8003038 <HAL_ADC_Init+0x324>
 8003004:	20000000 	.word	0x20000000
 8003008:	053e2d63 	.word	0x053e2d63
 800300c:	50000100 	.word	0x50000100
 8003010:	50000400 	.word	0x50000400
 8003014:	50000500 	.word	0x50000500
 8003018:	50000600 	.word	0x50000600
 800301c:	50000300 	.word	0x50000300
 8003020:	50000700 	.word	0x50000700
 8003024:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	691a      	ldr	r2, [r3, #16]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f022 0201 	bic.w	r2, r2, #1
 8003036:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	695b      	ldr	r3, [r3, #20]
 800303c:	2b01      	cmp	r3, #1
 800303e:	d10c      	bne.n	800305a <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003046:	f023 010f 	bic.w	r1, r3, #15
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6a1b      	ldr	r3, [r3, #32]
 800304e:	1e5a      	subs	r2, r3, #1
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	430a      	orrs	r2, r1
 8003056:	631a      	str	r2, [r3, #48]	; 0x30
 8003058:	e007      	b.n	800306a <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f022 020f 	bic.w	r2, r2, #15
 8003068:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800306e:	f023 0303 	bic.w	r3, r3, #3
 8003072:	f043 0201 	orr.w	r2, r3, #1
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	65da      	str	r2, [r3, #92]	; 0x5c
 800307a:	e007      	b.n	800308c <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003080:	f043 0210 	orr.w	r2, r3, #16
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800308c:	7ffb      	ldrb	r3, [r7, #31]
}
 800308e:	4618      	mov	r0, r3
 8003090:	3724      	adds	r7, #36	; 0x24
 8003092:	46bd      	mov	sp, r7
 8003094:	bd90      	pop	{r4, r7, pc}
 8003096:	bf00      	nop

08003098 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b086      	sub	sp, #24
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030a8:	d004      	beq.n	80030b4 <HAL_ADC_Start+0x1c>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a67      	ldr	r2, [pc, #412]	; (800324c <HAL_ADC_Start+0x1b4>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d101      	bne.n	80030b8 <HAL_ADC_Start+0x20>
 80030b4:	4b66      	ldr	r3, [pc, #408]	; (8003250 <HAL_ADC_Start+0x1b8>)
 80030b6:	e000      	b.n	80030ba <HAL_ADC_Start+0x22>
 80030b8:	4b66      	ldr	r3, [pc, #408]	; (8003254 <HAL_ADC_Start+0x1bc>)
 80030ba:	4618      	mov	r0, r3
 80030bc:	f7ff fd5e 	bl	8002b7c <LL_ADC_GetMultimode>
 80030c0:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4618      	mov	r0, r3
 80030c8:	f7ff fdfd 	bl	8002cc6 <LL_ADC_REG_IsConversionOngoing>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	f040 80b4 	bne.w	800323c <HAL_ADC_Start+0x1a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d101      	bne.n	80030e2 <HAL_ADC_Start+0x4a>
 80030de:	2302      	movs	r3, #2
 80030e0:	e0af      	b.n	8003242 <HAL_ADC_Start+0x1aa>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2201      	movs	r2, #1
 80030e6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f001 f8dc 	bl	80042a8 <ADC_Enable>
 80030f0:	4603      	mov	r3, r0
 80030f2:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80030f4:	7dfb      	ldrb	r3, [r7, #23]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	f040 809b 	bne.w	8003232 <HAL_ADC_Start+0x19a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003100:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003104:	f023 0301 	bic.w	r3, r3, #1
 8003108:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a4d      	ldr	r2, [pc, #308]	; (800324c <HAL_ADC_Start+0x1b4>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d009      	beq.n	800312e <HAL_ADC_Start+0x96>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a4e      	ldr	r2, [pc, #312]	; (8003258 <HAL_ADC_Start+0x1c0>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d002      	beq.n	800312a <HAL_ADC_Start+0x92>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	e003      	b.n	8003132 <HAL_ADC_Start+0x9a>
 800312a:	4b4c      	ldr	r3, [pc, #304]	; (800325c <HAL_ADC_Start+0x1c4>)
 800312c:	e001      	b.n	8003132 <HAL_ADC_Start+0x9a>
 800312e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	6812      	ldr	r2, [r2, #0]
 8003136:	4293      	cmp	r3, r2
 8003138:	d002      	beq.n	8003140 <HAL_ADC_Start+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d105      	bne.n	800314c <HAL_ADC_Start+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003144:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003150:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003154:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003158:	d106      	bne.n	8003168 <HAL_ADC_Start+0xd0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800315e:	f023 0206 	bic.w	r2, r3, #6
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	661a      	str	r2, [r3, #96]	; 0x60
 8003166:	e002      	b.n	800316e <HAL_ADC_Start+0xd6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2200      	movs	r2, #0
 800316c:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	221c      	movs	r2, #28
 8003174:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2200      	movs	r2, #0
 800317a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a32      	ldr	r2, [pc, #200]	; (800324c <HAL_ADC_Start+0x1b4>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d009      	beq.n	800319c <HAL_ADC_Start+0x104>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a32      	ldr	r2, [pc, #200]	; (8003258 <HAL_ADC_Start+0x1c0>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d002      	beq.n	8003198 <HAL_ADC_Start+0x100>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	e003      	b.n	80031a0 <HAL_ADC_Start+0x108>
 8003198:	4b30      	ldr	r3, [pc, #192]	; (800325c <HAL_ADC_Start+0x1c4>)
 800319a:	e001      	b.n	80031a0 <HAL_ADC_Start+0x108>
 800319c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80031a0:	687a      	ldr	r2, [r7, #4]
 80031a2:	6812      	ldr	r2, [r2, #0]
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d008      	beq.n	80031ba <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d005      	beq.n	80031ba <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	2b05      	cmp	r3, #5
 80031b2:	d002      	beq.n	80031ba <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	2b09      	cmp	r3, #9
 80031b8:	d114      	bne.n	80031e4 <HAL_ADC_Start+0x14c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d007      	beq.n	80031d8 <HAL_ADC_Start+0x140>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031cc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80031d0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4618      	mov	r0, r3
 80031de:	f7ff fd5e 	bl	8002c9e <LL_ADC_REG_StartConversion>
 80031e2:	e02d      	b.n	8003240 <HAL_ADC_Start+0x1a8>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031e8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a15      	ldr	r2, [pc, #84]	; (800324c <HAL_ADC_Start+0x1b4>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d009      	beq.n	800320e <HAL_ADC_Start+0x176>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a16      	ldr	r2, [pc, #88]	; (8003258 <HAL_ADC_Start+0x1c0>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d002      	beq.n	800320a <HAL_ADC_Start+0x172>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	e003      	b.n	8003212 <HAL_ADC_Start+0x17a>
 800320a:	4b14      	ldr	r3, [pc, #80]	; (800325c <HAL_ADC_Start+0x1c4>)
 800320c:	e001      	b.n	8003212 <HAL_ADC_Start+0x17a>
 800320e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003212:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800321c:	2b00      	cmp	r3, #0
 800321e:	d00f      	beq.n	8003240 <HAL_ADC_Start+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003224:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003228:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	65da      	str	r2, [r3, #92]	; 0x5c
 8003230:	e006      	b.n	8003240 <HAL_ADC_Start+0x1a8>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2200      	movs	r2, #0
 8003236:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800323a:	e001      	b.n	8003240 <HAL_ADC_Start+0x1a8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800323c:	2302      	movs	r3, #2
 800323e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003240:	7dfb      	ldrb	r3, [r7, #23]
}
 8003242:	4618      	mov	r0, r3
 8003244:	3718      	adds	r7, #24
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	50000100 	.word	0x50000100
 8003250:	50000300 	.word	0x50000300
 8003254:	50000700 	.word	0x50000700
 8003258:	50000500 	.word	0x50000500
 800325c:	50000400 	.word	0x50000400

08003260 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b086      	sub	sp, #24
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003270:	d004      	beq.n	800327c <HAL_ADC_Start_IT+0x1c>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a92      	ldr	r2, [pc, #584]	; (80034c0 <HAL_ADC_Start_IT+0x260>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d101      	bne.n	8003280 <HAL_ADC_Start_IT+0x20>
 800327c:	4b91      	ldr	r3, [pc, #580]	; (80034c4 <HAL_ADC_Start_IT+0x264>)
 800327e:	e000      	b.n	8003282 <HAL_ADC_Start_IT+0x22>
 8003280:	4b91      	ldr	r3, [pc, #580]	; (80034c8 <HAL_ADC_Start_IT+0x268>)
 8003282:	4618      	mov	r0, r3
 8003284:	f7ff fc7a 	bl	8002b7c <LL_ADC_GetMultimode>
 8003288:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4618      	mov	r0, r3
 8003290:	f7ff fd19 	bl	8002cc6 <LL_ADC_REG_IsConversionOngoing>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	f040 8132 	bne.w	8003500 <HAL_ADC_Start_IT+0x2a0>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d101      	bne.n	80032aa <HAL_ADC_Start_IT+0x4a>
 80032a6:	2302      	movs	r3, #2
 80032a8:	e12d      	b.n	8003506 <HAL_ADC_Start_IT+0x2a6>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2201      	movs	r2, #1
 80032ae:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f000 fff8 	bl	80042a8 <ADC_Enable>
 80032b8:	4603      	mov	r3, r0
 80032ba:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80032bc:	7dfb      	ldrb	r3, [r7, #23]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	f040 8119 	bne.w	80034f6 <HAL_ADC_Start_IT+0x296>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032c8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80032cc:	f023 0301 	bic.w	r3, r3, #1
 80032d0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a78      	ldr	r2, [pc, #480]	; (80034c0 <HAL_ADC_Start_IT+0x260>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d009      	beq.n	80032f6 <HAL_ADC_Start_IT+0x96>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a79      	ldr	r2, [pc, #484]	; (80034cc <HAL_ADC_Start_IT+0x26c>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d002      	beq.n	80032f2 <HAL_ADC_Start_IT+0x92>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	e003      	b.n	80032fa <HAL_ADC_Start_IT+0x9a>
 80032f2:	4b77      	ldr	r3, [pc, #476]	; (80034d0 <HAL_ADC_Start_IT+0x270>)
 80032f4:	e001      	b.n	80032fa <HAL_ADC_Start_IT+0x9a>
 80032f6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	6812      	ldr	r2, [r2, #0]
 80032fe:	4293      	cmp	r3, r2
 8003300:	d002      	beq.n	8003308 <HAL_ADC_Start_IT+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d105      	bne.n	8003314 <HAL_ADC_Start_IT+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800330c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003318:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800331c:	2b00      	cmp	r3, #0
 800331e:	d006      	beq.n	800332e <HAL_ADC_Start_IT+0xce>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003324:	f023 0206 	bic.w	r2, r3, #6
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	661a      	str	r2, [r3, #96]	; 0x60
 800332c:	e002      	b.n	8003334 <HAL_ADC_Start_IT+0xd4>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	221c      	movs	r2, #28
 800333a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2200      	movs	r2, #0
 8003340:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	685a      	ldr	r2, [r3, #4]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f022 021c 	bic.w	r2, r2, #28
 8003352:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	699b      	ldr	r3, [r3, #24]
 8003358:	2b08      	cmp	r3, #8
 800335a:	d108      	bne.n	800336e <HAL_ADC_Start_IT+0x10e>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	685a      	ldr	r2, [r3, #4]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f042 0208 	orr.w	r2, r2, #8
 800336a:	605a      	str	r2, [r3, #4]
          break;
 800336c:	e008      	b.n	8003380 <HAL_ADC_Start_IT+0x120>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	685a      	ldr	r2, [r3, #4]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f042 0204 	orr.w	r2, r2, #4
 800337c:	605a      	str	r2, [r3, #4]
          break;
 800337e:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003384:	2b00      	cmp	r3, #0
 8003386:	d107      	bne.n	8003398 <HAL_ADC_Start_IT+0x138>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	685a      	ldr	r2, [r3, #4]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f042 0210 	orr.w	r2, r2, #16
 8003396:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a48      	ldr	r2, [pc, #288]	; (80034c0 <HAL_ADC_Start_IT+0x260>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d009      	beq.n	80033b6 <HAL_ADC_Start_IT+0x156>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a49      	ldr	r2, [pc, #292]	; (80034cc <HAL_ADC_Start_IT+0x26c>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d002      	beq.n	80033b2 <HAL_ADC_Start_IT+0x152>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	e003      	b.n	80033ba <HAL_ADC_Start_IT+0x15a>
 80033b2:	4b47      	ldr	r3, [pc, #284]	; (80034d0 <HAL_ADC_Start_IT+0x270>)
 80033b4:	e001      	b.n	80033ba <HAL_ADC_Start_IT+0x15a>
 80033b6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80033ba:	687a      	ldr	r2, [r7, #4]
 80033bc:	6812      	ldr	r2, [r2, #0]
 80033be:	4293      	cmp	r3, r2
 80033c0:	d008      	beq.n	80033d4 <HAL_ADC_Start_IT+0x174>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d005      	beq.n	80033d4 <HAL_ADC_Start_IT+0x174>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	2b05      	cmp	r3, #5
 80033cc:	d002      	beq.n	80033d4 <HAL_ADC_Start_IT+0x174>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	2b09      	cmp	r3, #9
 80033d2:	d13a      	bne.n	800344a <HAL_ADC_Start_IT+0x1ea>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	68db      	ldr	r3, [r3, #12]
 80033da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d02d      	beq.n	800343e <HAL_ADC_Start_IT+0x1de>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033e6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80033ea:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	699b      	ldr	r3, [r3, #24]
 80033f6:	2b08      	cmp	r3, #8
 80033f8:	d110      	bne.n	800341c <HAL_ADC_Start_IT+0x1bc>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	685a      	ldr	r2, [r3, #4]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f022 0220 	bic.w	r2, r2, #32
 8003408:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	685a      	ldr	r2, [r3, #4]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003418:	605a      	str	r2, [r3, #4]
              break;
 800341a:	e010      	b.n	800343e <HAL_ADC_Start_IT+0x1de>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	685a      	ldr	r2, [r3, #4]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800342a:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	685a      	ldr	r2, [r3, #4]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f042 0220 	orr.w	r2, r2, #32
 800343a:	605a      	str	r2, [r3, #4]
              break;
 800343c:	bf00      	nop
          }
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4618      	mov	r0, r3
 8003444:	f7ff fc2b 	bl	8002c9e <LL_ADC_REG_StartConversion>
 8003448:	e05c      	b.n	8003504 <HAL_ADC_Start_IT+0x2a4>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800344e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a19      	ldr	r2, [pc, #100]	; (80034c0 <HAL_ADC_Start_IT+0x260>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d009      	beq.n	8003474 <HAL_ADC_Start_IT+0x214>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a19      	ldr	r2, [pc, #100]	; (80034cc <HAL_ADC_Start_IT+0x26c>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d002      	beq.n	8003470 <HAL_ADC_Start_IT+0x210>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	e003      	b.n	8003478 <HAL_ADC_Start_IT+0x218>
 8003470:	4b17      	ldr	r3, [pc, #92]	; (80034d0 <HAL_ADC_Start_IT+0x270>)
 8003472:	e001      	b.n	8003478 <HAL_ADC_Start_IT+0x218>
 8003474:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003478:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	68db      	ldr	r3, [r3, #12]
 800347e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d03e      	beq.n	8003504 <HAL_ADC_Start_IT+0x2a4>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800348a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800348e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	65da      	str	r2, [r3, #92]	; 0x5c
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	699b      	ldr	r3, [r3, #24]
 800349a:	2b08      	cmp	r3, #8
 800349c:	d11a      	bne.n	80034d4 <HAL_ADC_Start_IT+0x274>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	685a      	ldr	r2, [r3, #4]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f022 0220 	bic.w	r2, r2, #32
 80034ac:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	685a      	ldr	r2, [r3, #4]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034bc:	605a      	str	r2, [r3, #4]
              break;
 80034be:	e021      	b.n	8003504 <HAL_ADC_Start_IT+0x2a4>
 80034c0:	50000100 	.word	0x50000100
 80034c4:	50000300 	.word	0x50000300
 80034c8:	50000700 	.word	0x50000700
 80034cc:	50000500 	.word	0x50000500
 80034d0:	50000400 	.word	0x50000400
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	685a      	ldr	r2, [r3, #4]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034e2:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	685a      	ldr	r2, [r3, #4]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f042 0220 	orr.w	r2, r2, #32
 80034f2:	605a      	str	r2, [r3, #4]
              break;
 80034f4:	e006      	b.n	8003504 <HAL_ADC_Start_IT+0x2a4>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2200      	movs	r2, #0
 80034fa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80034fe:	e001      	b.n	8003504 <HAL_ADC_Start_IT+0x2a4>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003500:	2302      	movs	r3, #2
 8003502:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003504:	7dfb      	ldrb	r3, [r7, #23]
}
 8003506:	4618      	mov	r0, r3
 8003508:	3718      	adds	r7, #24
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
 800350e:	bf00      	nop

08003510 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003510:	b480      	push	{r7}
 8003512:	b083      	sub	sp, #12
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800351e:	4618      	mov	r0, r3
 8003520:	370c      	adds	r7, #12
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr
	...

0800352c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b08a      	sub	sp, #40	; 0x28
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003534:	2300      	movs	r3, #0
 8003536:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003550:	d004      	beq.n	800355c <HAL_ADC_IRQHandler+0x30>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a8e      	ldr	r2, [pc, #568]	; (8003790 <HAL_ADC_IRQHandler+0x264>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d101      	bne.n	8003560 <HAL_ADC_IRQHandler+0x34>
 800355c:	4b8d      	ldr	r3, [pc, #564]	; (8003794 <HAL_ADC_IRQHandler+0x268>)
 800355e:	e000      	b.n	8003562 <HAL_ADC_IRQHandler+0x36>
 8003560:	4b8d      	ldr	r3, [pc, #564]	; (8003798 <HAL_ADC_IRQHandler+0x26c>)
 8003562:	4618      	mov	r0, r3
 8003564:	f7ff fb0a 	bl	8002b7c <LL_ADC_GetMultimode>
 8003568:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800356a:	69fb      	ldr	r3, [r7, #28]
 800356c:	f003 0302 	and.w	r3, r3, #2
 8003570:	2b00      	cmp	r3, #0
 8003572:	d017      	beq.n	80035a4 <HAL_ADC_IRQHandler+0x78>
 8003574:	69bb      	ldr	r3, [r7, #24]
 8003576:	f003 0302 	and.w	r3, r3, #2
 800357a:	2b00      	cmp	r3, #0
 800357c:	d012      	beq.n	80035a4 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003582:	f003 0310 	and.w	r3, r3, #16
 8003586:	2b00      	cmp	r3, #0
 8003588:	d105      	bne.n	8003596 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800358e:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f000 ff36 	bl	8004408 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	2202      	movs	r2, #2
 80035a2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80035a4:	69fb      	ldr	r3, [r7, #28]
 80035a6:	f003 0304 	and.w	r3, r3, #4
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d004      	beq.n	80035b8 <HAL_ADC_IRQHandler+0x8c>
 80035ae:	69bb      	ldr	r3, [r7, #24]
 80035b0:	f003 0304 	and.w	r3, r3, #4
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d10b      	bne.n	80035d0 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80035be:	2b00      	cmp	r3, #0
 80035c0:	f000 8094 	beq.w	80036ec <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80035c4:	69bb      	ldr	r3, [r7, #24]
 80035c6:	f003 0308 	and.w	r3, r3, #8
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	f000 808e 	beq.w	80036ec <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035d4:	f003 0310 	and.w	r3, r3, #16
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d105      	bne.n	80035e8 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035e0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4618      	mov	r0, r3
 80035ee:	f7ff fa1f 	bl	8002a30 <LL_ADC_REG_IsTriggerSourceSWStart>
 80035f2:	4603      	mov	r3, r0
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d072      	beq.n	80036de <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a64      	ldr	r2, [pc, #400]	; (8003790 <HAL_ADC_IRQHandler+0x264>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d009      	beq.n	8003616 <HAL_ADC_IRQHandler+0xea>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a65      	ldr	r2, [pc, #404]	; (800379c <HAL_ADC_IRQHandler+0x270>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d002      	beq.n	8003612 <HAL_ADC_IRQHandler+0xe6>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	e003      	b.n	800361a <HAL_ADC_IRQHandler+0xee>
 8003612:	4b63      	ldr	r3, [pc, #396]	; (80037a0 <HAL_ADC_IRQHandler+0x274>)
 8003614:	e001      	b.n	800361a <HAL_ADC_IRQHandler+0xee>
 8003616:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	6812      	ldr	r2, [r2, #0]
 800361e:	4293      	cmp	r3, r2
 8003620:	d008      	beq.n	8003634 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d005      	beq.n	8003634 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	2b05      	cmp	r3, #5
 800362c:	d002      	beq.n	8003634 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	2b09      	cmp	r3, #9
 8003632:	d104      	bne.n	800363e <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	68db      	ldr	r3, [r3, #12]
 800363a:	623b      	str	r3, [r7, #32]
 800363c:	e014      	b.n	8003668 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a53      	ldr	r2, [pc, #332]	; (8003790 <HAL_ADC_IRQHandler+0x264>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d009      	beq.n	800365c <HAL_ADC_IRQHandler+0x130>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a53      	ldr	r2, [pc, #332]	; (800379c <HAL_ADC_IRQHandler+0x270>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d002      	beq.n	8003658 <HAL_ADC_IRQHandler+0x12c>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	e003      	b.n	8003660 <HAL_ADC_IRQHandler+0x134>
 8003658:	4b51      	ldr	r3, [pc, #324]	; (80037a0 <HAL_ADC_IRQHandler+0x274>)
 800365a:	e001      	b.n	8003660 <HAL_ADC_IRQHandler+0x134>
 800365c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003660:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003668:	6a3b      	ldr	r3, [r7, #32]
 800366a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800366e:	2b00      	cmp	r3, #0
 8003670:	d135      	bne.n	80036de <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 0308 	and.w	r3, r3, #8
 800367c:	2b08      	cmp	r3, #8
 800367e:	d12e      	bne.n	80036de <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4618      	mov	r0, r3
 8003686:	f7ff fb1e 	bl	8002cc6 <LL_ADC_REG_IsConversionOngoing>
 800368a:	4603      	mov	r3, r0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d11a      	bne.n	80036c6 <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	685a      	ldr	r2, [r3, #4]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f022 020c 	bic.w	r2, r2, #12
 800369e:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036a4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d112      	bne.n	80036de <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036bc:	f043 0201 	orr.w	r2, r3, #1
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	65da      	str	r2, [r3, #92]	; 0x5c
 80036c4:	e00b      	b.n	80036de <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ca:	f043 0210 	orr.w	r2, r3, #16
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036d6:	f043 0201 	orr.w	r2, r3, #1
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f000 f984 	bl	80039ec <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	220c      	movs	r2, #12
 80036ea:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80036ec:	69fb      	ldr	r3, [r7, #28]
 80036ee:	f003 0320 	and.w	r3, r3, #32
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d004      	beq.n	8003700 <HAL_ADC_IRQHandler+0x1d4>
 80036f6:	69bb      	ldr	r3, [r7, #24]
 80036f8:	f003 0320 	and.w	r3, r3, #32
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d10b      	bne.n	8003718 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003700:	69fb      	ldr	r3, [r7, #28]
 8003702:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003706:	2b00      	cmp	r3, #0
 8003708:	f000 80b3 	beq.w	8003872 <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800370c:	69bb      	ldr	r3, [r7, #24]
 800370e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003712:	2b00      	cmp	r3, #0
 8003714:	f000 80ad 	beq.w	8003872 <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800371c:	f003 0310 	and.w	r3, r3, #16
 8003720:	2b00      	cmp	r3, #0
 8003722:	d105      	bne.n	8003730 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003728:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4618      	mov	r0, r3
 8003736:	f7ff f9ba 	bl	8002aae <LL_ADC_INJ_IsTriggerSourceSWStart>
 800373a:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4618      	mov	r0, r3
 8003742:	f7ff f975 	bl	8002a30 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003746:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a10      	ldr	r2, [pc, #64]	; (8003790 <HAL_ADC_IRQHandler+0x264>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d009      	beq.n	8003766 <HAL_ADC_IRQHandler+0x23a>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a11      	ldr	r2, [pc, #68]	; (800379c <HAL_ADC_IRQHandler+0x270>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d002      	beq.n	8003762 <HAL_ADC_IRQHandler+0x236>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	e003      	b.n	800376a <HAL_ADC_IRQHandler+0x23e>
 8003762:	4b0f      	ldr	r3, [pc, #60]	; (80037a0 <HAL_ADC_IRQHandler+0x274>)
 8003764:	e001      	b.n	800376a <HAL_ADC_IRQHandler+0x23e>
 8003766:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800376a:	687a      	ldr	r2, [r7, #4]
 800376c:	6812      	ldr	r2, [r2, #0]
 800376e:	4293      	cmp	r3, r2
 8003770:	d008      	beq.n	8003784 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d005      	beq.n	8003784 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	2b06      	cmp	r3, #6
 800377c:	d002      	beq.n	8003784 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	2b07      	cmp	r3, #7
 8003782:	d10f      	bne.n	80037a4 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	68db      	ldr	r3, [r3, #12]
 800378a:	623b      	str	r3, [r7, #32]
 800378c:	e01f      	b.n	80037ce <HAL_ADC_IRQHandler+0x2a2>
 800378e:	bf00      	nop
 8003790:	50000100 	.word	0x50000100
 8003794:	50000300 	.word	0x50000300
 8003798:	50000700 	.word	0x50000700
 800379c:	50000500 	.word	0x50000500
 80037a0:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a8b      	ldr	r2, [pc, #556]	; (80039d8 <HAL_ADC_IRQHandler+0x4ac>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d009      	beq.n	80037c2 <HAL_ADC_IRQHandler+0x296>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a8a      	ldr	r2, [pc, #552]	; (80039dc <HAL_ADC_IRQHandler+0x4b0>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d002      	beq.n	80037be <HAL_ADC_IRQHandler+0x292>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	e003      	b.n	80037c6 <HAL_ADC_IRQHandler+0x29a>
 80037be:	4b88      	ldr	r3, [pc, #544]	; (80039e0 <HAL_ADC_IRQHandler+0x4b4>)
 80037c0:	e001      	b.n	80037c6 <HAL_ADC_IRQHandler+0x29a>
 80037c2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80037c6:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d047      	beq.n	8003864 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80037d4:	6a3b      	ldr	r3, [r7, #32]
 80037d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d007      	beq.n	80037ee <HAL_ADC_IRQHandler+0x2c2>
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d03f      	beq.n	8003864 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80037e4:	6a3b      	ldr	r3, [r7, #32]
 80037e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d13a      	bne.n	8003864 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037f8:	2b40      	cmp	r3, #64	; 0x40
 80037fa:	d133      	bne.n	8003864 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80037fc:	6a3b      	ldr	r3, [r7, #32]
 80037fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003802:	2b00      	cmp	r3, #0
 8003804:	d12e      	bne.n	8003864 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4618      	mov	r0, r3
 800380c:	f7ff fa6e 	bl	8002cec <LL_ADC_INJ_IsConversionOngoing>
 8003810:	4603      	mov	r3, r0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d11a      	bne.n	800384c <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	685a      	ldr	r2, [r3, #4]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003824:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800382a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003836:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800383a:	2b00      	cmp	r3, #0
 800383c:	d112      	bne.n	8003864 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003842:	f043 0201 	orr.w	r2, r3, #1
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	65da      	str	r2, [r3, #92]	; 0x5c
 800384a:	e00b      	b.n	8003864 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003850:	f043 0210 	orr.w	r2, r3, #16
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800385c:	f043 0201 	orr.w	r2, r3, #1
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f000 fda7 	bl	80043b8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	2260      	movs	r2, #96	; 0x60
 8003870:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003872:	69fb      	ldr	r3, [r7, #28]
 8003874:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003878:	2b00      	cmp	r3, #0
 800387a:	d011      	beq.n	80038a0 <HAL_ADC_IRQHandler+0x374>
 800387c:	69bb      	ldr	r3, [r7, #24]
 800387e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003882:	2b00      	cmp	r3, #0
 8003884:	d00c      	beq.n	80038a0 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800388a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f000 f8b4 	bl	8003a00 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2280      	movs	r2, #128	; 0x80
 800389e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80038a0:	69fb      	ldr	r3, [r7, #28]
 80038a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d012      	beq.n	80038d0 <HAL_ADC_IRQHandler+0x3a4>
 80038aa:	69bb      	ldr	r3, [r7, #24]
 80038ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d00d      	beq.n	80038d0 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038b8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f000 fd8d 	bl	80043e0 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80038ce:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80038d0:	69fb      	ldr	r3, [r7, #28]
 80038d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d012      	beq.n	8003900 <HAL_ADC_IRQHandler+0x3d4>
 80038da:	69bb      	ldr	r3, [r7, #24]
 80038dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d00d      	beq.n	8003900 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038e8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f000 fd7f 	bl	80043f4 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038fe:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003900:	69fb      	ldr	r3, [r7, #28]
 8003902:	f003 0310 	and.w	r3, r3, #16
 8003906:	2b00      	cmp	r3, #0
 8003908:	d043      	beq.n	8003992 <HAL_ADC_IRQHandler+0x466>
 800390a:	69bb      	ldr	r3, [r7, #24]
 800390c:	f003 0310 	and.w	r3, r3, #16
 8003910:	2b00      	cmp	r3, #0
 8003912:	d03e      	beq.n	8003992 <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003918:	2b00      	cmp	r3, #0
 800391a:	d102      	bne.n	8003922 <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 800391c:	2301      	movs	r3, #1
 800391e:	627b      	str	r3, [r7, #36]	; 0x24
 8003920:	e021      	b.n	8003966 <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d015      	beq.n	8003954 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003930:	d004      	beq.n	800393c <HAL_ADC_IRQHandler+0x410>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a28      	ldr	r2, [pc, #160]	; (80039d8 <HAL_ADC_IRQHandler+0x4ac>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d101      	bne.n	8003940 <HAL_ADC_IRQHandler+0x414>
 800393c:	4b29      	ldr	r3, [pc, #164]	; (80039e4 <HAL_ADC_IRQHandler+0x4b8>)
 800393e:	e000      	b.n	8003942 <HAL_ADC_IRQHandler+0x416>
 8003940:	4b29      	ldr	r3, [pc, #164]	; (80039e8 <HAL_ADC_IRQHandler+0x4bc>)
 8003942:	4618      	mov	r0, r3
 8003944:	f7ff f928 	bl	8002b98 <LL_ADC_GetMultiDMATransfer>
 8003948:	4603      	mov	r3, r0
 800394a:	2b00      	cmp	r3, #0
 800394c:	d00b      	beq.n	8003966 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 800394e:	2301      	movs	r3, #1
 8003950:	627b      	str	r3, [r7, #36]	; 0x24
 8003952:	e008      	b.n	8003966 <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	f003 0301 	and.w	r3, r3, #1
 800395e:	2b00      	cmp	r3, #0
 8003960:	d001      	beq.n	8003966 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8003962:	2301      	movs	r3, #1
 8003964:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003968:	2b01      	cmp	r3, #1
 800396a:	d10e      	bne.n	800398a <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003970:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800397c:	f043 0202 	orr.w	r2, r3, #2
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	f000 f845 	bl	8003a14 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	2210      	movs	r2, #16
 8003990:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003992:	69fb      	ldr	r3, [r7, #28]
 8003994:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003998:	2b00      	cmp	r3, #0
 800399a:	d018      	beq.n	80039ce <HAL_ADC_IRQHandler+0x4a2>
 800399c:	69bb      	ldr	r3, [r7, #24]
 800399e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d013      	beq.n	80039ce <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039aa:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039b6:	f043 0208 	orr.w	r2, r3, #8
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80039c6:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	f000 fcff 	bl	80043cc <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80039ce:	bf00      	nop
 80039d0:	3728      	adds	r7, #40	; 0x28
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	50000100 	.word	0x50000100
 80039dc:	50000500 	.word	0x50000500
 80039e0:	50000400 	.word	0x50000400
 80039e4:	50000300 	.word	0x50000300
 80039e8:	50000700 	.word	0x50000700

080039ec <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b083      	sub	sp, #12
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80039f4:	bf00      	nop
 80039f6:	370c      	adds	r7, #12
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr

08003a00 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b083      	sub	sp, #12
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003a08:	bf00      	nop
 8003a0a:	370c      	adds	r7, #12
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr

08003a14 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b083      	sub	sp, #12
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003a1c:	bf00      	nop
 8003a1e:	370c      	adds	r7, #12
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr

08003a28 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b0b6      	sub	sp, #216	; 0xd8
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a32:	2300      	movs	r3, #0
 8003a34:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d102      	bne.n	8003a4c <HAL_ADC_ConfigChannel+0x24>
 8003a46:	2302      	movs	r3, #2
 8003a48:	f000 bc13 	b.w	8004272 <HAL_ADC_ConfigChannel+0x84a>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f7ff f934 	bl	8002cc6 <LL_ADC_REG_IsConversionOngoing>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	f040 83f3 	bne.w	800424c <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6818      	ldr	r0, [r3, #0]
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	6859      	ldr	r1, [r3, #4]
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	461a      	mov	r2, r3
 8003a74:	f7fe ffef 	bl	8002a56 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f7ff f922 	bl	8002cc6 <LL_ADC_REG_IsConversionOngoing>
 8003a82:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f7ff f92e 	bl	8002cec <LL_ADC_INJ_IsConversionOngoing>
 8003a90:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003a94:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	f040 81d9 	bne.w	8003e50 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003a9e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	f040 81d4 	bne.w	8003e50 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ab0:	d10f      	bne.n	8003ad2 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6818      	ldr	r0, [r3, #0]
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	2200      	movs	r2, #0
 8003abc:	4619      	mov	r1, r3
 8003abe:	f7ff f809 	bl	8002ad4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003aca:	4618      	mov	r0, r3
 8003acc:	f7fe ff9d 	bl	8002a0a <LL_ADC_SetSamplingTimeCommonConfig>
 8003ad0:	e00e      	b.n	8003af0 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6818      	ldr	r0, [r3, #0]
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	6819      	ldr	r1, [r3, #0]
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	461a      	mov	r2, r3
 8003ae0:	f7fe fff8 	bl	8002ad4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	2100      	movs	r1, #0
 8003aea:	4618      	mov	r0, r3
 8003aec:	f7fe ff8d 	bl	8002a0a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	695a      	ldr	r2, [r3, #20]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	68db      	ldr	r3, [r3, #12]
 8003afa:	08db      	lsrs	r3, r3, #3
 8003afc:	f003 0303 	and.w	r3, r3, #3
 8003b00:	005b      	lsls	r3, r3, #1
 8003b02:	fa02 f303 	lsl.w	r3, r2, r3
 8003b06:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	691b      	ldr	r3, [r3, #16]
 8003b0e:	2b04      	cmp	r3, #4
 8003b10:	d022      	beq.n	8003b58 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6818      	ldr	r0, [r3, #0]
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	6919      	ldr	r1, [r3, #16]
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003b22:	f7fe fee7 	bl	80028f4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6818      	ldr	r0, [r3, #0]
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	6919      	ldr	r1, [r3, #16]
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	699b      	ldr	r3, [r3, #24]
 8003b32:	461a      	mov	r2, r3
 8003b34:	f7fe ff33 	bl	800299e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6818      	ldr	r0, [r3, #0]
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	6919      	ldr	r1, [r3, #16]
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	7f1b      	ldrb	r3, [r3, #28]
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d102      	bne.n	8003b4e <HAL_ADC_ConfigChannel+0x126>
 8003b48:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b4c:	e000      	b.n	8003b50 <HAL_ADC_ConfigChannel+0x128>
 8003b4e:	2300      	movs	r3, #0
 8003b50:	461a      	mov	r2, r3
 8003b52:	f7fe ff3f 	bl	80029d4 <LL_ADC_SetOffsetSaturation>
 8003b56:	e17b      	b.n	8003e50 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	2100      	movs	r1, #0
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f7fe feec 	bl	800293c <LL_ADC_GetOffsetChannel>
 8003b64:	4603      	mov	r3, r0
 8003b66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d10a      	bne.n	8003b84 <HAL_ADC_ConfigChannel+0x15c>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	2100      	movs	r1, #0
 8003b74:	4618      	mov	r0, r3
 8003b76:	f7fe fee1 	bl	800293c <LL_ADC_GetOffsetChannel>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	0e9b      	lsrs	r3, r3, #26
 8003b7e:	f003 021f 	and.w	r2, r3, #31
 8003b82:	e01e      	b.n	8003bc2 <HAL_ADC_ConfigChannel+0x19a>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	2100      	movs	r1, #0
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f7fe fed6 	bl	800293c <LL_ADC_GetOffsetChannel>
 8003b90:	4603      	mov	r3, r0
 8003b92:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b96:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003b9a:	fa93 f3a3 	rbit	r3, r3
 8003b9e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003ba2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003ba6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003baa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d101      	bne.n	8003bb6 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8003bb2:	2320      	movs	r3, #32
 8003bb4:	e004      	b.n	8003bc0 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8003bb6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003bba:	fab3 f383 	clz	r3, r3
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d105      	bne.n	8003bda <HAL_ADC_ConfigChannel+0x1b2>
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	0e9b      	lsrs	r3, r3, #26
 8003bd4:	f003 031f 	and.w	r3, r3, #31
 8003bd8:	e018      	b.n	8003c0c <HAL_ADC_ConfigChannel+0x1e4>
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003be2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003be6:	fa93 f3a3 	rbit	r3, r3
 8003bea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003bee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003bf2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003bf6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d101      	bne.n	8003c02 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8003bfe:	2320      	movs	r3, #32
 8003c00:	e004      	b.n	8003c0c <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8003c02:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003c06:	fab3 f383 	clz	r3, r3
 8003c0a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d106      	bne.n	8003c1e <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	2200      	movs	r2, #0
 8003c16:	2100      	movs	r1, #0
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f7fe fea5 	bl	8002968 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	2101      	movs	r1, #1
 8003c24:	4618      	mov	r0, r3
 8003c26:	f7fe fe89 	bl	800293c <LL_ADC_GetOffsetChannel>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d10a      	bne.n	8003c4a <HAL_ADC_ConfigChannel+0x222>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	2101      	movs	r1, #1
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f7fe fe7e 	bl	800293c <LL_ADC_GetOffsetChannel>
 8003c40:	4603      	mov	r3, r0
 8003c42:	0e9b      	lsrs	r3, r3, #26
 8003c44:	f003 021f 	and.w	r2, r3, #31
 8003c48:	e01e      	b.n	8003c88 <HAL_ADC_ConfigChannel+0x260>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	2101      	movs	r1, #1
 8003c50:	4618      	mov	r0, r3
 8003c52:	f7fe fe73 	bl	800293c <LL_ADC_GetOffsetChannel>
 8003c56:	4603      	mov	r3, r0
 8003c58:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c5c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003c60:	fa93 f3a3 	rbit	r3, r3
 8003c64:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003c68:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003c6c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003c70:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d101      	bne.n	8003c7c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003c78:	2320      	movs	r3, #32
 8003c7a:	e004      	b.n	8003c86 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003c7c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003c80:	fab3 f383 	clz	r3, r3
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d105      	bne.n	8003ca0 <HAL_ADC_ConfigChannel+0x278>
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	0e9b      	lsrs	r3, r3, #26
 8003c9a:	f003 031f 	and.w	r3, r3, #31
 8003c9e:	e018      	b.n	8003cd2 <HAL_ADC_ConfigChannel+0x2aa>
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ca8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003cac:	fa93 f3a3 	rbit	r3, r3
 8003cb0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003cb4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003cb8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003cbc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d101      	bne.n	8003cc8 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8003cc4:	2320      	movs	r3, #32
 8003cc6:	e004      	b.n	8003cd2 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003cc8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003ccc:	fab3 f383 	clz	r3, r3
 8003cd0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	d106      	bne.n	8003ce4 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	2101      	movs	r1, #1
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f7fe fe42 	bl	8002968 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	2102      	movs	r1, #2
 8003cea:	4618      	mov	r0, r3
 8003cec:	f7fe fe26 	bl	800293c <LL_ADC_GetOffsetChannel>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d10a      	bne.n	8003d10 <HAL_ADC_ConfigChannel+0x2e8>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	2102      	movs	r1, #2
 8003d00:	4618      	mov	r0, r3
 8003d02:	f7fe fe1b 	bl	800293c <LL_ADC_GetOffsetChannel>
 8003d06:	4603      	mov	r3, r0
 8003d08:	0e9b      	lsrs	r3, r3, #26
 8003d0a:	f003 021f 	and.w	r2, r3, #31
 8003d0e:	e01e      	b.n	8003d4e <HAL_ADC_ConfigChannel+0x326>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	2102      	movs	r1, #2
 8003d16:	4618      	mov	r0, r3
 8003d18:	f7fe fe10 	bl	800293c <LL_ADC_GetOffsetChannel>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d22:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d26:	fa93 f3a3 	rbit	r3, r3
 8003d2a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003d2e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003d32:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003d36:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d101      	bne.n	8003d42 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8003d3e:	2320      	movs	r3, #32
 8003d40:	e004      	b.n	8003d4c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8003d42:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003d46:	fab3 f383 	clz	r3, r3
 8003d4a:	b2db      	uxtb	r3, r3
 8003d4c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d105      	bne.n	8003d66 <HAL_ADC_ConfigChannel+0x33e>
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	0e9b      	lsrs	r3, r3, #26
 8003d60:	f003 031f 	and.w	r3, r3, #31
 8003d64:	e016      	b.n	8003d94 <HAL_ADC_ConfigChannel+0x36c>
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d6e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003d72:	fa93 f3a3 	rbit	r3, r3
 8003d76:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003d78:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003d7a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003d7e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d101      	bne.n	8003d8a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8003d86:	2320      	movs	r3, #32
 8003d88:	e004      	b.n	8003d94 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8003d8a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d8e:	fab3 f383 	clz	r3, r3
 8003d92:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d106      	bne.n	8003da6 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	2102      	movs	r1, #2
 8003da0:	4618      	mov	r0, r3
 8003da2:	f7fe fde1 	bl	8002968 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	2103      	movs	r1, #3
 8003dac:	4618      	mov	r0, r3
 8003dae:	f7fe fdc5 	bl	800293c <LL_ADC_GetOffsetChannel>
 8003db2:	4603      	mov	r3, r0
 8003db4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d10a      	bne.n	8003dd2 <HAL_ADC_ConfigChannel+0x3aa>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	2103      	movs	r1, #3
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f7fe fdba 	bl	800293c <LL_ADC_GetOffsetChannel>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	0e9b      	lsrs	r3, r3, #26
 8003dcc:	f003 021f 	and.w	r2, r3, #31
 8003dd0:	e017      	b.n	8003e02 <HAL_ADC_ConfigChannel+0x3da>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	2103      	movs	r1, #3
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f7fe fdaf 	bl	800293c <LL_ADC_GetOffsetChannel>
 8003dde:	4603      	mov	r3, r0
 8003de0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003de2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003de4:	fa93 f3a3 	rbit	r3, r3
 8003de8:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003dea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003dec:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003dee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d101      	bne.n	8003df8 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003df4:	2320      	movs	r3, #32
 8003df6:	e003      	b.n	8003e00 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003df8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003dfa:	fab3 f383 	clz	r3, r3
 8003dfe:	b2db      	uxtb	r3, r3
 8003e00:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d105      	bne.n	8003e1a <HAL_ADC_ConfigChannel+0x3f2>
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	0e9b      	lsrs	r3, r3, #26
 8003e14:	f003 031f 	and.w	r3, r3, #31
 8003e18:	e011      	b.n	8003e3e <HAL_ADC_ConfigChannel+0x416>
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e20:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e22:	fa93 f3a3 	rbit	r3, r3
 8003e26:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003e28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e2a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003e2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d101      	bne.n	8003e36 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8003e32:	2320      	movs	r3, #32
 8003e34:	e003      	b.n	8003e3e <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8003e36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e38:	fab3 f383 	clz	r3, r3
 8003e3c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d106      	bne.n	8003e50 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	2200      	movs	r2, #0
 8003e48:	2103      	movs	r1, #3
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f7fe fd8c 	bl	8002968 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4618      	mov	r0, r3
 8003e56:	f7fe ff0f 	bl	8002c78 <LL_ADC_IsEnabled>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	f040 813d 	bne.w	80040dc <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6818      	ldr	r0, [r3, #0]
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	6819      	ldr	r1, [r3, #0]
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	68db      	ldr	r3, [r3, #12]
 8003e6e:	461a      	mov	r2, r3
 8003e70:	f7fe fe5c 	bl	8002b2c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	68db      	ldr	r3, [r3, #12]
 8003e78:	4aa2      	ldr	r2, [pc, #648]	; (8004104 <HAL_ADC_ConfigChannel+0x6dc>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	f040 812e 	bne.w	80040dc <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d10b      	bne.n	8003ea8 <HAL_ADC_ConfigChannel+0x480>
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	0e9b      	lsrs	r3, r3, #26
 8003e96:	3301      	adds	r3, #1
 8003e98:	f003 031f 	and.w	r3, r3, #31
 8003e9c:	2b09      	cmp	r3, #9
 8003e9e:	bf94      	ite	ls
 8003ea0:	2301      	movls	r3, #1
 8003ea2:	2300      	movhi	r3, #0
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	e019      	b.n	8003edc <HAL_ADC_ConfigChannel+0x4b4>
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003eb0:	fa93 f3a3 	rbit	r3, r3
 8003eb4:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003eb6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003eb8:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003eba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d101      	bne.n	8003ec4 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003ec0:	2320      	movs	r3, #32
 8003ec2:	e003      	b.n	8003ecc <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003ec4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ec6:	fab3 f383 	clz	r3, r3
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	3301      	adds	r3, #1
 8003ece:	f003 031f 	and.w	r3, r3, #31
 8003ed2:	2b09      	cmp	r3, #9
 8003ed4:	bf94      	ite	ls
 8003ed6:	2301      	movls	r3, #1
 8003ed8:	2300      	movhi	r3, #0
 8003eda:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d079      	beq.n	8003fd4 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d107      	bne.n	8003efc <HAL_ADC_ConfigChannel+0x4d4>
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	0e9b      	lsrs	r3, r3, #26
 8003ef2:	3301      	adds	r3, #1
 8003ef4:	069b      	lsls	r3, r3, #26
 8003ef6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003efa:	e015      	b.n	8003f28 <HAL_ADC_ConfigChannel+0x500>
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f04:	fa93 f3a3 	rbit	r3, r3
 8003f08:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003f0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f0c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003f0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d101      	bne.n	8003f18 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003f14:	2320      	movs	r3, #32
 8003f16:	e003      	b.n	8003f20 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003f18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f1a:	fab3 f383 	clz	r3, r3
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	3301      	adds	r3, #1
 8003f22:	069b      	lsls	r3, r3, #26
 8003f24:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d109      	bne.n	8003f48 <HAL_ADC_ConfigChannel+0x520>
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	0e9b      	lsrs	r3, r3, #26
 8003f3a:	3301      	adds	r3, #1
 8003f3c:	f003 031f 	and.w	r3, r3, #31
 8003f40:	2101      	movs	r1, #1
 8003f42:	fa01 f303 	lsl.w	r3, r1, r3
 8003f46:	e017      	b.n	8003f78 <HAL_ADC_ConfigChannel+0x550>
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f50:	fa93 f3a3 	rbit	r3, r3
 8003f54:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003f56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f58:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003f5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d101      	bne.n	8003f64 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003f60:	2320      	movs	r3, #32
 8003f62:	e003      	b.n	8003f6c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8003f64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f66:	fab3 f383 	clz	r3, r3
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	3301      	adds	r3, #1
 8003f6e:	f003 031f 	and.w	r3, r3, #31
 8003f72:	2101      	movs	r1, #1
 8003f74:	fa01 f303 	lsl.w	r3, r1, r3
 8003f78:	ea42 0103 	orr.w	r1, r2, r3
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d10a      	bne.n	8003f9e <HAL_ADC_ConfigChannel+0x576>
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	0e9b      	lsrs	r3, r3, #26
 8003f8e:	3301      	adds	r3, #1
 8003f90:	f003 021f 	and.w	r2, r3, #31
 8003f94:	4613      	mov	r3, r2
 8003f96:	005b      	lsls	r3, r3, #1
 8003f98:	4413      	add	r3, r2
 8003f9a:	051b      	lsls	r3, r3, #20
 8003f9c:	e018      	b.n	8003fd0 <HAL_ADC_ConfigChannel+0x5a8>
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fa6:	fa93 f3a3 	rbit	r3, r3
 8003faa:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003fac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fae:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003fb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d101      	bne.n	8003fba <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8003fb6:	2320      	movs	r3, #32
 8003fb8:	e003      	b.n	8003fc2 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8003fba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fbc:	fab3 f383 	clz	r3, r3
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	3301      	adds	r3, #1
 8003fc4:	f003 021f 	and.w	r2, r3, #31
 8003fc8:	4613      	mov	r3, r2
 8003fca:	005b      	lsls	r3, r3, #1
 8003fcc:	4413      	add	r3, r2
 8003fce:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003fd0:	430b      	orrs	r3, r1
 8003fd2:	e07e      	b.n	80040d2 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d107      	bne.n	8003ff0 <HAL_ADC_ConfigChannel+0x5c8>
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	0e9b      	lsrs	r3, r3, #26
 8003fe6:	3301      	adds	r3, #1
 8003fe8:	069b      	lsls	r3, r3, #26
 8003fea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003fee:	e015      	b.n	800401c <HAL_ADC_ConfigChannel+0x5f4>
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ff8:	fa93 f3a3 	rbit	r3, r3
 8003ffc:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004000:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8004002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004004:	2b00      	cmp	r3, #0
 8004006:	d101      	bne.n	800400c <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8004008:	2320      	movs	r3, #32
 800400a:	e003      	b.n	8004014 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 800400c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800400e:	fab3 f383 	clz	r3, r3
 8004012:	b2db      	uxtb	r3, r3
 8004014:	3301      	adds	r3, #1
 8004016:	069b      	lsls	r3, r3, #26
 8004018:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004024:	2b00      	cmp	r3, #0
 8004026:	d109      	bne.n	800403c <HAL_ADC_ConfigChannel+0x614>
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	0e9b      	lsrs	r3, r3, #26
 800402e:	3301      	adds	r3, #1
 8004030:	f003 031f 	and.w	r3, r3, #31
 8004034:	2101      	movs	r1, #1
 8004036:	fa01 f303 	lsl.w	r3, r1, r3
 800403a:	e017      	b.n	800406c <HAL_ADC_ConfigChannel+0x644>
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004042:	6a3b      	ldr	r3, [r7, #32]
 8004044:	fa93 f3a3 	rbit	r3, r3
 8004048:	61fb      	str	r3, [r7, #28]
  return result;
 800404a:	69fb      	ldr	r3, [r7, #28]
 800404c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800404e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004050:	2b00      	cmp	r3, #0
 8004052:	d101      	bne.n	8004058 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8004054:	2320      	movs	r3, #32
 8004056:	e003      	b.n	8004060 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8004058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800405a:	fab3 f383 	clz	r3, r3
 800405e:	b2db      	uxtb	r3, r3
 8004060:	3301      	adds	r3, #1
 8004062:	f003 031f 	and.w	r3, r3, #31
 8004066:	2101      	movs	r1, #1
 8004068:	fa01 f303 	lsl.w	r3, r1, r3
 800406c:	ea42 0103 	orr.w	r1, r2, r3
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004078:	2b00      	cmp	r3, #0
 800407a:	d10d      	bne.n	8004098 <HAL_ADC_ConfigChannel+0x670>
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	0e9b      	lsrs	r3, r3, #26
 8004082:	3301      	adds	r3, #1
 8004084:	f003 021f 	and.w	r2, r3, #31
 8004088:	4613      	mov	r3, r2
 800408a:	005b      	lsls	r3, r3, #1
 800408c:	4413      	add	r3, r2
 800408e:	3b1e      	subs	r3, #30
 8004090:	051b      	lsls	r3, r3, #20
 8004092:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004096:	e01b      	b.n	80040d0 <HAL_ADC_ConfigChannel+0x6a8>
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	fa93 f3a3 	rbit	r3, r3
 80040a4:	613b      	str	r3, [r7, #16]
  return result;
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80040aa:	69bb      	ldr	r3, [r7, #24]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d101      	bne.n	80040b4 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80040b0:	2320      	movs	r3, #32
 80040b2:	e003      	b.n	80040bc <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80040b4:	69bb      	ldr	r3, [r7, #24]
 80040b6:	fab3 f383 	clz	r3, r3
 80040ba:	b2db      	uxtb	r3, r3
 80040bc:	3301      	adds	r3, #1
 80040be:	f003 021f 	and.w	r2, r3, #31
 80040c2:	4613      	mov	r3, r2
 80040c4:	005b      	lsls	r3, r3, #1
 80040c6:	4413      	add	r3, r2
 80040c8:	3b1e      	subs	r3, #30
 80040ca:	051b      	lsls	r3, r3, #20
 80040cc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80040d0:	430b      	orrs	r3, r1
 80040d2:	683a      	ldr	r2, [r7, #0]
 80040d4:	6892      	ldr	r2, [r2, #8]
 80040d6:	4619      	mov	r1, r3
 80040d8:	f7fe fcfc 	bl	8002ad4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	4b09      	ldr	r3, [pc, #36]	; (8004108 <HAL_ADC_ConfigChannel+0x6e0>)
 80040e2:	4013      	ands	r3, r2
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	f000 80be 	beq.w	8004266 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80040f2:	d004      	beq.n	80040fe <HAL_ADC_ConfigChannel+0x6d6>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a04      	ldr	r2, [pc, #16]	; (800410c <HAL_ADC_ConfigChannel+0x6e4>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d10a      	bne.n	8004114 <HAL_ADC_ConfigChannel+0x6ec>
 80040fe:	4b04      	ldr	r3, [pc, #16]	; (8004110 <HAL_ADC_ConfigChannel+0x6e8>)
 8004100:	e009      	b.n	8004116 <HAL_ADC_ConfigChannel+0x6ee>
 8004102:	bf00      	nop
 8004104:	407f0000 	.word	0x407f0000
 8004108:	80080000 	.word	0x80080000
 800410c:	50000100 	.word	0x50000100
 8004110:	50000300 	.word	0x50000300
 8004114:	4b59      	ldr	r3, [pc, #356]	; (800427c <HAL_ADC_ConfigChannel+0x854>)
 8004116:	4618      	mov	r0, r3
 8004118:	f7fe fbde 	bl	80028d8 <LL_ADC_GetCommonPathInternalCh>
 800411c:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a56      	ldr	r2, [pc, #344]	; (8004280 <HAL_ADC_ConfigChannel+0x858>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d004      	beq.n	8004134 <HAL_ADC_ConfigChannel+0x70c>
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a55      	ldr	r2, [pc, #340]	; (8004284 <HAL_ADC_ConfigChannel+0x85c>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d13a      	bne.n	80041aa <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004134:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004138:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800413c:	2b00      	cmp	r3, #0
 800413e:	d134      	bne.n	80041aa <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004148:	d005      	beq.n	8004156 <HAL_ADC_ConfigChannel+0x72e>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a4e      	ldr	r2, [pc, #312]	; (8004288 <HAL_ADC_ConfigChannel+0x860>)
 8004150:	4293      	cmp	r3, r2
 8004152:	f040 8085 	bne.w	8004260 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800415e:	d004      	beq.n	800416a <HAL_ADC_ConfigChannel+0x742>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a49      	ldr	r2, [pc, #292]	; (800428c <HAL_ADC_ConfigChannel+0x864>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d101      	bne.n	800416e <HAL_ADC_ConfigChannel+0x746>
 800416a:	4a49      	ldr	r2, [pc, #292]	; (8004290 <HAL_ADC_ConfigChannel+0x868>)
 800416c:	e000      	b.n	8004170 <HAL_ADC_ConfigChannel+0x748>
 800416e:	4a43      	ldr	r2, [pc, #268]	; (800427c <HAL_ADC_ConfigChannel+0x854>)
 8004170:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004174:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004178:	4619      	mov	r1, r3
 800417a:	4610      	mov	r0, r2
 800417c:	f7fe fb99 	bl	80028b2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004180:	4b44      	ldr	r3, [pc, #272]	; (8004294 <HAL_ADC_ConfigChannel+0x86c>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	099b      	lsrs	r3, r3, #6
 8004186:	4a44      	ldr	r2, [pc, #272]	; (8004298 <HAL_ADC_ConfigChannel+0x870>)
 8004188:	fba2 2303 	umull	r2, r3, r2, r3
 800418c:	099b      	lsrs	r3, r3, #6
 800418e:	1c5a      	adds	r2, r3, #1
 8004190:	4613      	mov	r3, r2
 8004192:	005b      	lsls	r3, r3, #1
 8004194:	4413      	add	r3, r2
 8004196:	009b      	lsls	r3, r3, #2
 8004198:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800419a:	e002      	b.n	80041a2 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	3b01      	subs	r3, #1
 80041a0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d1f9      	bne.n	800419c <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80041a8:	e05a      	b.n	8004260 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a3b      	ldr	r2, [pc, #236]	; (800429c <HAL_ADC_ConfigChannel+0x874>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d125      	bne.n	8004200 <HAL_ADC_ConfigChannel+0x7d8>
 80041b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80041b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d11f      	bne.n	8004200 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a31      	ldr	r2, [pc, #196]	; (800428c <HAL_ADC_ConfigChannel+0x864>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d104      	bne.n	80041d4 <HAL_ADC_ConfigChannel+0x7ac>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a34      	ldr	r2, [pc, #208]	; (80042a0 <HAL_ADC_ConfigChannel+0x878>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d047      	beq.n	8004264 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80041dc:	d004      	beq.n	80041e8 <HAL_ADC_ConfigChannel+0x7c0>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a2a      	ldr	r2, [pc, #168]	; (800428c <HAL_ADC_ConfigChannel+0x864>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d101      	bne.n	80041ec <HAL_ADC_ConfigChannel+0x7c4>
 80041e8:	4a29      	ldr	r2, [pc, #164]	; (8004290 <HAL_ADC_ConfigChannel+0x868>)
 80041ea:	e000      	b.n	80041ee <HAL_ADC_ConfigChannel+0x7c6>
 80041ec:	4a23      	ldr	r2, [pc, #140]	; (800427c <HAL_ADC_ConfigChannel+0x854>)
 80041ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80041f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80041f6:	4619      	mov	r1, r3
 80041f8:	4610      	mov	r0, r2
 80041fa:	f7fe fb5a 	bl	80028b2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80041fe:	e031      	b.n	8004264 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a27      	ldr	r2, [pc, #156]	; (80042a4 <HAL_ADC_ConfigChannel+0x87c>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d12d      	bne.n	8004266 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800420a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800420e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004212:	2b00      	cmp	r3, #0
 8004214:	d127      	bne.n	8004266 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a1c      	ldr	r2, [pc, #112]	; (800428c <HAL_ADC_ConfigChannel+0x864>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d022      	beq.n	8004266 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004228:	d004      	beq.n	8004234 <HAL_ADC_ConfigChannel+0x80c>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a17      	ldr	r2, [pc, #92]	; (800428c <HAL_ADC_ConfigChannel+0x864>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d101      	bne.n	8004238 <HAL_ADC_ConfigChannel+0x810>
 8004234:	4a16      	ldr	r2, [pc, #88]	; (8004290 <HAL_ADC_ConfigChannel+0x868>)
 8004236:	e000      	b.n	800423a <HAL_ADC_ConfigChannel+0x812>
 8004238:	4a10      	ldr	r2, [pc, #64]	; (800427c <HAL_ADC_ConfigChannel+0x854>)
 800423a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800423e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004242:	4619      	mov	r1, r3
 8004244:	4610      	mov	r0, r2
 8004246:	f7fe fb34 	bl	80028b2 <LL_ADC_SetCommonPathInternalCh>
 800424a:	e00c      	b.n	8004266 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004250:	f043 0220 	orr.w	r2, r3, #32
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800425e:	e002      	b.n	8004266 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004260:	bf00      	nop
 8004262:	e000      	b.n	8004266 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004264:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2200      	movs	r2, #0
 800426a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800426e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004272:	4618      	mov	r0, r3
 8004274:	37d8      	adds	r7, #216	; 0xd8
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}
 800427a:	bf00      	nop
 800427c:	50000700 	.word	0x50000700
 8004280:	c3210000 	.word	0xc3210000
 8004284:	90c00010 	.word	0x90c00010
 8004288:	50000600 	.word	0x50000600
 800428c:	50000100 	.word	0x50000100
 8004290:	50000300 	.word	0x50000300
 8004294:	20000000 	.word	0x20000000
 8004298:	053e2d63 	.word	0x053e2d63
 800429c:	c7520000 	.word	0xc7520000
 80042a0:	50000500 	.word	0x50000500
 80042a4:	cb840000 	.word	0xcb840000

080042a8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b084      	sub	sp, #16
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4618      	mov	r0, r3
 80042b6:	f7fe fcdf 	bl	8002c78 <LL_ADC_IsEnabled>
 80042ba:	4603      	mov	r3, r0
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d14d      	bne.n	800435c <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	689a      	ldr	r2, [r3, #8]
 80042c6:	4b28      	ldr	r3, [pc, #160]	; (8004368 <ADC_Enable+0xc0>)
 80042c8:	4013      	ands	r3, r2
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d00d      	beq.n	80042ea <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042d2:	f043 0210 	orr.w	r2, r3, #16
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042de:	f043 0201 	orr.w	r2, r3, #1
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	e039      	b.n	800435e <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4618      	mov	r0, r3
 80042f0:	f7fe fcae 	bl	8002c50 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80042f4:	f7fe fabe 	bl	8002874 <HAL_GetTick>
 80042f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80042fa:	e028      	b.n	800434e <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4618      	mov	r0, r3
 8004302:	f7fe fcb9 	bl	8002c78 <LL_ADC_IsEnabled>
 8004306:	4603      	mov	r3, r0
 8004308:	2b00      	cmp	r3, #0
 800430a:	d104      	bne.n	8004316 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4618      	mov	r0, r3
 8004312:	f7fe fc9d 	bl	8002c50 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004316:	f7fe faad 	bl	8002874 <HAL_GetTick>
 800431a:	4602      	mov	r2, r0
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	1ad3      	subs	r3, r2, r3
 8004320:	2b02      	cmp	r3, #2
 8004322:	d914      	bls.n	800434e <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f003 0301 	and.w	r3, r3, #1
 800432e:	2b01      	cmp	r3, #1
 8004330:	d00d      	beq.n	800434e <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004336:	f043 0210 	orr.w	r2, r3, #16
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004342:	f043 0201 	orr.w	r2, r3, #1
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e007      	b.n	800435e <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 0301 	and.w	r3, r3, #1
 8004358:	2b01      	cmp	r3, #1
 800435a:	d1cf      	bne.n	80042fc <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800435c:	2300      	movs	r3, #0
}
 800435e:	4618      	mov	r0, r3
 8004360:	3710      	adds	r7, #16
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}
 8004366:	bf00      	nop
 8004368:	8000003f 	.word	0x8000003f

0800436c <LL_ADC_IsEnabled>:
{
 800436c:	b480      	push	{r7}
 800436e:	b083      	sub	sp, #12
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	f003 0301 	and.w	r3, r3, #1
 800437c:	2b01      	cmp	r3, #1
 800437e:	d101      	bne.n	8004384 <LL_ADC_IsEnabled+0x18>
 8004380:	2301      	movs	r3, #1
 8004382:	e000      	b.n	8004386 <LL_ADC_IsEnabled+0x1a>
 8004384:	2300      	movs	r3, #0
}
 8004386:	4618      	mov	r0, r3
 8004388:	370c      	adds	r7, #12
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr

08004392 <LL_ADC_REG_IsConversionOngoing>:
{
 8004392:	b480      	push	{r7}
 8004394:	b083      	sub	sp, #12
 8004396:	af00      	add	r7, sp, #0
 8004398:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	f003 0304 	and.w	r3, r3, #4
 80043a2:	2b04      	cmp	r3, #4
 80043a4:	d101      	bne.n	80043aa <LL_ADC_REG_IsConversionOngoing+0x18>
 80043a6:	2301      	movs	r3, #1
 80043a8:	e000      	b.n	80043ac <LL_ADC_REG_IsConversionOngoing+0x1a>
 80043aa:	2300      	movs	r3, #0
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	370c      	adds	r7, #12
 80043b0:	46bd      	mov	sp, r7
 80043b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b6:	4770      	bx	lr

080043b8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b083      	sub	sp, #12
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80043c0:	bf00      	nop
 80043c2:	370c      	adds	r7, #12
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr

080043cc <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b083      	sub	sp, #12
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80043d4:	bf00      	nop
 80043d6:	370c      	adds	r7, #12
 80043d8:	46bd      	mov	sp, r7
 80043da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043de:	4770      	bx	lr

080043e0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b083      	sub	sp, #12
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80043e8:	bf00      	nop
 80043ea:	370c      	adds	r7, #12
 80043ec:	46bd      	mov	sp, r7
 80043ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f2:	4770      	bx	lr

080043f4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b083      	sub	sp, #12
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80043fc:	bf00      	nop
 80043fe:	370c      	adds	r7, #12
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr

08004408 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004408:	b480      	push	{r7}
 800440a:	b083      	sub	sp, #12
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004410:	bf00      	nop
 8004412:	370c      	adds	r7, #12
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr

0800441c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800441c:	b590      	push	{r4, r7, lr}
 800441e:	b0a1      	sub	sp, #132	; 0x84
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004426:	2300      	movs	r3, #0
 8004428:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004432:	2b01      	cmp	r3, #1
 8004434:	d101      	bne.n	800443a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004436:	2302      	movs	r3, #2
 8004438:	e0e7      	b.n	800460a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2201      	movs	r2, #1
 800443e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8004442:	2300      	movs	r3, #0
 8004444:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8004446:	2300      	movs	r3, #0
 8004448:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004452:	d102      	bne.n	800445a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004454:	4b6f      	ldr	r3, [pc, #444]	; (8004614 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004456:	60bb      	str	r3, [r7, #8]
 8004458:	e009      	b.n	800446e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a6e      	ldr	r2, [pc, #440]	; (8004618 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d102      	bne.n	800446a <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8004464:	4b6d      	ldr	r3, [pc, #436]	; (800461c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004466:	60bb      	str	r3, [r7, #8]
 8004468:	e001      	b.n	800446e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800446a:	2300      	movs	r3, #0
 800446c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d10b      	bne.n	800448c <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004478:	f043 0220 	orr.w	r2, r3, #32
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2200      	movs	r2, #0
 8004484:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	e0be      	b.n	800460a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	4618      	mov	r0, r3
 8004490:	f7ff ff7f 	bl	8004392 <LL_ADC_REG_IsConversionOngoing>
 8004494:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4618      	mov	r0, r3
 800449c:	f7ff ff79 	bl	8004392 <LL_ADC_REG_IsConversionOngoing>
 80044a0:	4603      	mov	r3, r0
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	f040 80a0 	bne.w	80045e8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80044a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	f040 809c 	bne.w	80045e8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80044b8:	d004      	beq.n	80044c4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a55      	ldr	r2, [pc, #340]	; (8004614 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d101      	bne.n	80044c8 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80044c4:	4b56      	ldr	r3, [pc, #344]	; (8004620 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80044c6:	e000      	b.n	80044ca <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80044c8:	4b56      	ldr	r3, [pc, #344]	; (8004624 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80044ca:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d04b      	beq.n	800456c <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80044d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	6859      	ldr	r1, [r3, #4]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80044e6:	035b      	lsls	r3, r3, #13
 80044e8:	430b      	orrs	r3, r1
 80044ea:	431a      	orrs	r2, r3
 80044ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044ee:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80044f8:	d004      	beq.n	8004504 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a45      	ldr	r2, [pc, #276]	; (8004614 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d10f      	bne.n	8004524 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8004504:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004508:	f7ff ff30 	bl	800436c <LL_ADC_IsEnabled>
 800450c:	4604      	mov	r4, r0
 800450e:	4841      	ldr	r0, [pc, #260]	; (8004614 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004510:	f7ff ff2c 	bl	800436c <LL_ADC_IsEnabled>
 8004514:	4603      	mov	r3, r0
 8004516:	4323      	orrs	r3, r4
 8004518:	2b00      	cmp	r3, #0
 800451a:	bf0c      	ite	eq
 800451c:	2301      	moveq	r3, #1
 800451e:	2300      	movne	r3, #0
 8004520:	b2db      	uxtb	r3, r3
 8004522:	e012      	b.n	800454a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8004524:	483c      	ldr	r0, [pc, #240]	; (8004618 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004526:	f7ff ff21 	bl	800436c <LL_ADC_IsEnabled>
 800452a:	4604      	mov	r4, r0
 800452c:	483b      	ldr	r0, [pc, #236]	; (800461c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800452e:	f7ff ff1d 	bl	800436c <LL_ADC_IsEnabled>
 8004532:	4603      	mov	r3, r0
 8004534:	431c      	orrs	r4, r3
 8004536:	483c      	ldr	r0, [pc, #240]	; (8004628 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004538:	f7ff ff18 	bl	800436c <LL_ADC_IsEnabled>
 800453c:	4603      	mov	r3, r0
 800453e:	4323      	orrs	r3, r4
 8004540:	2b00      	cmp	r3, #0
 8004542:	bf0c      	ite	eq
 8004544:	2301      	moveq	r3, #1
 8004546:	2300      	movne	r3, #0
 8004548:	b2db      	uxtb	r3, r3
 800454a:	2b00      	cmp	r3, #0
 800454c:	d056      	beq.n	80045fc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800454e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004556:	f023 030f 	bic.w	r3, r3, #15
 800455a:	683a      	ldr	r2, [r7, #0]
 800455c:	6811      	ldr	r1, [r2, #0]
 800455e:	683a      	ldr	r2, [r7, #0]
 8004560:	6892      	ldr	r2, [r2, #8]
 8004562:	430a      	orrs	r2, r1
 8004564:	431a      	orrs	r2, r3
 8004566:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004568:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800456a:	e047      	b.n	80045fc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800456c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004574:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004576:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004580:	d004      	beq.n	800458c <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a23      	ldr	r2, [pc, #140]	; (8004614 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d10f      	bne.n	80045ac <HAL_ADCEx_MultiModeConfigChannel+0x190>
 800458c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004590:	f7ff feec 	bl	800436c <LL_ADC_IsEnabled>
 8004594:	4604      	mov	r4, r0
 8004596:	481f      	ldr	r0, [pc, #124]	; (8004614 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004598:	f7ff fee8 	bl	800436c <LL_ADC_IsEnabled>
 800459c:	4603      	mov	r3, r0
 800459e:	4323      	orrs	r3, r4
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	bf0c      	ite	eq
 80045a4:	2301      	moveq	r3, #1
 80045a6:	2300      	movne	r3, #0
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	e012      	b.n	80045d2 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80045ac:	481a      	ldr	r0, [pc, #104]	; (8004618 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80045ae:	f7ff fedd 	bl	800436c <LL_ADC_IsEnabled>
 80045b2:	4604      	mov	r4, r0
 80045b4:	4819      	ldr	r0, [pc, #100]	; (800461c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80045b6:	f7ff fed9 	bl	800436c <LL_ADC_IsEnabled>
 80045ba:	4603      	mov	r3, r0
 80045bc:	431c      	orrs	r4, r3
 80045be:	481a      	ldr	r0, [pc, #104]	; (8004628 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80045c0:	f7ff fed4 	bl	800436c <LL_ADC_IsEnabled>
 80045c4:	4603      	mov	r3, r0
 80045c6:	4323      	orrs	r3, r4
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	bf0c      	ite	eq
 80045cc:	2301      	moveq	r3, #1
 80045ce:	2300      	movne	r3, #0
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d012      	beq.n	80045fc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80045d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80045de:	f023 030f 	bic.w	r3, r3, #15
 80045e2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80045e4:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80045e6:	e009      	b.n	80045fc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045ec:	f043 0220 	orr.w	r2, r3, #32
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80045fa:	e000      	b.n	80045fe <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80045fc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2200      	movs	r2, #0
 8004602:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004606:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800460a:	4618      	mov	r0, r3
 800460c:	3784      	adds	r7, #132	; 0x84
 800460e:	46bd      	mov	sp, r7
 8004610:	bd90      	pop	{r4, r7, pc}
 8004612:	bf00      	nop
 8004614:	50000100 	.word	0x50000100
 8004618:	50000400 	.word	0x50000400
 800461c:	50000500 	.word	0x50000500
 8004620:	50000300 	.word	0x50000300
 8004624:	50000700 	.word	0x50000700
 8004628:	50000600 	.word	0x50000600

0800462c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800462c:	b480      	push	{r7}
 800462e:	b085      	sub	sp, #20
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	f003 0307 	and.w	r3, r3, #7
 800463a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800463c:	4b0c      	ldr	r3, [pc, #48]	; (8004670 <__NVIC_SetPriorityGrouping+0x44>)
 800463e:	68db      	ldr	r3, [r3, #12]
 8004640:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004642:	68ba      	ldr	r2, [r7, #8]
 8004644:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004648:	4013      	ands	r3, r2
 800464a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004654:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004658:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800465c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800465e:	4a04      	ldr	r2, [pc, #16]	; (8004670 <__NVIC_SetPriorityGrouping+0x44>)
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	60d3      	str	r3, [r2, #12]
}
 8004664:	bf00      	nop
 8004666:	3714      	adds	r7, #20
 8004668:	46bd      	mov	sp, r7
 800466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466e:	4770      	bx	lr
 8004670:	e000ed00 	.word	0xe000ed00

08004674 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004674:	b480      	push	{r7}
 8004676:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004678:	4b04      	ldr	r3, [pc, #16]	; (800468c <__NVIC_GetPriorityGrouping+0x18>)
 800467a:	68db      	ldr	r3, [r3, #12]
 800467c:	0a1b      	lsrs	r3, r3, #8
 800467e:	f003 0307 	and.w	r3, r3, #7
}
 8004682:	4618      	mov	r0, r3
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr
 800468c:	e000ed00 	.word	0xe000ed00

08004690 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004690:	b480      	push	{r7}
 8004692:	b083      	sub	sp, #12
 8004694:	af00      	add	r7, sp, #0
 8004696:	4603      	mov	r3, r0
 8004698:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800469a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	db0b      	blt.n	80046ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80046a2:	79fb      	ldrb	r3, [r7, #7]
 80046a4:	f003 021f 	and.w	r2, r3, #31
 80046a8:	4907      	ldr	r1, [pc, #28]	; (80046c8 <__NVIC_EnableIRQ+0x38>)
 80046aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046ae:	095b      	lsrs	r3, r3, #5
 80046b0:	2001      	movs	r0, #1
 80046b2:	fa00 f202 	lsl.w	r2, r0, r2
 80046b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80046ba:	bf00      	nop
 80046bc:	370c      	adds	r7, #12
 80046be:	46bd      	mov	sp, r7
 80046c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c4:	4770      	bx	lr
 80046c6:	bf00      	nop
 80046c8:	e000e100 	.word	0xe000e100

080046cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b083      	sub	sp, #12
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	4603      	mov	r3, r0
 80046d4:	6039      	str	r1, [r7, #0]
 80046d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	db0a      	blt.n	80046f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	b2da      	uxtb	r2, r3
 80046e4:	490c      	ldr	r1, [pc, #48]	; (8004718 <__NVIC_SetPriority+0x4c>)
 80046e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046ea:	0112      	lsls	r2, r2, #4
 80046ec:	b2d2      	uxtb	r2, r2
 80046ee:	440b      	add	r3, r1
 80046f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80046f4:	e00a      	b.n	800470c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	b2da      	uxtb	r2, r3
 80046fa:	4908      	ldr	r1, [pc, #32]	; (800471c <__NVIC_SetPriority+0x50>)
 80046fc:	79fb      	ldrb	r3, [r7, #7]
 80046fe:	f003 030f 	and.w	r3, r3, #15
 8004702:	3b04      	subs	r3, #4
 8004704:	0112      	lsls	r2, r2, #4
 8004706:	b2d2      	uxtb	r2, r2
 8004708:	440b      	add	r3, r1
 800470a:	761a      	strb	r2, [r3, #24]
}
 800470c:	bf00      	nop
 800470e:	370c      	adds	r7, #12
 8004710:	46bd      	mov	sp, r7
 8004712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004716:	4770      	bx	lr
 8004718:	e000e100 	.word	0xe000e100
 800471c:	e000ed00 	.word	0xe000ed00

08004720 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004720:	b480      	push	{r7}
 8004722:	b089      	sub	sp, #36	; 0x24
 8004724:	af00      	add	r7, sp, #0
 8004726:	60f8      	str	r0, [r7, #12]
 8004728:	60b9      	str	r1, [r7, #8]
 800472a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f003 0307 	and.w	r3, r3, #7
 8004732:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004734:	69fb      	ldr	r3, [r7, #28]
 8004736:	f1c3 0307 	rsb	r3, r3, #7
 800473a:	2b04      	cmp	r3, #4
 800473c:	bf28      	it	cs
 800473e:	2304      	movcs	r3, #4
 8004740:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004742:	69fb      	ldr	r3, [r7, #28]
 8004744:	3304      	adds	r3, #4
 8004746:	2b06      	cmp	r3, #6
 8004748:	d902      	bls.n	8004750 <NVIC_EncodePriority+0x30>
 800474a:	69fb      	ldr	r3, [r7, #28]
 800474c:	3b03      	subs	r3, #3
 800474e:	e000      	b.n	8004752 <NVIC_EncodePriority+0x32>
 8004750:	2300      	movs	r3, #0
 8004752:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004754:	f04f 32ff 	mov.w	r2, #4294967295
 8004758:	69bb      	ldr	r3, [r7, #24]
 800475a:	fa02 f303 	lsl.w	r3, r2, r3
 800475e:	43da      	mvns	r2, r3
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	401a      	ands	r2, r3
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004768:	f04f 31ff 	mov.w	r1, #4294967295
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	fa01 f303 	lsl.w	r3, r1, r3
 8004772:	43d9      	mvns	r1, r3
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004778:	4313      	orrs	r3, r2
         );
}
 800477a:	4618      	mov	r0, r3
 800477c:	3724      	adds	r7, #36	; 0x24
 800477e:	46bd      	mov	sp, r7
 8004780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004784:	4770      	bx	lr

08004786 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004786:	b580      	push	{r7, lr}
 8004788:	b082      	sub	sp, #8
 800478a:	af00      	add	r7, sp, #0
 800478c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f7ff ff4c 	bl	800462c <__NVIC_SetPriorityGrouping>
}
 8004794:	bf00      	nop
 8004796:	3708      	adds	r7, #8
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}

0800479c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b086      	sub	sp, #24
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	4603      	mov	r3, r0
 80047a4:	60b9      	str	r1, [r7, #8]
 80047a6:	607a      	str	r2, [r7, #4]
 80047a8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80047aa:	f7ff ff63 	bl	8004674 <__NVIC_GetPriorityGrouping>
 80047ae:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	68b9      	ldr	r1, [r7, #8]
 80047b4:	6978      	ldr	r0, [r7, #20]
 80047b6:	f7ff ffb3 	bl	8004720 <NVIC_EncodePriority>
 80047ba:	4602      	mov	r2, r0
 80047bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047c0:	4611      	mov	r1, r2
 80047c2:	4618      	mov	r0, r3
 80047c4:	f7ff ff82 	bl	80046cc <__NVIC_SetPriority>
}
 80047c8:	bf00      	nop
 80047ca:	3718      	adds	r7, #24
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}

080047d0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b082      	sub	sp, #8
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	4603      	mov	r3, r0
 80047d8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80047da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047de:	4618      	mov	r0, r3
 80047e0:	f7ff ff56 	bl	8004690 <__NVIC_EnableIRQ>
}
 80047e4:	bf00      	nop
 80047e6:	3708      	adds	r7, #8
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}

080047ec <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b085      	sub	sp, #20
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047f4:	2300      	movs	r3, #0
 80047f6:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80047fe:	b2db      	uxtb	r3, r3
 8004800:	2b02      	cmp	r3, #2
 8004802:	d005      	beq.n	8004810 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2204      	movs	r2, #4
 8004808:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	73fb      	strb	r3, [r7, #15]
 800480e:	e037      	b.n	8004880 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f022 020e 	bic.w	r2, r2, #14
 800481e:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800482a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800482e:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f022 0201 	bic.w	r2, r2, #1
 800483e:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004844:	f003 021f 	and.w	r2, r3, #31
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800484c:	2101      	movs	r1, #1
 800484e:	fa01 f202 	lsl.w	r2, r1, r2
 8004852:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004858:	687a      	ldr	r2, [r7, #4]
 800485a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800485c:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004862:	2b00      	cmp	r3, #0
 8004864:	d00c      	beq.n	8004880 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004870:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004874:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800487a:	687a      	ldr	r2, [r7, #4]
 800487c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800487e:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2201      	movs	r2, #1
 8004884:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8004890:	7bfb      	ldrb	r3, [r7, #15]
}
 8004892:	4618      	mov	r0, r3
 8004894:	3714      	adds	r7, #20
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr

0800489e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800489e:	b580      	push	{r7, lr}
 80048a0:	b084      	sub	sp, #16
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048a6:	2300      	movs	r3, #0
 80048a8:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	2b02      	cmp	r3, #2
 80048b4:	d00d      	beq.n	80048d2 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2204      	movs	r2, #4
 80048ba:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2201      	movs	r2, #1
 80048c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2200      	movs	r2, #0
 80048c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80048cc:	2301      	movs	r3, #1
 80048ce:	73fb      	strb	r3, [r7, #15]
 80048d0:	e047      	b.n	8004962 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f022 020e 	bic.w	r2, r2, #14
 80048e0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f022 0201 	bic.w	r2, r2, #1
 80048f0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048f6:	681a      	ldr	r2, [r3, #0]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004900:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004906:	f003 021f 	and.w	r2, r3, #31
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490e:	2101      	movs	r1, #1
 8004910:	fa01 f202 	lsl.w	r2, r1, r2
 8004914:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800491e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004924:	2b00      	cmp	r3, #0
 8004926:	d00c      	beq.n	8004942 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004932:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004936:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800493c:	687a      	ldr	r2, [r7, #4]
 800493e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004940:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2201      	movs	r2, #1
 8004946:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2200      	movs	r2, #0
 800494e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004956:	2b00      	cmp	r3, #0
 8004958:	d003      	beq.n	8004962 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	4798      	blx	r3
    }
  }
  return status;
 8004962:	7bfb      	ldrb	r3, [r7, #15]
}
 8004964:	4618      	mov	r0, r3
 8004966:	3710      	adds	r7, #16
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}

0800496c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800496c:	b480      	push	{r7}
 800496e:	b087      	sub	sp, #28
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
 8004974:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004976:	2300      	movs	r3, #0
 8004978:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800497a:	e15a      	b.n	8004c32 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	2101      	movs	r1, #1
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	fa01 f303 	lsl.w	r3, r1, r3
 8004988:	4013      	ands	r3, r2
 800498a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2b00      	cmp	r3, #0
 8004990:	f000 814c 	beq.w	8004c2c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	f003 0303 	and.w	r3, r3, #3
 800499c:	2b01      	cmp	r3, #1
 800499e:	d005      	beq.n	80049ac <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80049a8:	2b02      	cmp	r3, #2
 80049aa:	d130      	bne.n	8004a0e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	005b      	lsls	r3, r3, #1
 80049b6:	2203      	movs	r2, #3
 80049b8:	fa02 f303 	lsl.w	r3, r2, r3
 80049bc:	43db      	mvns	r3, r3
 80049be:	693a      	ldr	r2, [r7, #16]
 80049c0:	4013      	ands	r3, r2
 80049c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	68da      	ldr	r2, [r3, #12]
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	005b      	lsls	r3, r3, #1
 80049cc:	fa02 f303 	lsl.w	r3, r2, r3
 80049d0:	693a      	ldr	r2, [r7, #16]
 80049d2:	4313      	orrs	r3, r2
 80049d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	693a      	ldr	r2, [r7, #16]
 80049da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80049e2:	2201      	movs	r2, #1
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	fa02 f303 	lsl.w	r3, r2, r3
 80049ea:	43db      	mvns	r3, r3
 80049ec:	693a      	ldr	r2, [r7, #16]
 80049ee:	4013      	ands	r3, r2
 80049f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	091b      	lsrs	r3, r3, #4
 80049f8:	f003 0201 	and.w	r2, r3, #1
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004a02:	693a      	ldr	r2, [r7, #16]
 8004a04:	4313      	orrs	r3, r2
 8004a06:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	693a      	ldr	r2, [r7, #16]
 8004a0c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	f003 0303 	and.w	r3, r3, #3
 8004a16:	2b03      	cmp	r3, #3
 8004a18:	d017      	beq.n	8004a4a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	68db      	ldr	r3, [r3, #12]
 8004a1e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	005b      	lsls	r3, r3, #1
 8004a24:	2203      	movs	r2, #3
 8004a26:	fa02 f303 	lsl.w	r3, r2, r3
 8004a2a:	43db      	mvns	r3, r3
 8004a2c:	693a      	ldr	r2, [r7, #16]
 8004a2e:	4013      	ands	r3, r2
 8004a30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	689a      	ldr	r2, [r3, #8]
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	005b      	lsls	r3, r3, #1
 8004a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a3e:	693a      	ldr	r2, [r7, #16]
 8004a40:	4313      	orrs	r3, r2
 8004a42:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	693a      	ldr	r2, [r7, #16]
 8004a48:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	f003 0303 	and.w	r3, r3, #3
 8004a52:	2b02      	cmp	r3, #2
 8004a54:	d123      	bne.n	8004a9e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	08da      	lsrs	r2, r3, #3
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	3208      	adds	r2, #8
 8004a5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a62:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	f003 0307 	and.w	r3, r3, #7
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	220f      	movs	r2, #15
 8004a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a72:	43db      	mvns	r3, r3
 8004a74:	693a      	ldr	r2, [r7, #16]
 8004a76:	4013      	ands	r3, r2
 8004a78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	691a      	ldr	r2, [r3, #16]
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	f003 0307 	and.w	r3, r3, #7
 8004a84:	009b      	lsls	r3, r3, #2
 8004a86:	fa02 f303 	lsl.w	r3, r2, r3
 8004a8a:	693a      	ldr	r2, [r7, #16]
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	08da      	lsrs	r2, r3, #3
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	3208      	adds	r2, #8
 8004a98:	6939      	ldr	r1, [r7, #16]
 8004a9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	005b      	lsls	r3, r3, #1
 8004aa8:	2203      	movs	r2, #3
 8004aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8004aae:	43db      	mvns	r3, r3
 8004ab0:	693a      	ldr	r2, [r7, #16]
 8004ab2:	4013      	ands	r3, r2
 8004ab4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	f003 0203 	and.w	r2, r3, #3
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	005b      	lsls	r3, r3, #1
 8004ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac6:	693a      	ldr	r2, [r7, #16]
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	693a      	ldr	r2, [r7, #16]
 8004ad0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	f000 80a6 	beq.w	8004c2c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ae0:	4b5b      	ldr	r3, [pc, #364]	; (8004c50 <HAL_GPIO_Init+0x2e4>)
 8004ae2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ae4:	4a5a      	ldr	r2, [pc, #360]	; (8004c50 <HAL_GPIO_Init+0x2e4>)
 8004ae6:	f043 0301 	orr.w	r3, r3, #1
 8004aea:	6613      	str	r3, [r2, #96]	; 0x60
 8004aec:	4b58      	ldr	r3, [pc, #352]	; (8004c50 <HAL_GPIO_Init+0x2e4>)
 8004aee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004af0:	f003 0301 	and.w	r3, r3, #1
 8004af4:	60bb      	str	r3, [r7, #8]
 8004af6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004af8:	4a56      	ldr	r2, [pc, #344]	; (8004c54 <HAL_GPIO_Init+0x2e8>)
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	089b      	lsrs	r3, r3, #2
 8004afe:	3302      	adds	r3, #2
 8004b00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b04:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	f003 0303 	and.w	r3, r3, #3
 8004b0c:	009b      	lsls	r3, r3, #2
 8004b0e:	220f      	movs	r2, #15
 8004b10:	fa02 f303 	lsl.w	r3, r2, r3
 8004b14:	43db      	mvns	r3, r3
 8004b16:	693a      	ldr	r2, [r7, #16]
 8004b18:	4013      	ands	r3, r2
 8004b1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004b22:	d01f      	beq.n	8004b64 <HAL_GPIO_Init+0x1f8>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	4a4c      	ldr	r2, [pc, #304]	; (8004c58 <HAL_GPIO_Init+0x2ec>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d019      	beq.n	8004b60 <HAL_GPIO_Init+0x1f4>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	4a4b      	ldr	r2, [pc, #300]	; (8004c5c <HAL_GPIO_Init+0x2f0>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d013      	beq.n	8004b5c <HAL_GPIO_Init+0x1f0>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	4a4a      	ldr	r2, [pc, #296]	; (8004c60 <HAL_GPIO_Init+0x2f4>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d00d      	beq.n	8004b58 <HAL_GPIO_Init+0x1ec>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	4a49      	ldr	r2, [pc, #292]	; (8004c64 <HAL_GPIO_Init+0x2f8>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d007      	beq.n	8004b54 <HAL_GPIO_Init+0x1e8>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	4a48      	ldr	r2, [pc, #288]	; (8004c68 <HAL_GPIO_Init+0x2fc>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d101      	bne.n	8004b50 <HAL_GPIO_Init+0x1e4>
 8004b4c:	2305      	movs	r3, #5
 8004b4e:	e00a      	b.n	8004b66 <HAL_GPIO_Init+0x1fa>
 8004b50:	2306      	movs	r3, #6
 8004b52:	e008      	b.n	8004b66 <HAL_GPIO_Init+0x1fa>
 8004b54:	2304      	movs	r3, #4
 8004b56:	e006      	b.n	8004b66 <HAL_GPIO_Init+0x1fa>
 8004b58:	2303      	movs	r3, #3
 8004b5a:	e004      	b.n	8004b66 <HAL_GPIO_Init+0x1fa>
 8004b5c:	2302      	movs	r3, #2
 8004b5e:	e002      	b.n	8004b66 <HAL_GPIO_Init+0x1fa>
 8004b60:	2301      	movs	r3, #1
 8004b62:	e000      	b.n	8004b66 <HAL_GPIO_Init+0x1fa>
 8004b64:	2300      	movs	r3, #0
 8004b66:	697a      	ldr	r2, [r7, #20]
 8004b68:	f002 0203 	and.w	r2, r2, #3
 8004b6c:	0092      	lsls	r2, r2, #2
 8004b6e:	4093      	lsls	r3, r2
 8004b70:	693a      	ldr	r2, [r7, #16]
 8004b72:	4313      	orrs	r3, r2
 8004b74:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004b76:	4937      	ldr	r1, [pc, #220]	; (8004c54 <HAL_GPIO_Init+0x2e8>)
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	089b      	lsrs	r3, r3, #2
 8004b7c:	3302      	adds	r3, #2
 8004b7e:	693a      	ldr	r2, [r7, #16]
 8004b80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004b84:	4b39      	ldr	r3, [pc, #228]	; (8004c6c <HAL_GPIO_Init+0x300>)
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	43db      	mvns	r3, r3
 8004b8e:	693a      	ldr	r2, [r7, #16]
 8004b90:	4013      	ands	r3, r2
 8004b92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d003      	beq.n	8004ba8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004ba0:	693a      	ldr	r2, [r7, #16]
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004ba8:	4a30      	ldr	r2, [pc, #192]	; (8004c6c <HAL_GPIO_Init+0x300>)
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004bae:	4b2f      	ldr	r3, [pc, #188]	; (8004c6c <HAL_GPIO_Init+0x300>)
 8004bb0:	68db      	ldr	r3, [r3, #12]
 8004bb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	43db      	mvns	r3, r3
 8004bb8:	693a      	ldr	r2, [r7, #16]
 8004bba:	4013      	ands	r3, r2
 8004bbc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d003      	beq.n	8004bd2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004bca:	693a      	ldr	r2, [r7, #16]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004bd2:	4a26      	ldr	r2, [pc, #152]	; (8004c6c <HAL_GPIO_Init+0x300>)
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004bd8:	4b24      	ldr	r3, [pc, #144]	; (8004c6c <HAL_GPIO_Init+0x300>)
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	43db      	mvns	r3, r3
 8004be2:	693a      	ldr	r2, [r7, #16]
 8004be4:	4013      	ands	r3, r2
 8004be6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d003      	beq.n	8004bfc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004bf4:	693a      	ldr	r2, [r7, #16]
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004bfc:	4a1b      	ldr	r2, [pc, #108]	; (8004c6c <HAL_GPIO_Init+0x300>)
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004c02:	4b1a      	ldr	r3, [pc, #104]	; (8004c6c <HAL_GPIO_Init+0x300>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	43db      	mvns	r3, r3
 8004c0c:	693a      	ldr	r2, [r7, #16]
 8004c0e:	4013      	ands	r3, r2
 8004c10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d003      	beq.n	8004c26 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004c1e:	693a      	ldr	r2, [r7, #16]
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	4313      	orrs	r3, r2
 8004c24:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004c26:	4a11      	ldr	r2, [pc, #68]	; (8004c6c <HAL_GPIO_Init+0x300>)
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	3301      	adds	r3, #1
 8004c30:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	fa22 f303 	lsr.w	r3, r2, r3
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	f47f ae9d 	bne.w	800497c <HAL_GPIO_Init+0x10>
  }
}
 8004c42:	bf00      	nop
 8004c44:	bf00      	nop
 8004c46:	371c      	adds	r7, #28
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4e:	4770      	bx	lr
 8004c50:	40021000 	.word	0x40021000
 8004c54:	40010000 	.word	0x40010000
 8004c58:	48000400 	.word	0x48000400
 8004c5c:	48000800 	.word	0x48000800
 8004c60:	48000c00 	.word	0x48000c00
 8004c64:	48001000 	.word	0x48001000
 8004c68:	48001400 	.word	0x48001400
 8004c6c:	40010400 	.word	0x40010400

08004c70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b083      	sub	sp, #12
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
 8004c78:	460b      	mov	r3, r1
 8004c7a:	807b      	strh	r3, [r7, #2]
 8004c7c:	4613      	mov	r3, r2
 8004c7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004c80:	787b      	ldrb	r3, [r7, #1]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d003      	beq.n	8004c8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004c86:	887a      	ldrh	r2, [r7, #2]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004c8c:	e002      	b.n	8004c94 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004c8e:	887a      	ldrh	r2, [r7, #2]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004c94:	bf00      	nop
 8004c96:	370c      	adds	r7, #12
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr

08004ca0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b082      	sub	sp, #8
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004caa:	4b08      	ldr	r3, [pc, #32]	; (8004ccc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004cac:	695a      	ldr	r2, [r3, #20]
 8004cae:	88fb      	ldrh	r3, [r7, #6]
 8004cb0:	4013      	ands	r3, r2
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d006      	beq.n	8004cc4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004cb6:	4a05      	ldr	r2, [pc, #20]	; (8004ccc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004cb8:	88fb      	ldrh	r3, [r7, #6]
 8004cba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004cbc:	88fb      	ldrh	r3, [r7, #6]
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f000 f806 	bl	8004cd0 <HAL_GPIO_EXTI_Callback>
  }
}
 8004cc4:	bf00      	nop
 8004cc6:	3708      	adds	r7, #8
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}
 8004ccc:	40010400 	.word	0x40010400

08004cd0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b083      	sub	sp, #12
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004cda:	bf00      	nop
 8004cdc:	370c      	adds	r7, #12
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce4:	4770      	bx	lr
	...

08004ce8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b085      	sub	sp, #20
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d141      	bne.n	8004d7a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004cf6:	4b4b      	ldr	r3, [pc, #300]	; (8004e24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004cfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d02:	d131      	bne.n	8004d68 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004d04:	4b47      	ldr	r3, [pc, #284]	; (8004e24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d0a:	4a46      	ldr	r2, [pc, #280]	; (8004e24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d10:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004d14:	4b43      	ldr	r3, [pc, #268]	; (8004e24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004d1c:	4a41      	ldr	r2, [pc, #260]	; (8004e24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d22:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004d24:	4b40      	ldr	r3, [pc, #256]	; (8004e28 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	2232      	movs	r2, #50	; 0x32
 8004d2a:	fb02 f303 	mul.w	r3, r2, r3
 8004d2e:	4a3f      	ldr	r2, [pc, #252]	; (8004e2c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004d30:	fba2 2303 	umull	r2, r3, r2, r3
 8004d34:	0c9b      	lsrs	r3, r3, #18
 8004d36:	3301      	adds	r3, #1
 8004d38:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004d3a:	e002      	b.n	8004d42 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	3b01      	subs	r3, #1
 8004d40:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004d42:	4b38      	ldr	r3, [pc, #224]	; (8004e24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d44:	695b      	ldr	r3, [r3, #20]
 8004d46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d4e:	d102      	bne.n	8004d56 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d1f2      	bne.n	8004d3c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004d56:	4b33      	ldr	r3, [pc, #204]	; (8004e24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d58:	695b      	ldr	r3, [r3, #20]
 8004d5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d62:	d158      	bne.n	8004e16 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004d64:	2303      	movs	r3, #3
 8004d66:	e057      	b.n	8004e18 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004d68:	4b2e      	ldr	r3, [pc, #184]	; (8004e24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d6e:	4a2d      	ldr	r2, [pc, #180]	; (8004e24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d74:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004d78:	e04d      	b.n	8004e16 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d80:	d141      	bne.n	8004e06 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004d82:	4b28      	ldr	r3, [pc, #160]	; (8004e24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004d8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d8e:	d131      	bne.n	8004df4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004d90:	4b24      	ldr	r3, [pc, #144]	; (8004e24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d96:	4a23      	ldr	r2, [pc, #140]	; (8004e24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d9c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004da0:	4b20      	ldr	r3, [pc, #128]	; (8004e24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004da8:	4a1e      	ldr	r2, [pc, #120]	; (8004e24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004daa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004dae:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004db0:	4b1d      	ldr	r3, [pc, #116]	; (8004e28 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	2232      	movs	r2, #50	; 0x32
 8004db6:	fb02 f303 	mul.w	r3, r2, r3
 8004dba:	4a1c      	ldr	r2, [pc, #112]	; (8004e2c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004dbc:	fba2 2303 	umull	r2, r3, r2, r3
 8004dc0:	0c9b      	lsrs	r3, r3, #18
 8004dc2:	3301      	adds	r3, #1
 8004dc4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004dc6:	e002      	b.n	8004dce <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	3b01      	subs	r3, #1
 8004dcc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004dce:	4b15      	ldr	r3, [pc, #84]	; (8004e24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dd0:	695b      	ldr	r3, [r3, #20]
 8004dd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dda:	d102      	bne.n	8004de2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d1f2      	bne.n	8004dc8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004de2:	4b10      	ldr	r3, [pc, #64]	; (8004e24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004de4:	695b      	ldr	r3, [r3, #20]
 8004de6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dee:	d112      	bne.n	8004e16 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004df0:	2303      	movs	r3, #3
 8004df2:	e011      	b.n	8004e18 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004df4:	4b0b      	ldr	r3, [pc, #44]	; (8004e24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004df6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004dfa:	4a0a      	ldr	r2, [pc, #40]	; (8004e24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e00:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004e04:	e007      	b.n	8004e16 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004e06:	4b07      	ldr	r3, [pc, #28]	; (8004e24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004e0e:	4a05      	ldr	r2, [pc, #20]	; (8004e24 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e10:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004e14:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004e16:	2300      	movs	r3, #0
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3714      	adds	r7, #20
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e22:	4770      	bx	lr
 8004e24:	40007000 	.word	0x40007000
 8004e28:	20000000 	.word	0x20000000
 8004e2c:	431bde83 	.word	0x431bde83

08004e30 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004e30:	b480      	push	{r7}
 8004e32:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004e34:	4b05      	ldr	r3, [pc, #20]	; (8004e4c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	4a04      	ldr	r2, [pc, #16]	; (8004e4c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004e3a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e3e:	6093      	str	r3, [r2, #8]
}
 8004e40:	bf00      	nop
 8004e42:	46bd      	mov	sp, r7
 8004e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e48:	4770      	bx	lr
 8004e4a:	bf00      	nop
 8004e4c:	40007000 	.word	0x40007000

08004e50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b088      	sub	sp, #32
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d101      	bne.n	8004e62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	e306      	b.n	8005470 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f003 0301 	and.w	r3, r3, #1
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d075      	beq.n	8004f5a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e6e:	4b97      	ldr	r3, [pc, #604]	; (80050cc <HAL_RCC_OscConfig+0x27c>)
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	f003 030c 	and.w	r3, r3, #12
 8004e76:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e78:	4b94      	ldr	r3, [pc, #592]	; (80050cc <HAL_RCC_OscConfig+0x27c>)
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	f003 0303 	and.w	r3, r3, #3
 8004e80:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004e82:	69bb      	ldr	r3, [r7, #24]
 8004e84:	2b0c      	cmp	r3, #12
 8004e86:	d102      	bne.n	8004e8e <HAL_RCC_OscConfig+0x3e>
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	2b03      	cmp	r3, #3
 8004e8c:	d002      	beq.n	8004e94 <HAL_RCC_OscConfig+0x44>
 8004e8e:	69bb      	ldr	r3, [r7, #24]
 8004e90:	2b08      	cmp	r3, #8
 8004e92:	d10b      	bne.n	8004eac <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e94:	4b8d      	ldr	r3, [pc, #564]	; (80050cc <HAL_RCC_OscConfig+0x27c>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d05b      	beq.n	8004f58 <HAL_RCC_OscConfig+0x108>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d157      	bne.n	8004f58 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	e2e1      	b.n	8005470 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004eb4:	d106      	bne.n	8004ec4 <HAL_RCC_OscConfig+0x74>
 8004eb6:	4b85      	ldr	r3, [pc, #532]	; (80050cc <HAL_RCC_OscConfig+0x27c>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a84      	ldr	r2, [pc, #528]	; (80050cc <HAL_RCC_OscConfig+0x27c>)
 8004ebc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ec0:	6013      	str	r3, [r2, #0]
 8004ec2:	e01d      	b.n	8004f00 <HAL_RCC_OscConfig+0xb0>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ecc:	d10c      	bne.n	8004ee8 <HAL_RCC_OscConfig+0x98>
 8004ece:	4b7f      	ldr	r3, [pc, #508]	; (80050cc <HAL_RCC_OscConfig+0x27c>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a7e      	ldr	r2, [pc, #504]	; (80050cc <HAL_RCC_OscConfig+0x27c>)
 8004ed4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ed8:	6013      	str	r3, [r2, #0]
 8004eda:	4b7c      	ldr	r3, [pc, #496]	; (80050cc <HAL_RCC_OscConfig+0x27c>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a7b      	ldr	r2, [pc, #492]	; (80050cc <HAL_RCC_OscConfig+0x27c>)
 8004ee0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ee4:	6013      	str	r3, [r2, #0]
 8004ee6:	e00b      	b.n	8004f00 <HAL_RCC_OscConfig+0xb0>
 8004ee8:	4b78      	ldr	r3, [pc, #480]	; (80050cc <HAL_RCC_OscConfig+0x27c>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a77      	ldr	r2, [pc, #476]	; (80050cc <HAL_RCC_OscConfig+0x27c>)
 8004eee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ef2:	6013      	str	r3, [r2, #0]
 8004ef4:	4b75      	ldr	r3, [pc, #468]	; (80050cc <HAL_RCC_OscConfig+0x27c>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a74      	ldr	r2, [pc, #464]	; (80050cc <HAL_RCC_OscConfig+0x27c>)
 8004efa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004efe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d013      	beq.n	8004f30 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f08:	f7fd fcb4 	bl	8002874 <HAL_GetTick>
 8004f0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f0e:	e008      	b.n	8004f22 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f10:	f7fd fcb0 	bl	8002874 <HAL_GetTick>
 8004f14:	4602      	mov	r2, r0
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	1ad3      	subs	r3, r2, r3
 8004f1a:	2b64      	cmp	r3, #100	; 0x64
 8004f1c:	d901      	bls.n	8004f22 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004f1e:	2303      	movs	r3, #3
 8004f20:	e2a6      	b.n	8005470 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f22:	4b6a      	ldr	r3, [pc, #424]	; (80050cc <HAL_RCC_OscConfig+0x27c>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d0f0      	beq.n	8004f10 <HAL_RCC_OscConfig+0xc0>
 8004f2e:	e014      	b.n	8004f5a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f30:	f7fd fca0 	bl	8002874 <HAL_GetTick>
 8004f34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004f36:	e008      	b.n	8004f4a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f38:	f7fd fc9c 	bl	8002874 <HAL_GetTick>
 8004f3c:	4602      	mov	r2, r0
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	1ad3      	subs	r3, r2, r3
 8004f42:	2b64      	cmp	r3, #100	; 0x64
 8004f44:	d901      	bls.n	8004f4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004f46:	2303      	movs	r3, #3
 8004f48:	e292      	b.n	8005470 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004f4a:	4b60      	ldr	r3, [pc, #384]	; (80050cc <HAL_RCC_OscConfig+0x27c>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d1f0      	bne.n	8004f38 <HAL_RCC_OscConfig+0xe8>
 8004f56:	e000      	b.n	8004f5a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f003 0302 	and.w	r3, r3, #2
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d075      	beq.n	8005052 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f66:	4b59      	ldr	r3, [pc, #356]	; (80050cc <HAL_RCC_OscConfig+0x27c>)
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	f003 030c 	and.w	r3, r3, #12
 8004f6e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004f70:	4b56      	ldr	r3, [pc, #344]	; (80050cc <HAL_RCC_OscConfig+0x27c>)
 8004f72:	68db      	ldr	r3, [r3, #12]
 8004f74:	f003 0303 	and.w	r3, r3, #3
 8004f78:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004f7a:	69bb      	ldr	r3, [r7, #24]
 8004f7c:	2b0c      	cmp	r3, #12
 8004f7e:	d102      	bne.n	8004f86 <HAL_RCC_OscConfig+0x136>
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	2b02      	cmp	r3, #2
 8004f84:	d002      	beq.n	8004f8c <HAL_RCC_OscConfig+0x13c>
 8004f86:	69bb      	ldr	r3, [r7, #24]
 8004f88:	2b04      	cmp	r3, #4
 8004f8a:	d11f      	bne.n	8004fcc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f8c:	4b4f      	ldr	r3, [pc, #316]	; (80050cc <HAL_RCC_OscConfig+0x27c>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d005      	beq.n	8004fa4 <HAL_RCC_OscConfig+0x154>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d101      	bne.n	8004fa4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	e265      	b.n	8005470 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fa4:	4b49      	ldr	r3, [pc, #292]	; (80050cc <HAL_RCC_OscConfig+0x27c>)
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	691b      	ldr	r3, [r3, #16]
 8004fb0:	061b      	lsls	r3, r3, #24
 8004fb2:	4946      	ldr	r1, [pc, #280]	; (80050cc <HAL_RCC_OscConfig+0x27c>)
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004fb8:	4b45      	ldr	r3, [pc, #276]	; (80050d0 <HAL_RCC_OscConfig+0x280>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f7fc fbb3 	bl	8001728 <HAL_InitTick>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d043      	beq.n	8005050 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	e251      	b.n	8005470 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	68db      	ldr	r3, [r3, #12]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d023      	beq.n	800501c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004fd4:	4b3d      	ldr	r3, [pc, #244]	; (80050cc <HAL_RCC_OscConfig+0x27c>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a3c      	ldr	r2, [pc, #240]	; (80050cc <HAL_RCC_OscConfig+0x27c>)
 8004fda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fe0:	f7fd fc48 	bl	8002874 <HAL_GetTick>
 8004fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004fe6:	e008      	b.n	8004ffa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004fe8:	f7fd fc44 	bl	8002874 <HAL_GetTick>
 8004fec:	4602      	mov	r2, r0
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	1ad3      	subs	r3, r2, r3
 8004ff2:	2b02      	cmp	r3, #2
 8004ff4:	d901      	bls.n	8004ffa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004ff6:	2303      	movs	r3, #3
 8004ff8:	e23a      	b.n	8005470 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ffa:	4b34      	ldr	r3, [pc, #208]	; (80050cc <HAL_RCC_OscConfig+0x27c>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005002:	2b00      	cmp	r3, #0
 8005004:	d0f0      	beq.n	8004fe8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005006:	4b31      	ldr	r3, [pc, #196]	; (80050cc <HAL_RCC_OscConfig+0x27c>)
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	691b      	ldr	r3, [r3, #16]
 8005012:	061b      	lsls	r3, r3, #24
 8005014:	492d      	ldr	r1, [pc, #180]	; (80050cc <HAL_RCC_OscConfig+0x27c>)
 8005016:	4313      	orrs	r3, r2
 8005018:	604b      	str	r3, [r1, #4]
 800501a:	e01a      	b.n	8005052 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800501c:	4b2b      	ldr	r3, [pc, #172]	; (80050cc <HAL_RCC_OscConfig+0x27c>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a2a      	ldr	r2, [pc, #168]	; (80050cc <HAL_RCC_OscConfig+0x27c>)
 8005022:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005026:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005028:	f7fd fc24 	bl	8002874 <HAL_GetTick>
 800502c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800502e:	e008      	b.n	8005042 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005030:	f7fd fc20 	bl	8002874 <HAL_GetTick>
 8005034:	4602      	mov	r2, r0
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	1ad3      	subs	r3, r2, r3
 800503a:	2b02      	cmp	r3, #2
 800503c:	d901      	bls.n	8005042 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800503e:	2303      	movs	r3, #3
 8005040:	e216      	b.n	8005470 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005042:	4b22      	ldr	r3, [pc, #136]	; (80050cc <HAL_RCC_OscConfig+0x27c>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800504a:	2b00      	cmp	r3, #0
 800504c:	d1f0      	bne.n	8005030 <HAL_RCC_OscConfig+0x1e0>
 800504e:	e000      	b.n	8005052 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005050:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f003 0308 	and.w	r3, r3, #8
 800505a:	2b00      	cmp	r3, #0
 800505c:	d041      	beq.n	80050e2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	695b      	ldr	r3, [r3, #20]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d01c      	beq.n	80050a0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005066:	4b19      	ldr	r3, [pc, #100]	; (80050cc <HAL_RCC_OscConfig+0x27c>)
 8005068:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800506c:	4a17      	ldr	r2, [pc, #92]	; (80050cc <HAL_RCC_OscConfig+0x27c>)
 800506e:	f043 0301 	orr.w	r3, r3, #1
 8005072:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005076:	f7fd fbfd 	bl	8002874 <HAL_GetTick>
 800507a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800507c:	e008      	b.n	8005090 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800507e:	f7fd fbf9 	bl	8002874 <HAL_GetTick>
 8005082:	4602      	mov	r2, r0
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	1ad3      	subs	r3, r2, r3
 8005088:	2b02      	cmp	r3, #2
 800508a:	d901      	bls.n	8005090 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800508c:	2303      	movs	r3, #3
 800508e:	e1ef      	b.n	8005470 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005090:	4b0e      	ldr	r3, [pc, #56]	; (80050cc <HAL_RCC_OscConfig+0x27c>)
 8005092:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005096:	f003 0302 	and.w	r3, r3, #2
 800509a:	2b00      	cmp	r3, #0
 800509c:	d0ef      	beq.n	800507e <HAL_RCC_OscConfig+0x22e>
 800509e:	e020      	b.n	80050e2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80050a0:	4b0a      	ldr	r3, [pc, #40]	; (80050cc <HAL_RCC_OscConfig+0x27c>)
 80050a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80050a6:	4a09      	ldr	r2, [pc, #36]	; (80050cc <HAL_RCC_OscConfig+0x27c>)
 80050a8:	f023 0301 	bic.w	r3, r3, #1
 80050ac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050b0:	f7fd fbe0 	bl	8002874 <HAL_GetTick>
 80050b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80050b6:	e00d      	b.n	80050d4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050b8:	f7fd fbdc 	bl	8002874 <HAL_GetTick>
 80050bc:	4602      	mov	r2, r0
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	1ad3      	subs	r3, r2, r3
 80050c2:	2b02      	cmp	r3, #2
 80050c4:	d906      	bls.n	80050d4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80050c6:	2303      	movs	r3, #3
 80050c8:	e1d2      	b.n	8005470 <HAL_RCC_OscConfig+0x620>
 80050ca:	bf00      	nop
 80050cc:	40021000 	.word	0x40021000
 80050d0:	200000a8 	.word	0x200000a8
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80050d4:	4b8c      	ldr	r3, [pc, #560]	; (8005308 <HAL_RCC_OscConfig+0x4b8>)
 80050d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80050da:	f003 0302 	and.w	r3, r3, #2
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d1ea      	bne.n	80050b8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f003 0304 	and.w	r3, r3, #4
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	f000 80a6 	beq.w	800523c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050f0:	2300      	movs	r3, #0
 80050f2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80050f4:	4b84      	ldr	r3, [pc, #528]	; (8005308 <HAL_RCC_OscConfig+0x4b8>)
 80050f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d101      	bne.n	8005104 <HAL_RCC_OscConfig+0x2b4>
 8005100:	2301      	movs	r3, #1
 8005102:	e000      	b.n	8005106 <HAL_RCC_OscConfig+0x2b6>
 8005104:	2300      	movs	r3, #0
 8005106:	2b00      	cmp	r3, #0
 8005108:	d00d      	beq.n	8005126 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800510a:	4b7f      	ldr	r3, [pc, #508]	; (8005308 <HAL_RCC_OscConfig+0x4b8>)
 800510c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800510e:	4a7e      	ldr	r2, [pc, #504]	; (8005308 <HAL_RCC_OscConfig+0x4b8>)
 8005110:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005114:	6593      	str	r3, [r2, #88]	; 0x58
 8005116:	4b7c      	ldr	r3, [pc, #496]	; (8005308 <HAL_RCC_OscConfig+0x4b8>)
 8005118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800511a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800511e:	60fb      	str	r3, [r7, #12]
 8005120:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005122:	2301      	movs	r3, #1
 8005124:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005126:	4b79      	ldr	r3, [pc, #484]	; (800530c <HAL_RCC_OscConfig+0x4bc>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800512e:	2b00      	cmp	r3, #0
 8005130:	d118      	bne.n	8005164 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005132:	4b76      	ldr	r3, [pc, #472]	; (800530c <HAL_RCC_OscConfig+0x4bc>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a75      	ldr	r2, [pc, #468]	; (800530c <HAL_RCC_OscConfig+0x4bc>)
 8005138:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800513c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800513e:	f7fd fb99 	bl	8002874 <HAL_GetTick>
 8005142:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005144:	e008      	b.n	8005158 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005146:	f7fd fb95 	bl	8002874 <HAL_GetTick>
 800514a:	4602      	mov	r2, r0
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	1ad3      	subs	r3, r2, r3
 8005150:	2b02      	cmp	r3, #2
 8005152:	d901      	bls.n	8005158 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005154:	2303      	movs	r3, #3
 8005156:	e18b      	b.n	8005470 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005158:	4b6c      	ldr	r3, [pc, #432]	; (800530c <HAL_RCC_OscConfig+0x4bc>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005160:	2b00      	cmp	r3, #0
 8005162:	d0f0      	beq.n	8005146 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	689b      	ldr	r3, [r3, #8]
 8005168:	2b01      	cmp	r3, #1
 800516a:	d108      	bne.n	800517e <HAL_RCC_OscConfig+0x32e>
 800516c:	4b66      	ldr	r3, [pc, #408]	; (8005308 <HAL_RCC_OscConfig+0x4b8>)
 800516e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005172:	4a65      	ldr	r2, [pc, #404]	; (8005308 <HAL_RCC_OscConfig+0x4b8>)
 8005174:	f043 0301 	orr.w	r3, r3, #1
 8005178:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800517c:	e024      	b.n	80051c8 <HAL_RCC_OscConfig+0x378>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	2b05      	cmp	r3, #5
 8005184:	d110      	bne.n	80051a8 <HAL_RCC_OscConfig+0x358>
 8005186:	4b60      	ldr	r3, [pc, #384]	; (8005308 <HAL_RCC_OscConfig+0x4b8>)
 8005188:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800518c:	4a5e      	ldr	r2, [pc, #376]	; (8005308 <HAL_RCC_OscConfig+0x4b8>)
 800518e:	f043 0304 	orr.w	r3, r3, #4
 8005192:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005196:	4b5c      	ldr	r3, [pc, #368]	; (8005308 <HAL_RCC_OscConfig+0x4b8>)
 8005198:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800519c:	4a5a      	ldr	r2, [pc, #360]	; (8005308 <HAL_RCC_OscConfig+0x4b8>)
 800519e:	f043 0301 	orr.w	r3, r3, #1
 80051a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80051a6:	e00f      	b.n	80051c8 <HAL_RCC_OscConfig+0x378>
 80051a8:	4b57      	ldr	r3, [pc, #348]	; (8005308 <HAL_RCC_OscConfig+0x4b8>)
 80051aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051ae:	4a56      	ldr	r2, [pc, #344]	; (8005308 <HAL_RCC_OscConfig+0x4b8>)
 80051b0:	f023 0301 	bic.w	r3, r3, #1
 80051b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80051b8:	4b53      	ldr	r3, [pc, #332]	; (8005308 <HAL_RCC_OscConfig+0x4b8>)
 80051ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051be:	4a52      	ldr	r2, [pc, #328]	; (8005308 <HAL_RCC_OscConfig+0x4b8>)
 80051c0:	f023 0304 	bic.w	r3, r3, #4
 80051c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d016      	beq.n	80051fe <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051d0:	f7fd fb50 	bl	8002874 <HAL_GetTick>
 80051d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80051d6:	e00a      	b.n	80051ee <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051d8:	f7fd fb4c 	bl	8002874 <HAL_GetTick>
 80051dc:	4602      	mov	r2, r0
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	1ad3      	subs	r3, r2, r3
 80051e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d901      	bls.n	80051ee <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80051ea:	2303      	movs	r3, #3
 80051ec:	e140      	b.n	8005470 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80051ee:	4b46      	ldr	r3, [pc, #280]	; (8005308 <HAL_RCC_OscConfig+0x4b8>)
 80051f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051f4:	f003 0302 	and.w	r3, r3, #2
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d0ed      	beq.n	80051d8 <HAL_RCC_OscConfig+0x388>
 80051fc:	e015      	b.n	800522a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051fe:	f7fd fb39 	bl	8002874 <HAL_GetTick>
 8005202:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005204:	e00a      	b.n	800521c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005206:	f7fd fb35 	bl	8002874 <HAL_GetTick>
 800520a:	4602      	mov	r2, r0
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	1ad3      	subs	r3, r2, r3
 8005210:	f241 3288 	movw	r2, #5000	; 0x1388
 8005214:	4293      	cmp	r3, r2
 8005216:	d901      	bls.n	800521c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005218:	2303      	movs	r3, #3
 800521a:	e129      	b.n	8005470 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800521c:	4b3a      	ldr	r3, [pc, #232]	; (8005308 <HAL_RCC_OscConfig+0x4b8>)
 800521e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005222:	f003 0302 	and.w	r3, r3, #2
 8005226:	2b00      	cmp	r3, #0
 8005228:	d1ed      	bne.n	8005206 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800522a:	7ffb      	ldrb	r3, [r7, #31]
 800522c:	2b01      	cmp	r3, #1
 800522e:	d105      	bne.n	800523c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005230:	4b35      	ldr	r3, [pc, #212]	; (8005308 <HAL_RCC_OscConfig+0x4b8>)
 8005232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005234:	4a34      	ldr	r2, [pc, #208]	; (8005308 <HAL_RCC_OscConfig+0x4b8>)
 8005236:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800523a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f003 0320 	and.w	r3, r3, #32
 8005244:	2b00      	cmp	r3, #0
 8005246:	d03c      	beq.n	80052c2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	699b      	ldr	r3, [r3, #24]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d01c      	beq.n	800528a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005250:	4b2d      	ldr	r3, [pc, #180]	; (8005308 <HAL_RCC_OscConfig+0x4b8>)
 8005252:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005256:	4a2c      	ldr	r2, [pc, #176]	; (8005308 <HAL_RCC_OscConfig+0x4b8>)
 8005258:	f043 0301 	orr.w	r3, r3, #1
 800525c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005260:	f7fd fb08 	bl	8002874 <HAL_GetTick>
 8005264:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005266:	e008      	b.n	800527a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005268:	f7fd fb04 	bl	8002874 <HAL_GetTick>
 800526c:	4602      	mov	r2, r0
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	1ad3      	subs	r3, r2, r3
 8005272:	2b02      	cmp	r3, #2
 8005274:	d901      	bls.n	800527a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005276:	2303      	movs	r3, #3
 8005278:	e0fa      	b.n	8005470 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800527a:	4b23      	ldr	r3, [pc, #140]	; (8005308 <HAL_RCC_OscConfig+0x4b8>)
 800527c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005280:	f003 0302 	and.w	r3, r3, #2
 8005284:	2b00      	cmp	r3, #0
 8005286:	d0ef      	beq.n	8005268 <HAL_RCC_OscConfig+0x418>
 8005288:	e01b      	b.n	80052c2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800528a:	4b1f      	ldr	r3, [pc, #124]	; (8005308 <HAL_RCC_OscConfig+0x4b8>)
 800528c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005290:	4a1d      	ldr	r2, [pc, #116]	; (8005308 <HAL_RCC_OscConfig+0x4b8>)
 8005292:	f023 0301 	bic.w	r3, r3, #1
 8005296:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800529a:	f7fd faeb 	bl	8002874 <HAL_GetTick>
 800529e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80052a0:	e008      	b.n	80052b4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80052a2:	f7fd fae7 	bl	8002874 <HAL_GetTick>
 80052a6:	4602      	mov	r2, r0
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	1ad3      	subs	r3, r2, r3
 80052ac:	2b02      	cmp	r3, #2
 80052ae:	d901      	bls.n	80052b4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80052b0:	2303      	movs	r3, #3
 80052b2:	e0dd      	b.n	8005470 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80052b4:	4b14      	ldr	r3, [pc, #80]	; (8005308 <HAL_RCC_OscConfig+0x4b8>)
 80052b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80052ba:	f003 0302 	and.w	r3, r3, #2
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d1ef      	bne.n	80052a2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	69db      	ldr	r3, [r3, #28]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	f000 80d1 	beq.w	800546e <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80052cc:	4b0e      	ldr	r3, [pc, #56]	; (8005308 <HAL_RCC_OscConfig+0x4b8>)
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	f003 030c 	and.w	r3, r3, #12
 80052d4:	2b0c      	cmp	r3, #12
 80052d6:	f000 808b 	beq.w	80053f0 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	69db      	ldr	r3, [r3, #28]
 80052de:	2b02      	cmp	r3, #2
 80052e0:	d15e      	bne.n	80053a0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052e2:	4b09      	ldr	r3, [pc, #36]	; (8005308 <HAL_RCC_OscConfig+0x4b8>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a08      	ldr	r2, [pc, #32]	; (8005308 <HAL_RCC_OscConfig+0x4b8>)
 80052e8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80052ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052ee:	f7fd fac1 	bl	8002874 <HAL_GetTick>
 80052f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80052f4:	e00c      	b.n	8005310 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052f6:	f7fd fabd 	bl	8002874 <HAL_GetTick>
 80052fa:	4602      	mov	r2, r0
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	1ad3      	subs	r3, r2, r3
 8005300:	2b02      	cmp	r3, #2
 8005302:	d905      	bls.n	8005310 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005304:	2303      	movs	r3, #3
 8005306:	e0b3      	b.n	8005470 <HAL_RCC_OscConfig+0x620>
 8005308:	40021000 	.word	0x40021000
 800530c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005310:	4b59      	ldr	r3, [pc, #356]	; (8005478 <HAL_RCC_OscConfig+0x628>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005318:	2b00      	cmp	r3, #0
 800531a:	d1ec      	bne.n	80052f6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800531c:	4b56      	ldr	r3, [pc, #344]	; (8005478 <HAL_RCC_OscConfig+0x628>)
 800531e:	68da      	ldr	r2, [r3, #12]
 8005320:	4b56      	ldr	r3, [pc, #344]	; (800547c <HAL_RCC_OscConfig+0x62c>)
 8005322:	4013      	ands	r3, r2
 8005324:	687a      	ldr	r2, [r7, #4]
 8005326:	6a11      	ldr	r1, [r2, #32]
 8005328:	687a      	ldr	r2, [r7, #4]
 800532a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800532c:	3a01      	subs	r2, #1
 800532e:	0112      	lsls	r2, r2, #4
 8005330:	4311      	orrs	r1, r2
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005336:	0212      	lsls	r2, r2, #8
 8005338:	4311      	orrs	r1, r2
 800533a:	687a      	ldr	r2, [r7, #4]
 800533c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800533e:	0852      	lsrs	r2, r2, #1
 8005340:	3a01      	subs	r2, #1
 8005342:	0552      	lsls	r2, r2, #21
 8005344:	4311      	orrs	r1, r2
 8005346:	687a      	ldr	r2, [r7, #4]
 8005348:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800534a:	0852      	lsrs	r2, r2, #1
 800534c:	3a01      	subs	r2, #1
 800534e:	0652      	lsls	r2, r2, #25
 8005350:	4311      	orrs	r1, r2
 8005352:	687a      	ldr	r2, [r7, #4]
 8005354:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005356:	06d2      	lsls	r2, r2, #27
 8005358:	430a      	orrs	r2, r1
 800535a:	4947      	ldr	r1, [pc, #284]	; (8005478 <HAL_RCC_OscConfig+0x628>)
 800535c:	4313      	orrs	r3, r2
 800535e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005360:	4b45      	ldr	r3, [pc, #276]	; (8005478 <HAL_RCC_OscConfig+0x628>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a44      	ldr	r2, [pc, #272]	; (8005478 <HAL_RCC_OscConfig+0x628>)
 8005366:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800536a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800536c:	4b42      	ldr	r3, [pc, #264]	; (8005478 <HAL_RCC_OscConfig+0x628>)
 800536e:	68db      	ldr	r3, [r3, #12]
 8005370:	4a41      	ldr	r2, [pc, #260]	; (8005478 <HAL_RCC_OscConfig+0x628>)
 8005372:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005376:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005378:	f7fd fa7c 	bl	8002874 <HAL_GetTick>
 800537c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800537e:	e008      	b.n	8005392 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005380:	f7fd fa78 	bl	8002874 <HAL_GetTick>
 8005384:	4602      	mov	r2, r0
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	1ad3      	subs	r3, r2, r3
 800538a:	2b02      	cmp	r3, #2
 800538c:	d901      	bls.n	8005392 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800538e:	2303      	movs	r3, #3
 8005390:	e06e      	b.n	8005470 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005392:	4b39      	ldr	r3, [pc, #228]	; (8005478 <HAL_RCC_OscConfig+0x628>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800539a:	2b00      	cmp	r3, #0
 800539c:	d0f0      	beq.n	8005380 <HAL_RCC_OscConfig+0x530>
 800539e:	e066      	b.n	800546e <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053a0:	4b35      	ldr	r3, [pc, #212]	; (8005478 <HAL_RCC_OscConfig+0x628>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a34      	ldr	r2, [pc, #208]	; (8005478 <HAL_RCC_OscConfig+0x628>)
 80053a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80053aa:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80053ac:	4b32      	ldr	r3, [pc, #200]	; (8005478 <HAL_RCC_OscConfig+0x628>)
 80053ae:	68db      	ldr	r3, [r3, #12]
 80053b0:	4a31      	ldr	r2, [pc, #196]	; (8005478 <HAL_RCC_OscConfig+0x628>)
 80053b2:	f023 0303 	bic.w	r3, r3, #3
 80053b6:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80053b8:	4b2f      	ldr	r3, [pc, #188]	; (8005478 <HAL_RCC_OscConfig+0x628>)
 80053ba:	68db      	ldr	r3, [r3, #12]
 80053bc:	4a2e      	ldr	r2, [pc, #184]	; (8005478 <HAL_RCC_OscConfig+0x628>)
 80053be:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80053c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053c6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053c8:	f7fd fa54 	bl	8002874 <HAL_GetTick>
 80053cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053ce:	e008      	b.n	80053e2 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053d0:	f7fd fa50 	bl	8002874 <HAL_GetTick>
 80053d4:	4602      	mov	r2, r0
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	1ad3      	subs	r3, r2, r3
 80053da:	2b02      	cmp	r3, #2
 80053dc:	d901      	bls.n	80053e2 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80053de:	2303      	movs	r3, #3
 80053e0:	e046      	b.n	8005470 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053e2:	4b25      	ldr	r3, [pc, #148]	; (8005478 <HAL_RCC_OscConfig+0x628>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d1f0      	bne.n	80053d0 <HAL_RCC_OscConfig+0x580>
 80053ee:	e03e      	b.n	800546e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	69db      	ldr	r3, [r3, #28]
 80053f4:	2b01      	cmp	r3, #1
 80053f6:	d101      	bne.n	80053fc <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80053f8:	2301      	movs	r3, #1
 80053fa:	e039      	b.n	8005470 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80053fc:	4b1e      	ldr	r3, [pc, #120]	; (8005478 <HAL_RCC_OscConfig+0x628>)
 80053fe:	68db      	ldr	r3, [r3, #12]
 8005400:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	f003 0203 	and.w	r2, r3, #3
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6a1b      	ldr	r3, [r3, #32]
 800540c:	429a      	cmp	r2, r3
 800540e:	d12c      	bne.n	800546a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800541a:	3b01      	subs	r3, #1
 800541c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800541e:	429a      	cmp	r2, r3
 8005420:	d123      	bne.n	800546a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800542c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800542e:	429a      	cmp	r2, r3
 8005430:	d11b      	bne.n	800546a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800543c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800543e:	429a      	cmp	r2, r3
 8005440:	d113      	bne.n	800546a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800544c:	085b      	lsrs	r3, r3, #1
 800544e:	3b01      	subs	r3, #1
 8005450:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005452:	429a      	cmp	r2, r3
 8005454:	d109      	bne.n	800546a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005460:	085b      	lsrs	r3, r3, #1
 8005462:	3b01      	subs	r3, #1
 8005464:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005466:	429a      	cmp	r2, r3
 8005468:	d001      	beq.n	800546e <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800546a:	2301      	movs	r3, #1
 800546c:	e000      	b.n	8005470 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800546e:	2300      	movs	r3, #0
}
 8005470:	4618      	mov	r0, r3
 8005472:	3720      	adds	r7, #32
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}
 8005478:	40021000 	.word	0x40021000
 800547c:	019f800c 	.word	0x019f800c

08005480 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b086      	sub	sp, #24
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
 8005488:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800548a:	2300      	movs	r3, #0
 800548c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d101      	bne.n	8005498 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005494:	2301      	movs	r3, #1
 8005496:	e11e      	b.n	80056d6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005498:	4b91      	ldr	r3, [pc, #580]	; (80056e0 <HAL_RCC_ClockConfig+0x260>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f003 030f 	and.w	r3, r3, #15
 80054a0:	683a      	ldr	r2, [r7, #0]
 80054a2:	429a      	cmp	r2, r3
 80054a4:	d910      	bls.n	80054c8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054a6:	4b8e      	ldr	r3, [pc, #568]	; (80056e0 <HAL_RCC_ClockConfig+0x260>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f023 020f 	bic.w	r2, r3, #15
 80054ae:	498c      	ldr	r1, [pc, #560]	; (80056e0 <HAL_RCC_ClockConfig+0x260>)
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	4313      	orrs	r3, r2
 80054b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054b6:	4b8a      	ldr	r3, [pc, #552]	; (80056e0 <HAL_RCC_ClockConfig+0x260>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f003 030f 	and.w	r3, r3, #15
 80054be:	683a      	ldr	r2, [r7, #0]
 80054c0:	429a      	cmp	r2, r3
 80054c2:	d001      	beq.n	80054c8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
 80054c6:	e106      	b.n	80056d6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f003 0301 	and.w	r3, r3, #1
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d073      	beq.n	80055bc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	2b03      	cmp	r3, #3
 80054da:	d129      	bne.n	8005530 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80054dc:	4b81      	ldr	r3, [pc, #516]	; (80056e4 <HAL_RCC_ClockConfig+0x264>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d101      	bne.n	80054ec <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	e0f4      	b.n	80056d6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80054ec:	f000 f9d0 	bl	8005890 <RCC_GetSysClockFreqFromPLLSource>
 80054f0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	4a7c      	ldr	r2, [pc, #496]	; (80056e8 <HAL_RCC_ClockConfig+0x268>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d93f      	bls.n	800557a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80054fa:	4b7a      	ldr	r3, [pc, #488]	; (80056e4 <HAL_RCC_ClockConfig+0x264>)
 80054fc:	689b      	ldr	r3, [r3, #8]
 80054fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005502:	2b00      	cmp	r3, #0
 8005504:	d009      	beq.n	800551a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800550e:	2b00      	cmp	r3, #0
 8005510:	d033      	beq.n	800557a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005516:	2b00      	cmp	r3, #0
 8005518:	d12f      	bne.n	800557a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800551a:	4b72      	ldr	r3, [pc, #456]	; (80056e4 <HAL_RCC_ClockConfig+0x264>)
 800551c:	689b      	ldr	r3, [r3, #8]
 800551e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005522:	4a70      	ldr	r2, [pc, #448]	; (80056e4 <HAL_RCC_ClockConfig+0x264>)
 8005524:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005528:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800552a:	2380      	movs	r3, #128	; 0x80
 800552c:	617b      	str	r3, [r7, #20]
 800552e:	e024      	b.n	800557a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	2b02      	cmp	r3, #2
 8005536:	d107      	bne.n	8005548 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005538:	4b6a      	ldr	r3, [pc, #424]	; (80056e4 <HAL_RCC_ClockConfig+0x264>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005540:	2b00      	cmp	r3, #0
 8005542:	d109      	bne.n	8005558 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005544:	2301      	movs	r3, #1
 8005546:	e0c6      	b.n	80056d6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005548:	4b66      	ldr	r3, [pc, #408]	; (80056e4 <HAL_RCC_ClockConfig+0x264>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005550:	2b00      	cmp	r3, #0
 8005552:	d101      	bne.n	8005558 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005554:	2301      	movs	r3, #1
 8005556:	e0be      	b.n	80056d6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005558:	f000 f8ce 	bl	80056f8 <HAL_RCC_GetSysClockFreq>
 800555c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	4a61      	ldr	r2, [pc, #388]	; (80056e8 <HAL_RCC_ClockConfig+0x268>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d909      	bls.n	800557a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005566:	4b5f      	ldr	r3, [pc, #380]	; (80056e4 <HAL_RCC_ClockConfig+0x264>)
 8005568:	689b      	ldr	r3, [r3, #8]
 800556a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800556e:	4a5d      	ldr	r2, [pc, #372]	; (80056e4 <HAL_RCC_ClockConfig+0x264>)
 8005570:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005574:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005576:	2380      	movs	r3, #128	; 0x80
 8005578:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800557a:	4b5a      	ldr	r3, [pc, #360]	; (80056e4 <HAL_RCC_ClockConfig+0x264>)
 800557c:	689b      	ldr	r3, [r3, #8]
 800557e:	f023 0203 	bic.w	r2, r3, #3
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	4957      	ldr	r1, [pc, #348]	; (80056e4 <HAL_RCC_ClockConfig+0x264>)
 8005588:	4313      	orrs	r3, r2
 800558a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800558c:	f7fd f972 	bl	8002874 <HAL_GetTick>
 8005590:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005592:	e00a      	b.n	80055aa <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005594:	f7fd f96e 	bl	8002874 <HAL_GetTick>
 8005598:	4602      	mov	r2, r0
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	1ad3      	subs	r3, r2, r3
 800559e:	f241 3288 	movw	r2, #5000	; 0x1388
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d901      	bls.n	80055aa <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80055a6:	2303      	movs	r3, #3
 80055a8:	e095      	b.n	80056d6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055aa:	4b4e      	ldr	r3, [pc, #312]	; (80056e4 <HAL_RCC_ClockConfig+0x264>)
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	f003 020c 	and.w	r2, r3, #12
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	009b      	lsls	r3, r3, #2
 80055b8:	429a      	cmp	r2, r3
 80055ba:	d1eb      	bne.n	8005594 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f003 0302 	and.w	r3, r3, #2
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d023      	beq.n	8005610 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f003 0304 	and.w	r3, r3, #4
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d005      	beq.n	80055e0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80055d4:	4b43      	ldr	r3, [pc, #268]	; (80056e4 <HAL_RCC_ClockConfig+0x264>)
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	4a42      	ldr	r2, [pc, #264]	; (80056e4 <HAL_RCC_ClockConfig+0x264>)
 80055da:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80055de:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f003 0308 	and.w	r3, r3, #8
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d007      	beq.n	80055fc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80055ec:	4b3d      	ldr	r3, [pc, #244]	; (80056e4 <HAL_RCC_ClockConfig+0x264>)
 80055ee:	689b      	ldr	r3, [r3, #8]
 80055f0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80055f4:	4a3b      	ldr	r2, [pc, #236]	; (80056e4 <HAL_RCC_ClockConfig+0x264>)
 80055f6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80055fa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055fc:	4b39      	ldr	r3, [pc, #228]	; (80056e4 <HAL_RCC_ClockConfig+0x264>)
 80055fe:	689b      	ldr	r3, [r3, #8]
 8005600:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	4936      	ldr	r1, [pc, #216]	; (80056e4 <HAL_RCC_ClockConfig+0x264>)
 800560a:	4313      	orrs	r3, r2
 800560c:	608b      	str	r3, [r1, #8]
 800560e:	e008      	b.n	8005622 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	2b80      	cmp	r3, #128	; 0x80
 8005614:	d105      	bne.n	8005622 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005616:	4b33      	ldr	r3, [pc, #204]	; (80056e4 <HAL_RCC_ClockConfig+0x264>)
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	4a32      	ldr	r2, [pc, #200]	; (80056e4 <HAL_RCC_ClockConfig+0x264>)
 800561c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005620:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005622:	4b2f      	ldr	r3, [pc, #188]	; (80056e0 <HAL_RCC_ClockConfig+0x260>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f003 030f 	and.w	r3, r3, #15
 800562a:	683a      	ldr	r2, [r7, #0]
 800562c:	429a      	cmp	r2, r3
 800562e:	d21d      	bcs.n	800566c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005630:	4b2b      	ldr	r3, [pc, #172]	; (80056e0 <HAL_RCC_ClockConfig+0x260>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f023 020f 	bic.w	r2, r3, #15
 8005638:	4929      	ldr	r1, [pc, #164]	; (80056e0 <HAL_RCC_ClockConfig+0x260>)
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	4313      	orrs	r3, r2
 800563e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005640:	f7fd f918 	bl	8002874 <HAL_GetTick>
 8005644:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005646:	e00a      	b.n	800565e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005648:	f7fd f914 	bl	8002874 <HAL_GetTick>
 800564c:	4602      	mov	r2, r0
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	1ad3      	subs	r3, r2, r3
 8005652:	f241 3288 	movw	r2, #5000	; 0x1388
 8005656:	4293      	cmp	r3, r2
 8005658:	d901      	bls.n	800565e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800565a:	2303      	movs	r3, #3
 800565c:	e03b      	b.n	80056d6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800565e:	4b20      	ldr	r3, [pc, #128]	; (80056e0 <HAL_RCC_ClockConfig+0x260>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f003 030f 	and.w	r3, r3, #15
 8005666:	683a      	ldr	r2, [r7, #0]
 8005668:	429a      	cmp	r2, r3
 800566a:	d1ed      	bne.n	8005648 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f003 0304 	and.w	r3, r3, #4
 8005674:	2b00      	cmp	r3, #0
 8005676:	d008      	beq.n	800568a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005678:	4b1a      	ldr	r3, [pc, #104]	; (80056e4 <HAL_RCC_ClockConfig+0x264>)
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	68db      	ldr	r3, [r3, #12]
 8005684:	4917      	ldr	r1, [pc, #92]	; (80056e4 <HAL_RCC_ClockConfig+0x264>)
 8005686:	4313      	orrs	r3, r2
 8005688:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f003 0308 	and.w	r3, r3, #8
 8005692:	2b00      	cmp	r3, #0
 8005694:	d009      	beq.n	80056aa <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005696:	4b13      	ldr	r3, [pc, #76]	; (80056e4 <HAL_RCC_ClockConfig+0x264>)
 8005698:	689b      	ldr	r3, [r3, #8]
 800569a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	691b      	ldr	r3, [r3, #16]
 80056a2:	00db      	lsls	r3, r3, #3
 80056a4:	490f      	ldr	r1, [pc, #60]	; (80056e4 <HAL_RCC_ClockConfig+0x264>)
 80056a6:	4313      	orrs	r3, r2
 80056a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80056aa:	f000 f825 	bl	80056f8 <HAL_RCC_GetSysClockFreq>
 80056ae:	4602      	mov	r2, r0
 80056b0:	4b0c      	ldr	r3, [pc, #48]	; (80056e4 <HAL_RCC_ClockConfig+0x264>)
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	091b      	lsrs	r3, r3, #4
 80056b6:	f003 030f 	and.w	r3, r3, #15
 80056ba:	490c      	ldr	r1, [pc, #48]	; (80056ec <HAL_RCC_ClockConfig+0x26c>)
 80056bc:	5ccb      	ldrb	r3, [r1, r3]
 80056be:	f003 031f 	and.w	r3, r3, #31
 80056c2:	fa22 f303 	lsr.w	r3, r2, r3
 80056c6:	4a0a      	ldr	r2, [pc, #40]	; (80056f0 <HAL_RCC_ClockConfig+0x270>)
 80056c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80056ca:	4b0a      	ldr	r3, [pc, #40]	; (80056f4 <HAL_RCC_ClockConfig+0x274>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4618      	mov	r0, r3
 80056d0:	f7fc f82a 	bl	8001728 <HAL_InitTick>
 80056d4:	4603      	mov	r3, r0
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3718      	adds	r7, #24
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}
 80056de:	bf00      	nop
 80056e0:	40022000 	.word	0x40022000
 80056e4:	40021000 	.word	0x40021000
 80056e8:	04c4b400 	.word	0x04c4b400
 80056ec:	0800c9c8 	.word	0x0800c9c8
 80056f0:	20000000 	.word	0x20000000
 80056f4:	200000a8 	.word	0x200000a8

080056f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b087      	sub	sp, #28
 80056fc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80056fe:	4b2c      	ldr	r3, [pc, #176]	; (80057b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005700:	689b      	ldr	r3, [r3, #8]
 8005702:	f003 030c 	and.w	r3, r3, #12
 8005706:	2b04      	cmp	r3, #4
 8005708:	d102      	bne.n	8005710 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800570a:	4b2a      	ldr	r3, [pc, #168]	; (80057b4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800570c:	613b      	str	r3, [r7, #16]
 800570e:	e047      	b.n	80057a0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005710:	4b27      	ldr	r3, [pc, #156]	; (80057b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	f003 030c 	and.w	r3, r3, #12
 8005718:	2b08      	cmp	r3, #8
 800571a:	d102      	bne.n	8005722 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800571c:	4b26      	ldr	r3, [pc, #152]	; (80057b8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800571e:	613b      	str	r3, [r7, #16]
 8005720:	e03e      	b.n	80057a0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005722:	4b23      	ldr	r3, [pc, #140]	; (80057b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005724:	689b      	ldr	r3, [r3, #8]
 8005726:	f003 030c 	and.w	r3, r3, #12
 800572a:	2b0c      	cmp	r3, #12
 800572c:	d136      	bne.n	800579c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800572e:	4b20      	ldr	r3, [pc, #128]	; (80057b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005730:	68db      	ldr	r3, [r3, #12]
 8005732:	f003 0303 	and.w	r3, r3, #3
 8005736:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005738:	4b1d      	ldr	r3, [pc, #116]	; (80057b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800573a:	68db      	ldr	r3, [r3, #12]
 800573c:	091b      	lsrs	r3, r3, #4
 800573e:	f003 030f 	and.w	r3, r3, #15
 8005742:	3301      	adds	r3, #1
 8005744:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2b03      	cmp	r3, #3
 800574a:	d10c      	bne.n	8005766 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800574c:	4a1a      	ldr	r2, [pc, #104]	; (80057b8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	fbb2 f3f3 	udiv	r3, r2, r3
 8005754:	4a16      	ldr	r2, [pc, #88]	; (80057b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005756:	68d2      	ldr	r2, [r2, #12]
 8005758:	0a12      	lsrs	r2, r2, #8
 800575a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800575e:	fb02 f303 	mul.w	r3, r2, r3
 8005762:	617b      	str	r3, [r7, #20]
      break;
 8005764:	e00c      	b.n	8005780 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005766:	4a13      	ldr	r2, [pc, #76]	; (80057b4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	fbb2 f3f3 	udiv	r3, r2, r3
 800576e:	4a10      	ldr	r2, [pc, #64]	; (80057b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005770:	68d2      	ldr	r2, [r2, #12]
 8005772:	0a12      	lsrs	r2, r2, #8
 8005774:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005778:	fb02 f303 	mul.w	r3, r2, r3
 800577c:	617b      	str	r3, [r7, #20]
      break;
 800577e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005780:	4b0b      	ldr	r3, [pc, #44]	; (80057b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005782:	68db      	ldr	r3, [r3, #12]
 8005784:	0e5b      	lsrs	r3, r3, #25
 8005786:	f003 0303 	and.w	r3, r3, #3
 800578a:	3301      	adds	r3, #1
 800578c:	005b      	lsls	r3, r3, #1
 800578e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005790:	697a      	ldr	r2, [r7, #20]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	fbb2 f3f3 	udiv	r3, r2, r3
 8005798:	613b      	str	r3, [r7, #16]
 800579a:	e001      	b.n	80057a0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800579c:	2300      	movs	r3, #0
 800579e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80057a0:	693b      	ldr	r3, [r7, #16]
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	371c      	adds	r7, #28
 80057a6:	46bd      	mov	sp, r7
 80057a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ac:	4770      	bx	lr
 80057ae:	bf00      	nop
 80057b0:	40021000 	.word	0x40021000
 80057b4:	00f42400 	.word	0x00f42400
 80057b8:	016e3600 	.word	0x016e3600

080057bc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80057bc:	b480      	push	{r7}
 80057be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80057c0:	4b03      	ldr	r3, [pc, #12]	; (80057d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80057c2:	681b      	ldr	r3, [r3, #0]
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	46bd      	mov	sp, r7
 80057c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057cc:	4770      	bx	lr
 80057ce:	bf00      	nop
 80057d0:	20000000 	.word	0x20000000

080057d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80057d8:	f7ff fff0 	bl	80057bc <HAL_RCC_GetHCLKFreq>
 80057dc:	4602      	mov	r2, r0
 80057de:	4b06      	ldr	r3, [pc, #24]	; (80057f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80057e0:	689b      	ldr	r3, [r3, #8]
 80057e2:	0a1b      	lsrs	r3, r3, #8
 80057e4:	f003 0307 	and.w	r3, r3, #7
 80057e8:	4904      	ldr	r1, [pc, #16]	; (80057fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80057ea:	5ccb      	ldrb	r3, [r1, r3]
 80057ec:	f003 031f 	and.w	r3, r3, #31
 80057f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	bd80      	pop	{r7, pc}
 80057f8:	40021000 	.word	0x40021000
 80057fc:	0800c9d8 	.word	0x0800c9d8

08005800 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005804:	f7ff ffda 	bl	80057bc <HAL_RCC_GetHCLKFreq>
 8005808:	4602      	mov	r2, r0
 800580a:	4b06      	ldr	r3, [pc, #24]	; (8005824 <HAL_RCC_GetPCLK2Freq+0x24>)
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	0adb      	lsrs	r3, r3, #11
 8005810:	f003 0307 	and.w	r3, r3, #7
 8005814:	4904      	ldr	r1, [pc, #16]	; (8005828 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005816:	5ccb      	ldrb	r3, [r1, r3]
 8005818:	f003 031f 	and.w	r3, r3, #31
 800581c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005820:	4618      	mov	r0, r3
 8005822:	bd80      	pop	{r7, pc}
 8005824:	40021000 	.word	0x40021000
 8005828:	0800c9d8 	.word	0x0800c9d8

0800582c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800582c:	b480      	push	{r7}
 800582e:	b083      	sub	sp, #12
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
 8005834:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	220f      	movs	r2, #15
 800583a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800583c:	4b12      	ldr	r3, [pc, #72]	; (8005888 <HAL_RCC_GetClockConfig+0x5c>)
 800583e:	689b      	ldr	r3, [r3, #8]
 8005840:	f003 0203 	and.w	r2, r3, #3
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005848:	4b0f      	ldr	r3, [pc, #60]	; (8005888 <HAL_RCC_GetClockConfig+0x5c>)
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005854:	4b0c      	ldr	r3, [pc, #48]	; (8005888 <HAL_RCC_GetClockConfig+0x5c>)
 8005856:	689b      	ldr	r3, [r3, #8]
 8005858:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005860:	4b09      	ldr	r3, [pc, #36]	; (8005888 <HAL_RCC_GetClockConfig+0x5c>)
 8005862:	689b      	ldr	r3, [r3, #8]
 8005864:	08db      	lsrs	r3, r3, #3
 8005866:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800586e:	4b07      	ldr	r3, [pc, #28]	; (800588c <HAL_RCC_GetClockConfig+0x60>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f003 020f 	and.w	r2, r3, #15
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	601a      	str	r2, [r3, #0]
}
 800587a:	bf00      	nop
 800587c:	370c      	adds	r7, #12
 800587e:	46bd      	mov	sp, r7
 8005880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005884:	4770      	bx	lr
 8005886:	bf00      	nop
 8005888:	40021000 	.word	0x40021000
 800588c:	40022000 	.word	0x40022000

08005890 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005890:	b480      	push	{r7}
 8005892:	b087      	sub	sp, #28
 8005894:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005896:	4b1e      	ldr	r3, [pc, #120]	; (8005910 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005898:	68db      	ldr	r3, [r3, #12]
 800589a:	f003 0303 	and.w	r3, r3, #3
 800589e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80058a0:	4b1b      	ldr	r3, [pc, #108]	; (8005910 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80058a2:	68db      	ldr	r3, [r3, #12]
 80058a4:	091b      	lsrs	r3, r3, #4
 80058a6:	f003 030f 	and.w	r3, r3, #15
 80058aa:	3301      	adds	r3, #1
 80058ac:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	2b03      	cmp	r3, #3
 80058b2:	d10c      	bne.n	80058ce <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80058b4:	4a17      	ldr	r2, [pc, #92]	; (8005914 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80058bc:	4a14      	ldr	r2, [pc, #80]	; (8005910 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80058be:	68d2      	ldr	r2, [r2, #12]
 80058c0:	0a12      	lsrs	r2, r2, #8
 80058c2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80058c6:	fb02 f303 	mul.w	r3, r2, r3
 80058ca:	617b      	str	r3, [r7, #20]
    break;
 80058cc:	e00c      	b.n	80058e8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80058ce:	4a12      	ldr	r2, [pc, #72]	; (8005918 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80058d6:	4a0e      	ldr	r2, [pc, #56]	; (8005910 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80058d8:	68d2      	ldr	r2, [r2, #12]
 80058da:	0a12      	lsrs	r2, r2, #8
 80058dc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80058e0:	fb02 f303 	mul.w	r3, r2, r3
 80058e4:	617b      	str	r3, [r7, #20]
    break;
 80058e6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80058e8:	4b09      	ldr	r3, [pc, #36]	; (8005910 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80058ea:	68db      	ldr	r3, [r3, #12]
 80058ec:	0e5b      	lsrs	r3, r3, #25
 80058ee:	f003 0303 	and.w	r3, r3, #3
 80058f2:	3301      	adds	r3, #1
 80058f4:	005b      	lsls	r3, r3, #1
 80058f6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80058f8:	697a      	ldr	r2, [r7, #20]
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005900:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005902:	687b      	ldr	r3, [r7, #4]
}
 8005904:	4618      	mov	r0, r3
 8005906:	371c      	adds	r7, #28
 8005908:	46bd      	mov	sp, r7
 800590a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590e:	4770      	bx	lr
 8005910:	40021000 	.word	0x40021000
 8005914:	016e3600 	.word	0x016e3600
 8005918:	00f42400 	.word	0x00f42400

0800591c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b086      	sub	sp, #24
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005924:	2300      	movs	r3, #0
 8005926:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005928:	2300      	movs	r3, #0
 800592a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005934:	2b00      	cmp	r3, #0
 8005936:	f000 8098 	beq.w	8005a6a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800593a:	2300      	movs	r3, #0
 800593c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800593e:	4b43      	ldr	r3, [pc, #268]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005942:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005946:	2b00      	cmp	r3, #0
 8005948:	d10d      	bne.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800594a:	4b40      	ldr	r3, [pc, #256]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800594c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800594e:	4a3f      	ldr	r2, [pc, #252]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005950:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005954:	6593      	str	r3, [r2, #88]	; 0x58
 8005956:	4b3d      	ldr	r3, [pc, #244]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800595a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800595e:	60bb      	str	r3, [r7, #8]
 8005960:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005962:	2301      	movs	r3, #1
 8005964:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005966:	4b3a      	ldr	r3, [pc, #232]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a39      	ldr	r2, [pc, #228]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800596c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005970:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005972:	f7fc ff7f 	bl	8002874 <HAL_GetTick>
 8005976:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005978:	e009      	b.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800597a:	f7fc ff7b 	bl	8002874 <HAL_GetTick>
 800597e:	4602      	mov	r2, r0
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	1ad3      	subs	r3, r2, r3
 8005984:	2b02      	cmp	r3, #2
 8005986:	d902      	bls.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005988:	2303      	movs	r3, #3
 800598a:	74fb      	strb	r3, [r7, #19]
        break;
 800598c:	e005      	b.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800598e:	4b30      	ldr	r3, [pc, #192]	; (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005996:	2b00      	cmp	r3, #0
 8005998:	d0ef      	beq.n	800597a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800599a:	7cfb      	ldrb	r3, [r7, #19]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d159      	bne.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80059a0:	4b2a      	ldr	r3, [pc, #168]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80059a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059aa:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d01e      	beq.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059b6:	697a      	ldr	r2, [r7, #20]
 80059b8:	429a      	cmp	r2, r3
 80059ba:	d019      	beq.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80059bc:	4b23      	ldr	r3, [pc, #140]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80059be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059c6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80059c8:	4b20      	ldr	r3, [pc, #128]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80059ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059ce:	4a1f      	ldr	r2, [pc, #124]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80059d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80059d8:	4b1c      	ldr	r3, [pc, #112]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80059da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059de:	4a1b      	ldr	r2, [pc, #108]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80059e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80059e8:	4a18      	ldr	r2, [pc, #96]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	f003 0301 	and.w	r3, r3, #1
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d016      	beq.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059fa:	f7fc ff3b 	bl	8002874 <HAL_GetTick>
 80059fe:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a00:	e00b      	b.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a02:	f7fc ff37 	bl	8002874 <HAL_GetTick>
 8005a06:	4602      	mov	r2, r0
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	1ad3      	subs	r3, r2, r3
 8005a0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d902      	bls.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005a14:	2303      	movs	r3, #3
 8005a16:	74fb      	strb	r3, [r7, #19]
            break;
 8005a18:	e006      	b.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a1a:	4b0c      	ldr	r3, [pc, #48]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a20:	f003 0302 	and.w	r3, r3, #2
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d0ec      	beq.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005a28:	7cfb      	ldrb	r3, [r7, #19]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d10b      	bne.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005a2e:	4b07      	ldr	r3, [pc, #28]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a34:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a3c:	4903      	ldr	r1, [pc, #12]	; (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005a44:	e008      	b.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005a46:	7cfb      	ldrb	r3, [r7, #19]
 8005a48:	74bb      	strb	r3, [r7, #18]
 8005a4a:	e005      	b.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005a4c:	40021000 	.word	0x40021000
 8005a50:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a54:	7cfb      	ldrb	r3, [r7, #19]
 8005a56:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005a58:	7c7b      	ldrb	r3, [r7, #17]
 8005a5a:	2b01      	cmp	r3, #1
 8005a5c:	d105      	bne.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a5e:	4ba7      	ldr	r3, [pc, #668]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a62:	4aa6      	ldr	r2, [pc, #664]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a68:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f003 0301 	and.w	r3, r3, #1
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d00a      	beq.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005a76:	4ba1      	ldr	r3, [pc, #644]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a7c:	f023 0203 	bic.w	r2, r3, #3
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	499d      	ldr	r1, [pc, #628]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a86:	4313      	orrs	r3, r2
 8005a88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f003 0302 	and.w	r3, r3, #2
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d00a      	beq.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005a98:	4b98      	ldr	r3, [pc, #608]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a9e:	f023 020c 	bic.w	r2, r3, #12
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	689b      	ldr	r3, [r3, #8]
 8005aa6:	4995      	ldr	r1, [pc, #596]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f003 0304 	and.w	r3, r3, #4
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d00a      	beq.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005aba:	4b90      	ldr	r3, [pc, #576]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005abc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ac0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	68db      	ldr	r3, [r3, #12]
 8005ac8:	498c      	ldr	r1, [pc, #560]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005aca:	4313      	orrs	r3, r2
 8005acc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f003 0308 	and.w	r3, r3, #8
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d00a      	beq.n	8005af2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005adc:	4b87      	ldr	r3, [pc, #540]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ae2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	691b      	ldr	r3, [r3, #16]
 8005aea:	4984      	ldr	r1, [pc, #528]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005aec:	4313      	orrs	r3, r2
 8005aee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f003 0310 	and.w	r3, r3, #16
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d00a      	beq.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005afe:	4b7f      	ldr	r3, [pc, #508]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b04:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	695b      	ldr	r3, [r3, #20]
 8005b0c:	497b      	ldr	r1, [pc, #492]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f003 0320 	and.w	r3, r3, #32
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d00a      	beq.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005b20:	4b76      	ldr	r3, [pc, #472]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b26:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	699b      	ldr	r3, [r3, #24]
 8005b2e:	4973      	ldr	r1, [pc, #460]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b30:	4313      	orrs	r3, r2
 8005b32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d00a      	beq.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005b42:	4b6e      	ldr	r3, [pc, #440]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b48:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	69db      	ldr	r3, [r3, #28]
 8005b50:	496a      	ldr	r1, [pc, #424]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b52:	4313      	orrs	r3, r2
 8005b54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d00a      	beq.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005b64:	4b65      	ldr	r3, [pc, #404]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b6a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6a1b      	ldr	r3, [r3, #32]
 8005b72:	4962      	ldr	r1, [pc, #392]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b74:	4313      	orrs	r3, r2
 8005b76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d00a      	beq.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005b86:	4b5d      	ldr	r3, [pc, #372]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b8c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b94:	4959      	ldr	r1, [pc, #356]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b96:	4313      	orrs	r3, r2
 8005b98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d00a      	beq.n	8005bbe <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005ba8:	4b54      	ldr	r3, [pc, #336]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005baa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005bae:	f023 0203 	bic.w	r2, r3, #3
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bb6:	4951      	ldr	r1, [pc, #324]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d00a      	beq.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005bca:	4b4c      	ldr	r3, [pc, #304]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bd0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bd8:	4948      	ldr	r1, [pc, #288]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d015      	beq.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005bec:	4b43      	ldr	r3, [pc, #268]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bf2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bfa:	4940      	ldr	r1, [pc, #256]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c0a:	d105      	bne.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c0c:	4b3b      	ldr	r3, [pc, #236]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c0e:	68db      	ldr	r3, [r3, #12]
 8005c10:	4a3a      	ldr	r2, [pc, #232]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005c16:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d015      	beq.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005c24:	4b35      	ldr	r3, [pc, #212]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c2a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c32:	4932      	ldr	r1, [pc, #200]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c34:	4313      	orrs	r3, r2
 8005c36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c42:	d105      	bne.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c44:	4b2d      	ldr	r3, [pc, #180]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c46:	68db      	ldr	r3, [r3, #12]
 8005c48:	4a2c      	ldr	r2, [pc, #176]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005c4e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d015      	beq.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005c5c:	4b27      	ldr	r3, [pc, #156]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c62:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c6a:	4924      	ldr	r1, [pc, #144]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c76:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005c7a:	d105      	bne.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c7c:	4b1f      	ldr	r3, [pc, #124]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c7e:	68db      	ldr	r3, [r3, #12]
 8005c80:	4a1e      	ldr	r2, [pc, #120]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005c86:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d015      	beq.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005c94:	4b19      	ldr	r3, [pc, #100]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c9a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ca2:	4916      	ldr	r1, [pc, #88]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005cb2:	d105      	bne.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005cb4:	4b11      	ldr	r3, [pc, #68]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cb6:	68db      	ldr	r3, [r3, #12]
 8005cb8:	4a10      	ldr	r2, [pc, #64]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005cbe:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d019      	beq.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005ccc:	4b0b      	ldr	r3, [pc, #44]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cd2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cda:	4908      	ldr	r1, [pc, #32]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ce6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005cea:	d109      	bne.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005cec:	4b03      	ldr	r3, [pc, #12]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cee:	68db      	ldr	r3, [r3, #12]
 8005cf0:	4a02      	ldr	r2, [pc, #8]	; (8005cfc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cf2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005cf6:	60d3      	str	r3, [r2, #12]
 8005cf8:	e002      	b.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005cfa:	bf00      	nop
 8005cfc:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d015      	beq.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005d0c:	4b29      	ldr	r3, [pc, #164]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d12:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d1a:	4926      	ldr	r1, [pc, #152]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d26:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d2a:	d105      	bne.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005d2c:	4b21      	ldr	r3, [pc, #132]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005d2e:	68db      	ldr	r3, [r3, #12]
 8005d30:	4a20      	ldr	r2, [pc, #128]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005d32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d36:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d015      	beq.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005d44:	4b1b      	ldr	r3, [pc, #108]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d4a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d52:	4918      	ldr	r1, [pc, #96]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005d54:	4313      	orrs	r3, r2
 8005d56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d62:	d105      	bne.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005d64:	4b13      	ldr	r3, [pc, #76]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005d66:	68db      	ldr	r3, [r3, #12]
 8005d68:	4a12      	ldr	r2, [pc, #72]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005d6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d6e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d015      	beq.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005d7c:	4b0d      	ldr	r3, [pc, #52]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005d7e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005d82:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d8a:	490a      	ldr	r1, [pc, #40]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d96:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005d9a:	d105      	bne.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d9c:	4b05      	ldr	r3, [pc, #20]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005d9e:	68db      	ldr	r3, [r3, #12]
 8005da0:	4a04      	ldr	r2, [pc, #16]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005da2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005da6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005da8:	7cbb      	ldrb	r3, [r7, #18]
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3718      	adds	r7, #24
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}
 8005db2:	bf00      	nop
 8005db4:	40021000 	.word	0x40021000

08005db8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b082      	sub	sp, #8
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d101      	bne.n	8005dca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	e049      	b.n	8005e5e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dd0:	b2db      	uxtb	r3, r3
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d106      	bne.n	8005de4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f7fc f8a4 	bl	8001f2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2202      	movs	r2, #2
 8005de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681a      	ldr	r2, [r3, #0]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	3304      	adds	r3, #4
 8005df4:	4619      	mov	r1, r3
 8005df6:	4610      	mov	r0, r2
 8005df8:	f000 fd70 	bl	80068dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2201      	movs	r2, #1
 8005e00:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2201      	movs	r2, #1
 8005e08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2201      	movs	r2, #1
 8005e10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2201      	movs	r2, #1
 8005e18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2201      	movs	r2, #1
 8005e20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2201      	movs	r2, #1
 8005e28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2201      	movs	r2, #1
 8005e30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2201      	movs	r2, #1
 8005e38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2201      	movs	r2, #1
 8005e40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2201      	movs	r2, #1
 8005e48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2201      	movs	r2, #1
 8005e50:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2201      	movs	r2, #1
 8005e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e5c:	2300      	movs	r3, #0
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3708      	adds	r7, #8
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}
	...

08005e68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b085      	sub	sp, #20
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e76:	b2db      	uxtb	r3, r3
 8005e78:	2b01      	cmp	r3, #1
 8005e7a:	d001      	beq.n	8005e80 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	e054      	b.n	8005f2a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2202      	movs	r2, #2
 8005e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	68da      	ldr	r2, [r3, #12]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f042 0201 	orr.w	r2, r2, #1
 8005e96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a26      	ldr	r2, [pc, #152]	; (8005f38 <HAL_TIM_Base_Start_IT+0xd0>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d022      	beq.n	8005ee8 <HAL_TIM_Base_Start_IT+0x80>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005eaa:	d01d      	beq.n	8005ee8 <HAL_TIM_Base_Start_IT+0x80>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a22      	ldr	r2, [pc, #136]	; (8005f3c <HAL_TIM_Base_Start_IT+0xd4>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d018      	beq.n	8005ee8 <HAL_TIM_Base_Start_IT+0x80>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a21      	ldr	r2, [pc, #132]	; (8005f40 <HAL_TIM_Base_Start_IT+0xd8>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d013      	beq.n	8005ee8 <HAL_TIM_Base_Start_IT+0x80>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a1f      	ldr	r2, [pc, #124]	; (8005f44 <HAL_TIM_Base_Start_IT+0xdc>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d00e      	beq.n	8005ee8 <HAL_TIM_Base_Start_IT+0x80>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a1e      	ldr	r2, [pc, #120]	; (8005f48 <HAL_TIM_Base_Start_IT+0xe0>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d009      	beq.n	8005ee8 <HAL_TIM_Base_Start_IT+0x80>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a1c      	ldr	r2, [pc, #112]	; (8005f4c <HAL_TIM_Base_Start_IT+0xe4>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d004      	beq.n	8005ee8 <HAL_TIM_Base_Start_IT+0x80>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a1b      	ldr	r2, [pc, #108]	; (8005f50 <HAL_TIM_Base_Start_IT+0xe8>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d115      	bne.n	8005f14 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	689a      	ldr	r2, [r3, #8]
 8005eee:	4b19      	ldr	r3, [pc, #100]	; (8005f54 <HAL_TIM_Base_Start_IT+0xec>)
 8005ef0:	4013      	ands	r3, r2
 8005ef2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2b06      	cmp	r3, #6
 8005ef8:	d015      	beq.n	8005f26 <HAL_TIM_Base_Start_IT+0xbe>
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f00:	d011      	beq.n	8005f26 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	681a      	ldr	r2, [r3, #0]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f042 0201 	orr.w	r2, r2, #1
 8005f10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f12:	e008      	b.n	8005f26 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	681a      	ldr	r2, [r3, #0]
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f042 0201 	orr.w	r2, r2, #1
 8005f22:	601a      	str	r2, [r3, #0]
 8005f24:	e000      	b.n	8005f28 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f26:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005f28:	2300      	movs	r3, #0
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3714      	adds	r7, #20
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f34:	4770      	bx	lr
 8005f36:	bf00      	nop
 8005f38:	40012c00 	.word	0x40012c00
 8005f3c:	40000400 	.word	0x40000400
 8005f40:	40000800 	.word	0x40000800
 8005f44:	40000c00 	.word	0x40000c00
 8005f48:	40013400 	.word	0x40013400
 8005f4c:	40014000 	.word	0x40014000
 8005f50:	40015000 	.word	0x40015000
 8005f54:	00010007 	.word	0x00010007

08005f58 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b082      	sub	sp, #8
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d101      	bne.n	8005f6a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005f66:	2301      	movs	r3, #1
 8005f68:	e049      	b.n	8005ffe <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f70:	b2db      	uxtb	r3, r3
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d106      	bne.n	8005f84 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f7fb ff4c 	bl	8001e1c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2202      	movs	r2, #2
 8005f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681a      	ldr	r2, [r3, #0]
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	3304      	adds	r3, #4
 8005f94:	4619      	mov	r1, r3
 8005f96:	4610      	mov	r0, r2
 8005f98:	f000 fca0 	bl	80068dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2201      	movs	r2, #1
 8005fb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2201      	movs	r2, #1
 8005fd0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2201      	movs	r2, #1
 8005fe0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2201      	movs	r2, #1
 8005ff0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ffc:	2300      	movs	r3, #0
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	3708      	adds	r7, #8
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}
	...

08006008 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b084      	sub	sp, #16
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
 8006010:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d109      	bne.n	800602c <HAL_TIM_PWM_Start+0x24>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800601e:	b2db      	uxtb	r3, r3
 8006020:	2b01      	cmp	r3, #1
 8006022:	bf14      	ite	ne
 8006024:	2301      	movne	r3, #1
 8006026:	2300      	moveq	r3, #0
 8006028:	b2db      	uxtb	r3, r3
 800602a:	e03c      	b.n	80060a6 <HAL_TIM_PWM_Start+0x9e>
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	2b04      	cmp	r3, #4
 8006030:	d109      	bne.n	8006046 <HAL_TIM_PWM_Start+0x3e>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006038:	b2db      	uxtb	r3, r3
 800603a:	2b01      	cmp	r3, #1
 800603c:	bf14      	ite	ne
 800603e:	2301      	movne	r3, #1
 8006040:	2300      	moveq	r3, #0
 8006042:	b2db      	uxtb	r3, r3
 8006044:	e02f      	b.n	80060a6 <HAL_TIM_PWM_Start+0x9e>
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	2b08      	cmp	r3, #8
 800604a:	d109      	bne.n	8006060 <HAL_TIM_PWM_Start+0x58>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006052:	b2db      	uxtb	r3, r3
 8006054:	2b01      	cmp	r3, #1
 8006056:	bf14      	ite	ne
 8006058:	2301      	movne	r3, #1
 800605a:	2300      	moveq	r3, #0
 800605c:	b2db      	uxtb	r3, r3
 800605e:	e022      	b.n	80060a6 <HAL_TIM_PWM_Start+0x9e>
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	2b0c      	cmp	r3, #12
 8006064:	d109      	bne.n	800607a <HAL_TIM_PWM_Start+0x72>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800606c:	b2db      	uxtb	r3, r3
 800606e:	2b01      	cmp	r3, #1
 8006070:	bf14      	ite	ne
 8006072:	2301      	movne	r3, #1
 8006074:	2300      	moveq	r3, #0
 8006076:	b2db      	uxtb	r3, r3
 8006078:	e015      	b.n	80060a6 <HAL_TIM_PWM_Start+0x9e>
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	2b10      	cmp	r3, #16
 800607e:	d109      	bne.n	8006094 <HAL_TIM_PWM_Start+0x8c>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006086:	b2db      	uxtb	r3, r3
 8006088:	2b01      	cmp	r3, #1
 800608a:	bf14      	ite	ne
 800608c:	2301      	movne	r3, #1
 800608e:	2300      	moveq	r3, #0
 8006090:	b2db      	uxtb	r3, r3
 8006092:	e008      	b.n	80060a6 <HAL_TIM_PWM_Start+0x9e>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800609a:	b2db      	uxtb	r3, r3
 800609c:	2b01      	cmp	r3, #1
 800609e:	bf14      	ite	ne
 80060a0:	2301      	movne	r3, #1
 80060a2:	2300      	moveq	r3, #0
 80060a4:	b2db      	uxtb	r3, r3
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d001      	beq.n	80060ae <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80060aa:	2301      	movs	r3, #1
 80060ac:	e0a6      	b.n	80061fc <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d104      	bne.n	80060be <HAL_TIM_PWM_Start+0xb6>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2202      	movs	r2, #2
 80060b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80060bc:	e023      	b.n	8006106 <HAL_TIM_PWM_Start+0xfe>
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	2b04      	cmp	r3, #4
 80060c2:	d104      	bne.n	80060ce <HAL_TIM_PWM_Start+0xc6>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2202      	movs	r2, #2
 80060c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80060cc:	e01b      	b.n	8006106 <HAL_TIM_PWM_Start+0xfe>
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	2b08      	cmp	r3, #8
 80060d2:	d104      	bne.n	80060de <HAL_TIM_PWM_Start+0xd6>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2202      	movs	r2, #2
 80060d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80060dc:	e013      	b.n	8006106 <HAL_TIM_PWM_Start+0xfe>
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	2b0c      	cmp	r3, #12
 80060e2:	d104      	bne.n	80060ee <HAL_TIM_PWM_Start+0xe6>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2202      	movs	r2, #2
 80060e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80060ec:	e00b      	b.n	8006106 <HAL_TIM_PWM_Start+0xfe>
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	2b10      	cmp	r3, #16
 80060f2:	d104      	bne.n	80060fe <HAL_TIM_PWM_Start+0xf6>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2202      	movs	r2, #2
 80060f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80060fc:	e003      	b.n	8006106 <HAL_TIM_PWM_Start+0xfe>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2202      	movs	r2, #2
 8006102:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	2201      	movs	r2, #1
 800610c:	6839      	ldr	r1, [r7, #0]
 800610e:	4618      	mov	r0, r3
 8006110:	f001 f82a 	bl	8007168 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a3a      	ldr	r2, [pc, #232]	; (8006204 <HAL_TIM_PWM_Start+0x1fc>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d018      	beq.n	8006150 <HAL_TIM_PWM_Start+0x148>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a39      	ldr	r2, [pc, #228]	; (8006208 <HAL_TIM_PWM_Start+0x200>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d013      	beq.n	8006150 <HAL_TIM_PWM_Start+0x148>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a37      	ldr	r2, [pc, #220]	; (800620c <HAL_TIM_PWM_Start+0x204>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d00e      	beq.n	8006150 <HAL_TIM_PWM_Start+0x148>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a36      	ldr	r2, [pc, #216]	; (8006210 <HAL_TIM_PWM_Start+0x208>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d009      	beq.n	8006150 <HAL_TIM_PWM_Start+0x148>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a34      	ldr	r2, [pc, #208]	; (8006214 <HAL_TIM_PWM_Start+0x20c>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d004      	beq.n	8006150 <HAL_TIM_PWM_Start+0x148>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a33      	ldr	r2, [pc, #204]	; (8006218 <HAL_TIM_PWM_Start+0x210>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d101      	bne.n	8006154 <HAL_TIM_PWM_Start+0x14c>
 8006150:	2301      	movs	r3, #1
 8006152:	e000      	b.n	8006156 <HAL_TIM_PWM_Start+0x14e>
 8006154:	2300      	movs	r3, #0
 8006156:	2b00      	cmp	r3, #0
 8006158:	d007      	beq.n	800616a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006168:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a25      	ldr	r2, [pc, #148]	; (8006204 <HAL_TIM_PWM_Start+0x1fc>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d022      	beq.n	80061ba <HAL_TIM_PWM_Start+0x1b2>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800617c:	d01d      	beq.n	80061ba <HAL_TIM_PWM_Start+0x1b2>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a26      	ldr	r2, [pc, #152]	; (800621c <HAL_TIM_PWM_Start+0x214>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d018      	beq.n	80061ba <HAL_TIM_PWM_Start+0x1b2>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a24      	ldr	r2, [pc, #144]	; (8006220 <HAL_TIM_PWM_Start+0x218>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d013      	beq.n	80061ba <HAL_TIM_PWM_Start+0x1b2>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a23      	ldr	r2, [pc, #140]	; (8006224 <HAL_TIM_PWM_Start+0x21c>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d00e      	beq.n	80061ba <HAL_TIM_PWM_Start+0x1b2>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a19      	ldr	r2, [pc, #100]	; (8006208 <HAL_TIM_PWM_Start+0x200>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d009      	beq.n	80061ba <HAL_TIM_PWM_Start+0x1b2>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a18      	ldr	r2, [pc, #96]	; (800620c <HAL_TIM_PWM_Start+0x204>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d004      	beq.n	80061ba <HAL_TIM_PWM_Start+0x1b2>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a18      	ldr	r2, [pc, #96]	; (8006218 <HAL_TIM_PWM_Start+0x210>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d115      	bne.n	80061e6 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	689a      	ldr	r2, [r3, #8]
 80061c0:	4b19      	ldr	r3, [pc, #100]	; (8006228 <HAL_TIM_PWM_Start+0x220>)
 80061c2:	4013      	ands	r3, r2
 80061c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2b06      	cmp	r3, #6
 80061ca:	d015      	beq.n	80061f8 <HAL_TIM_PWM_Start+0x1f0>
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061d2:	d011      	beq.n	80061f8 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	681a      	ldr	r2, [r3, #0]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f042 0201 	orr.w	r2, r2, #1
 80061e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061e4:	e008      	b.n	80061f8 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	681a      	ldr	r2, [r3, #0]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f042 0201 	orr.w	r2, r2, #1
 80061f4:	601a      	str	r2, [r3, #0]
 80061f6:	e000      	b.n	80061fa <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061f8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80061fa:	2300      	movs	r3, #0
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	3710      	adds	r7, #16
 8006200:	46bd      	mov	sp, r7
 8006202:	bd80      	pop	{r7, pc}
 8006204:	40012c00 	.word	0x40012c00
 8006208:	40013400 	.word	0x40013400
 800620c:	40014000 	.word	0x40014000
 8006210:	40014400 	.word	0x40014400
 8006214:	40014800 	.word	0x40014800
 8006218:	40015000 	.word	0x40015000
 800621c:	40000400 	.word	0x40000400
 8006220:	40000800 	.word	0x40000800
 8006224:	40000c00 	.word	0x40000c00
 8006228:	00010007 	.word	0x00010007

0800622c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b082      	sub	sp, #8
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
 8006234:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	2200      	movs	r2, #0
 800623c:	6839      	ldr	r1, [r7, #0]
 800623e:	4618      	mov	r0, r3
 8006240:	f000 ff92 	bl	8007168 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a40      	ldr	r2, [pc, #256]	; (800634c <HAL_TIM_PWM_Stop+0x120>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d018      	beq.n	8006280 <HAL_TIM_PWM_Stop+0x54>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a3f      	ldr	r2, [pc, #252]	; (8006350 <HAL_TIM_PWM_Stop+0x124>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d013      	beq.n	8006280 <HAL_TIM_PWM_Stop+0x54>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a3d      	ldr	r2, [pc, #244]	; (8006354 <HAL_TIM_PWM_Stop+0x128>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d00e      	beq.n	8006280 <HAL_TIM_PWM_Stop+0x54>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a3c      	ldr	r2, [pc, #240]	; (8006358 <HAL_TIM_PWM_Stop+0x12c>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d009      	beq.n	8006280 <HAL_TIM_PWM_Stop+0x54>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a3a      	ldr	r2, [pc, #232]	; (800635c <HAL_TIM_PWM_Stop+0x130>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d004      	beq.n	8006280 <HAL_TIM_PWM_Stop+0x54>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a39      	ldr	r2, [pc, #228]	; (8006360 <HAL_TIM_PWM_Stop+0x134>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d101      	bne.n	8006284 <HAL_TIM_PWM_Stop+0x58>
 8006280:	2301      	movs	r3, #1
 8006282:	e000      	b.n	8006286 <HAL_TIM_PWM_Stop+0x5a>
 8006284:	2300      	movs	r3, #0
 8006286:	2b00      	cmp	r3, #0
 8006288:	d017      	beq.n	80062ba <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	6a1a      	ldr	r2, [r3, #32]
 8006290:	f241 1311 	movw	r3, #4369	; 0x1111
 8006294:	4013      	ands	r3, r2
 8006296:	2b00      	cmp	r3, #0
 8006298:	d10f      	bne.n	80062ba <HAL_TIM_PWM_Stop+0x8e>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	6a1a      	ldr	r2, [r3, #32]
 80062a0:	f244 4344 	movw	r3, #17476	; 0x4444
 80062a4:	4013      	ands	r3, r2
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d107      	bne.n	80062ba <HAL_TIM_PWM_Stop+0x8e>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80062b8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	6a1a      	ldr	r2, [r3, #32]
 80062c0:	f241 1311 	movw	r3, #4369	; 0x1111
 80062c4:	4013      	ands	r3, r2
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d10f      	bne.n	80062ea <HAL_TIM_PWM_Stop+0xbe>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	6a1a      	ldr	r2, [r3, #32]
 80062d0:	f244 4344 	movw	r3, #17476	; 0x4444
 80062d4:	4013      	ands	r3, r2
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d107      	bne.n	80062ea <HAL_TIM_PWM_Stop+0xbe>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	681a      	ldr	r2, [r3, #0]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f022 0201 	bic.w	r2, r2, #1
 80062e8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d104      	bne.n	80062fa <HAL_TIM_PWM_Stop+0xce>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2201      	movs	r2, #1
 80062f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80062f8:	e023      	b.n	8006342 <HAL_TIM_PWM_Stop+0x116>
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	2b04      	cmp	r3, #4
 80062fe:	d104      	bne.n	800630a <HAL_TIM_PWM_Stop+0xde>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2201      	movs	r2, #1
 8006304:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006308:	e01b      	b.n	8006342 <HAL_TIM_PWM_Stop+0x116>
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	2b08      	cmp	r3, #8
 800630e:	d104      	bne.n	800631a <HAL_TIM_PWM_Stop+0xee>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2201      	movs	r2, #1
 8006314:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006318:	e013      	b.n	8006342 <HAL_TIM_PWM_Stop+0x116>
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	2b0c      	cmp	r3, #12
 800631e:	d104      	bne.n	800632a <HAL_TIM_PWM_Stop+0xfe>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2201      	movs	r2, #1
 8006324:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006328:	e00b      	b.n	8006342 <HAL_TIM_PWM_Stop+0x116>
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	2b10      	cmp	r3, #16
 800632e:	d104      	bne.n	800633a <HAL_TIM_PWM_Stop+0x10e>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2201      	movs	r2, #1
 8006334:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006338:	e003      	b.n	8006342 <HAL_TIM_PWM_Stop+0x116>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2201      	movs	r2, #1
 800633e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8006342:	2300      	movs	r3, #0
}
 8006344:	4618      	mov	r0, r3
 8006346:	3708      	adds	r7, #8
 8006348:	46bd      	mov	sp, r7
 800634a:	bd80      	pop	{r7, pc}
 800634c:	40012c00 	.word	0x40012c00
 8006350:	40013400 	.word	0x40013400
 8006354:	40014000 	.word	0x40014000
 8006358:	40014400 	.word	0x40014400
 800635c:	40014800 	.word	0x40014800
 8006360:	40015000 	.word	0x40015000

08006364 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b082      	sub	sp, #8
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	691b      	ldr	r3, [r3, #16]
 8006372:	f003 0302 	and.w	r3, r3, #2
 8006376:	2b02      	cmp	r3, #2
 8006378:	d122      	bne.n	80063c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	68db      	ldr	r3, [r3, #12]
 8006380:	f003 0302 	and.w	r3, r3, #2
 8006384:	2b02      	cmp	r3, #2
 8006386:	d11b      	bne.n	80063c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f06f 0202 	mvn.w	r2, #2
 8006390:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2201      	movs	r2, #1
 8006396:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	699b      	ldr	r3, [r3, #24]
 800639e:	f003 0303 	and.w	r3, r3, #3
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d003      	beq.n	80063ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f000 fa7a 	bl	80068a0 <HAL_TIM_IC_CaptureCallback>
 80063ac:	e005      	b.n	80063ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f000 fa6c 	bl	800688c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f000 fa7d 	bl	80068b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2200      	movs	r2, #0
 80063be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	691b      	ldr	r3, [r3, #16]
 80063c6:	f003 0304 	and.w	r3, r3, #4
 80063ca:	2b04      	cmp	r3, #4
 80063cc:	d122      	bne.n	8006414 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	68db      	ldr	r3, [r3, #12]
 80063d4:	f003 0304 	and.w	r3, r3, #4
 80063d8:	2b04      	cmp	r3, #4
 80063da:	d11b      	bne.n	8006414 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f06f 0204 	mvn.w	r2, #4
 80063e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2202      	movs	r2, #2
 80063ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	699b      	ldr	r3, [r3, #24]
 80063f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d003      	beq.n	8006402 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f000 fa50 	bl	80068a0 <HAL_TIM_IC_CaptureCallback>
 8006400:	e005      	b.n	800640e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f000 fa42 	bl	800688c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006408:	6878      	ldr	r0, [r7, #4]
 800640a:	f000 fa53 	bl	80068b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2200      	movs	r2, #0
 8006412:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	691b      	ldr	r3, [r3, #16]
 800641a:	f003 0308 	and.w	r3, r3, #8
 800641e:	2b08      	cmp	r3, #8
 8006420:	d122      	bne.n	8006468 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	68db      	ldr	r3, [r3, #12]
 8006428:	f003 0308 	and.w	r3, r3, #8
 800642c:	2b08      	cmp	r3, #8
 800642e:	d11b      	bne.n	8006468 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f06f 0208 	mvn.w	r2, #8
 8006438:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2204      	movs	r2, #4
 800643e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	69db      	ldr	r3, [r3, #28]
 8006446:	f003 0303 	and.w	r3, r3, #3
 800644a:	2b00      	cmp	r3, #0
 800644c:	d003      	beq.n	8006456 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f000 fa26 	bl	80068a0 <HAL_TIM_IC_CaptureCallback>
 8006454:	e005      	b.n	8006462 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f000 fa18 	bl	800688c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f000 fa29 	bl	80068b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2200      	movs	r2, #0
 8006466:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	691b      	ldr	r3, [r3, #16]
 800646e:	f003 0310 	and.w	r3, r3, #16
 8006472:	2b10      	cmp	r3, #16
 8006474:	d122      	bne.n	80064bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	68db      	ldr	r3, [r3, #12]
 800647c:	f003 0310 	and.w	r3, r3, #16
 8006480:	2b10      	cmp	r3, #16
 8006482:	d11b      	bne.n	80064bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f06f 0210 	mvn.w	r2, #16
 800648c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2208      	movs	r2, #8
 8006492:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	69db      	ldr	r3, [r3, #28]
 800649a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d003      	beq.n	80064aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f000 f9fc 	bl	80068a0 <HAL_TIM_IC_CaptureCallback>
 80064a8:	e005      	b.n	80064b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f000 f9ee 	bl	800688c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	f000 f9ff 	bl	80068b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2200      	movs	r2, #0
 80064ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	691b      	ldr	r3, [r3, #16]
 80064c2:	f003 0301 	and.w	r3, r3, #1
 80064c6:	2b01      	cmp	r3, #1
 80064c8:	d10e      	bne.n	80064e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	68db      	ldr	r3, [r3, #12]
 80064d0:	f003 0301 	and.w	r3, r3, #1
 80064d4:	2b01      	cmp	r3, #1
 80064d6:	d107      	bne.n	80064e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f06f 0201 	mvn.w	r2, #1
 80064e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f7fb f8e4 	bl	80016b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	691b      	ldr	r3, [r3, #16]
 80064ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064f2:	2b80      	cmp	r3, #128	; 0x80
 80064f4:	d10e      	bne.n	8006514 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	68db      	ldr	r3, [r3, #12]
 80064fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006500:	2b80      	cmp	r3, #128	; 0x80
 8006502:	d107      	bne.n	8006514 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800650c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f001 f970 	bl	80077f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	691b      	ldr	r3, [r3, #16]
 800651a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800651e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006522:	d10e      	bne.n	8006542 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	68db      	ldr	r3, [r3, #12]
 800652a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800652e:	2b80      	cmp	r3, #128	; 0x80
 8006530:	d107      	bne.n	8006542 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800653a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	f001 f963 	bl	8007808 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	691b      	ldr	r3, [r3, #16]
 8006548:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800654c:	2b40      	cmp	r3, #64	; 0x40
 800654e:	d10e      	bne.n	800656e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	68db      	ldr	r3, [r3, #12]
 8006556:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800655a:	2b40      	cmp	r3, #64	; 0x40
 800655c:	d107      	bne.n	800656e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006566:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	f000 f9ad 	bl	80068c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	691b      	ldr	r3, [r3, #16]
 8006574:	f003 0320 	and.w	r3, r3, #32
 8006578:	2b20      	cmp	r3, #32
 800657a:	d10e      	bne.n	800659a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	68db      	ldr	r3, [r3, #12]
 8006582:	f003 0320 	and.w	r3, r3, #32
 8006586:	2b20      	cmp	r3, #32
 8006588:	d107      	bne.n	800659a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f06f 0220 	mvn.w	r2, #32
 8006592:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	f001 f923 	bl	80077e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	691b      	ldr	r3, [r3, #16]
 80065a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80065a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80065a8:	d10f      	bne.n	80065ca <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	68db      	ldr	r3, [r3, #12]
 80065b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80065b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80065b8:	d107      	bne.n	80065ca <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80065c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	f001 f929 	bl	800781c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	691b      	ldr	r3, [r3, #16]
 80065d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80065d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80065d8:	d10f      	bne.n	80065fa <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	68db      	ldr	r3, [r3, #12]
 80065e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80065e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80065e8:	d107      	bne.n	80065fa <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80065f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80065f4:	6878      	ldr	r0, [r7, #4]
 80065f6:	f001 f91b 	bl	8007830 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	691b      	ldr	r3, [r3, #16]
 8006600:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006604:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006608:	d10f      	bne.n	800662a <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	68db      	ldr	r3, [r3, #12]
 8006610:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006614:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006618:	d107      	bne.n	800662a <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8006622:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f001 f90d 	bl	8007844 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	691b      	ldr	r3, [r3, #16]
 8006630:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006634:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006638:	d10f      	bne.n	800665a <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	68db      	ldr	r3, [r3, #12]
 8006640:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006644:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006648:	d107      	bne.n	800665a <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8006652:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f001 f8ff 	bl	8007858 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800665a:	bf00      	nop
 800665c:	3708      	adds	r7, #8
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}
	...

08006664 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b086      	sub	sp, #24
 8006668:	af00      	add	r7, sp, #0
 800666a:	60f8      	str	r0, [r7, #12]
 800666c:	60b9      	str	r1, [r7, #8]
 800666e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006670:	2300      	movs	r3, #0
 8006672:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800667a:	2b01      	cmp	r3, #1
 800667c:	d101      	bne.n	8006682 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800667e:	2302      	movs	r3, #2
 8006680:	e0ff      	b.n	8006882 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2201      	movs	r2, #1
 8006686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2b14      	cmp	r3, #20
 800668e:	f200 80f0 	bhi.w	8006872 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006692:	a201      	add	r2, pc, #4	; (adr r2, 8006698 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006698:	080066ed 	.word	0x080066ed
 800669c:	08006873 	.word	0x08006873
 80066a0:	08006873 	.word	0x08006873
 80066a4:	08006873 	.word	0x08006873
 80066a8:	0800672d 	.word	0x0800672d
 80066ac:	08006873 	.word	0x08006873
 80066b0:	08006873 	.word	0x08006873
 80066b4:	08006873 	.word	0x08006873
 80066b8:	0800676f 	.word	0x0800676f
 80066bc:	08006873 	.word	0x08006873
 80066c0:	08006873 	.word	0x08006873
 80066c4:	08006873 	.word	0x08006873
 80066c8:	080067af 	.word	0x080067af
 80066cc:	08006873 	.word	0x08006873
 80066d0:	08006873 	.word	0x08006873
 80066d4:	08006873 	.word	0x08006873
 80066d8:	080067f1 	.word	0x080067f1
 80066dc:	08006873 	.word	0x08006873
 80066e0:	08006873 	.word	0x08006873
 80066e4:	08006873 	.word	0x08006873
 80066e8:	08006831 	.word	0x08006831
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	68b9      	ldr	r1, [r7, #8]
 80066f2:	4618      	mov	r0, r3
 80066f4:	f000 f99a 	bl	8006a2c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	699a      	ldr	r2, [r3, #24]
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f042 0208 	orr.w	r2, r2, #8
 8006706:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	699a      	ldr	r2, [r3, #24]
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f022 0204 	bic.w	r2, r2, #4
 8006716:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	6999      	ldr	r1, [r3, #24]
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	691a      	ldr	r2, [r3, #16]
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	430a      	orrs	r2, r1
 8006728:	619a      	str	r2, [r3, #24]
      break;
 800672a:	e0a5      	b.n	8006878 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	68b9      	ldr	r1, [r7, #8]
 8006732:	4618      	mov	r0, r3
 8006734:	f000 fa14 	bl	8006b60 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	699a      	ldr	r2, [r3, #24]
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006746:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	699a      	ldr	r2, [r3, #24]
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006756:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	6999      	ldr	r1, [r3, #24]
 800675e:	68bb      	ldr	r3, [r7, #8]
 8006760:	691b      	ldr	r3, [r3, #16]
 8006762:	021a      	lsls	r2, r3, #8
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	430a      	orrs	r2, r1
 800676a:	619a      	str	r2, [r3, #24]
      break;
 800676c:	e084      	b.n	8006878 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	68b9      	ldr	r1, [r7, #8]
 8006774:	4618      	mov	r0, r3
 8006776:	f000 fa87 	bl	8006c88 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	69da      	ldr	r2, [r3, #28]
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f042 0208 	orr.w	r2, r2, #8
 8006788:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	69da      	ldr	r2, [r3, #28]
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f022 0204 	bic.w	r2, r2, #4
 8006798:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	69d9      	ldr	r1, [r3, #28]
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	691a      	ldr	r2, [r3, #16]
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	430a      	orrs	r2, r1
 80067aa:	61da      	str	r2, [r3, #28]
      break;
 80067ac:	e064      	b.n	8006878 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	68b9      	ldr	r1, [r7, #8]
 80067b4:	4618      	mov	r0, r3
 80067b6:	f000 faf9 	bl	8006dac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	69da      	ldr	r2, [r3, #28]
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80067c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	69da      	ldr	r2, [r3, #28]
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	69d9      	ldr	r1, [r3, #28]
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	691b      	ldr	r3, [r3, #16]
 80067e4:	021a      	lsls	r2, r3, #8
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	430a      	orrs	r2, r1
 80067ec:	61da      	str	r2, [r3, #28]
      break;
 80067ee:	e043      	b.n	8006878 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	68b9      	ldr	r1, [r7, #8]
 80067f6:	4618      	mov	r0, r3
 80067f8:	f000 fb6c 	bl	8006ed4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f042 0208 	orr.w	r2, r2, #8
 800680a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f022 0204 	bic.w	r2, r2, #4
 800681a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	691a      	ldr	r2, [r3, #16]
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	430a      	orrs	r2, r1
 800682c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800682e:	e023      	b.n	8006878 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	68b9      	ldr	r1, [r7, #8]
 8006836:	4618      	mov	r0, r3
 8006838:	f000 fbb6 	bl	8006fa8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800684a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800685a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	691b      	ldr	r3, [r3, #16]
 8006866:	021a      	lsls	r2, r3, #8
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	430a      	orrs	r2, r1
 800686e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006870:	e002      	b.n	8006878 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006872:	2301      	movs	r3, #1
 8006874:	75fb      	strb	r3, [r7, #23]
      break;
 8006876:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	2200      	movs	r2, #0
 800687c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006880:	7dfb      	ldrb	r3, [r7, #23]
}
 8006882:	4618      	mov	r0, r3
 8006884:	3718      	adds	r7, #24
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}
 800688a:	bf00      	nop

0800688c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800688c:	b480      	push	{r7}
 800688e:	b083      	sub	sp, #12
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006894:	bf00      	nop
 8006896:	370c      	adds	r7, #12
 8006898:	46bd      	mov	sp, r7
 800689a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689e:	4770      	bx	lr

080068a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80068a0:	b480      	push	{r7}
 80068a2:	b083      	sub	sp, #12
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80068a8:	bf00      	nop
 80068aa:	370c      	adds	r7, #12
 80068ac:	46bd      	mov	sp, r7
 80068ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b2:	4770      	bx	lr

080068b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b083      	sub	sp, #12
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80068bc:	bf00      	nop
 80068be:	370c      	adds	r7, #12
 80068c0:	46bd      	mov	sp, r7
 80068c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c6:	4770      	bx	lr

080068c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80068c8:	b480      	push	{r7}
 80068ca:	b083      	sub	sp, #12
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80068d0:	bf00      	nop
 80068d2:	370c      	adds	r7, #12
 80068d4:	46bd      	mov	sp, r7
 80068d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068da:	4770      	bx	lr

080068dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80068dc:	b480      	push	{r7}
 80068de:	b085      	sub	sp, #20
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
 80068e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	4a46      	ldr	r2, [pc, #280]	; (8006a08 <TIM_Base_SetConfig+0x12c>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d017      	beq.n	8006924 <TIM_Base_SetConfig+0x48>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068fa:	d013      	beq.n	8006924 <TIM_Base_SetConfig+0x48>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	4a43      	ldr	r2, [pc, #268]	; (8006a0c <TIM_Base_SetConfig+0x130>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d00f      	beq.n	8006924 <TIM_Base_SetConfig+0x48>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	4a42      	ldr	r2, [pc, #264]	; (8006a10 <TIM_Base_SetConfig+0x134>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d00b      	beq.n	8006924 <TIM_Base_SetConfig+0x48>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	4a41      	ldr	r2, [pc, #260]	; (8006a14 <TIM_Base_SetConfig+0x138>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d007      	beq.n	8006924 <TIM_Base_SetConfig+0x48>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	4a40      	ldr	r2, [pc, #256]	; (8006a18 <TIM_Base_SetConfig+0x13c>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d003      	beq.n	8006924 <TIM_Base_SetConfig+0x48>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	4a3f      	ldr	r2, [pc, #252]	; (8006a1c <TIM_Base_SetConfig+0x140>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d108      	bne.n	8006936 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800692a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	685b      	ldr	r3, [r3, #4]
 8006930:	68fa      	ldr	r2, [r7, #12]
 8006932:	4313      	orrs	r3, r2
 8006934:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	4a33      	ldr	r2, [pc, #204]	; (8006a08 <TIM_Base_SetConfig+0x12c>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d023      	beq.n	8006986 <TIM_Base_SetConfig+0xaa>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006944:	d01f      	beq.n	8006986 <TIM_Base_SetConfig+0xaa>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	4a30      	ldr	r2, [pc, #192]	; (8006a0c <TIM_Base_SetConfig+0x130>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d01b      	beq.n	8006986 <TIM_Base_SetConfig+0xaa>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	4a2f      	ldr	r2, [pc, #188]	; (8006a10 <TIM_Base_SetConfig+0x134>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d017      	beq.n	8006986 <TIM_Base_SetConfig+0xaa>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	4a2e      	ldr	r2, [pc, #184]	; (8006a14 <TIM_Base_SetConfig+0x138>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d013      	beq.n	8006986 <TIM_Base_SetConfig+0xaa>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	4a2d      	ldr	r2, [pc, #180]	; (8006a18 <TIM_Base_SetConfig+0x13c>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d00f      	beq.n	8006986 <TIM_Base_SetConfig+0xaa>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	4a2d      	ldr	r2, [pc, #180]	; (8006a20 <TIM_Base_SetConfig+0x144>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d00b      	beq.n	8006986 <TIM_Base_SetConfig+0xaa>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	4a2c      	ldr	r2, [pc, #176]	; (8006a24 <TIM_Base_SetConfig+0x148>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d007      	beq.n	8006986 <TIM_Base_SetConfig+0xaa>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	4a2b      	ldr	r2, [pc, #172]	; (8006a28 <TIM_Base_SetConfig+0x14c>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d003      	beq.n	8006986 <TIM_Base_SetConfig+0xaa>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	4a26      	ldr	r2, [pc, #152]	; (8006a1c <TIM_Base_SetConfig+0x140>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d108      	bne.n	8006998 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800698c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	68db      	ldr	r3, [r3, #12]
 8006992:	68fa      	ldr	r2, [r7, #12]
 8006994:	4313      	orrs	r3, r2
 8006996:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	695b      	ldr	r3, [r3, #20]
 80069a2:	4313      	orrs	r3, r2
 80069a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	68fa      	ldr	r2, [r7, #12]
 80069aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	689a      	ldr	r2, [r3, #8]
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	681a      	ldr	r2, [r3, #0]
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	4a12      	ldr	r2, [pc, #72]	; (8006a08 <TIM_Base_SetConfig+0x12c>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d013      	beq.n	80069ec <TIM_Base_SetConfig+0x110>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	4a14      	ldr	r2, [pc, #80]	; (8006a18 <TIM_Base_SetConfig+0x13c>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d00f      	beq.n	80069ec <TIM_Base_SetConfig+0x110>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	4a14      	ldr	r2, [pc, #80]	; (8006a20 <TIM_Base_SetConfig+0x144>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d00b      	beq.n	80069ec <TIM_Base_SetConfig+0x110>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	4a13      	ldr	r2, [pc, #76]	; (8006a24 <TIM_Base_SetConfig+0x148>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d007      	beq.n	80069ec <TIM_Base_SetConfig+0x110>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	4a12      	ldr	r2, [pc, #72]	; (8006a28 <TIM_Base_SetConfig+0x14c>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d003      	beq.n	80069ec <TIM_Base_SetConfig+0x110>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	4a0d      	ldr	r2, [pc, #52]	; (8006a1c <TIM_Base_SetConfig+0x140>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d103      	bne.n	80069f4 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	691a      	ldr	r2, [r3, #16]
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2201      	movs	r2, #1
 80069f8:	615a      	str	r2, [r3, #20]
}
 80069fa:	bf00      	nop
 80069fc:	3714      	adds	r7, #20
 80069fe:	46bd      	mov	sp, r7
 8006a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a04:	4770      	bx	lr
 8006a06:	bf00      	nop
 8006a08:	40012c00 	.word	0x40012c00
 8006a0c:	40000400 	.word	0x40000400
 8006a10:	40000800 	.word	0x40000800
 8006a14:	40000c00 	.word	0x40000c00
 8006a18:	40013400 	.word	0x40013400
 8006a1c:	40015000 	.word	0x40015000
 8006a20:	40014000 	.word	0x40014000
 8006a24:	40014400 	.word	0x40014400
 8006a28:	40014800 	.word	0x40014800

08006a2c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b087      	sub	sp, #28
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
 8006a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6a1b      	ldr	r3, [r3, #32]
 8006a3a:	f023 0201 	bic.w	r2, r3, #1
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6a1b      	ldr	r3, [r3, #32]
 8006a46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	699b      	ldr	r3, [r3, #24]
 8006a52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	f023 0303 	bic.w	r3, r3, #3
 8006a66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	68fa      	ldr	r2, [r7, #12]
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006a72:	697b      	ldr	r3, [r7, #20]
 8006a74:	f023 0302 	bic.w	r3, r3, #2
 8006a78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	689b      	ldr	r3, [r3, #8]
 8006a7e:	697a      	ldr	r2, [r7, #20]
 8006a80:	4313      	orrs	r3, r2
 8006a82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	4a30      	ldr	r2, [pc, #192]	; (8006b48 <TIM_OC1_SetConfig+0x11c>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d013      	beq.n	8006ab4 <TIM_OC1_SetConfig+0x88>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	4a2f      	ldr	r2, [pc, #188]	; (8006b4c <TIM_OC1_SetConfig+0x120>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d00f      	beq.n	8006ab4 <TIM_OC1_SetConfig+0x88>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	4a2e      	ldr	r2, [pc, #184]	; (8006b50 <TIM_OC1_SetConfig+0x124>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d00b      	beq.n	8006ab4 <TIM_OC1_SetConfig+0x88>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	4a2d      	ldr	r2, [pc, #180]	; (8006b54 <TIM_OC1_SetConfig+0x128>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d007      	beq.n	8006ab4 <TIM_OC1_SetConfig+0x88>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	4a2c      	ldr	r2, [pc, #176]	; (8006b58 <TIM_OC1_SetConfig+0x12c>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d003      	beq.n	8006ab4 <TIM_OC1_SetConfig+0x88>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	4a2b      	ldr	r2, [pc, #172]	; (8006b5c <TIM_OC1_SetConfig+0x130>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d10c      	bne.n	8006ace <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006ab4:	697b      	ldr	r3, [r7, #20]
 8006ab6:	f023 0308 	bic.w	r3, r3, #8
 8006aba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	68db      	ldr	r3, [r3, #12]
 8006ac0:	697a      	ldr	r2, [r7, #20]
 8006ac2:	4313      	orrs	r3, r2
 8006ac4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	f023 0304 	bic.w	r3, r3, #4
 8006acc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	4a1d      	ldr	r2, [pc, #116]	; (8006b48 <TIM_OC1_SetConfig+0x11c>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d013      	beq.n	8006afe <TIM_OC1_SetConfig+0xd2>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	4a1c      	ldr	r2, [pc, #112]	; (8006b4c <TIM_OC1_SetConfig+0x120>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d00f      	beq.n	8006afe <TIM_OC1_SetConfig+0xd2>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	4a1b      	ldr	r2, [pc, #108]	; (8006b50 <TIM_OC1_SetConfig+0x124>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d00b      	beq.n	8006afe <TIM_OC1_SetConfig+0xd2>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	4a1a      	ldr	r2, [pc, #104]	; (8006b54 <TIM_OC1_SetConfig+0x128>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d007      	beq.n	8006afe <TIM_OC1_SetConfig+0xd2>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	4a19      	ldr	r2, [pc, #100]	; (8006b58 <TIM_OC1_SetConfig+0x12c>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d003      	beq.n	8006afe <TIM_OC1_SetConfig+0xd2>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	4a18      	ldr	r2, [pc, #96]	; (8006b5c <TIM_OC1_SetConfig+0x130>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d111      	bne.n	8006b22 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006b06:	693b      	ldr	r3, [r7, #16]
 8006b08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006b0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	695b      	ldr	r3, [r3, #20]
 8006b12:	693a      	ldr	r2, [r7, #16]
 8006b14:	4313      	orrs	r3, r2
 8006b16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	699b      	ldr	r3, [r3, #24]
 8006b1c:	693a      	ldr	r2, [r7, #16]
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	693a      	ldr	r2, [r7, #16]
 8006b26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	68fa      	ldr	r2, [r7, #12]
 8006b2c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	685a      	ldr	r2, [r3, #4]
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	697a      	ldr	r2, [r7, #20]
 8006b3a:	621a      	str	r2, [r3, #32]
}
 8006b3c:	bf00      	nop
 8006b3e:	371c      	adds	r7, #28
 8006b40:	46bd      	mov	sp, r7
 8006b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b46:	4770      	bx	lr
 8006b48:	40012c00 	.word	0x40012c00
 8006b4c:	40013400 	.word	0x40013400
 8006b50:	40014000 	.word	0x40014000
 8006b54:	40014400 	.word	0x40014400
 8006b58:	40014800 	.word	0x40014800
 8006b5c:	40015000 	.word	0x40015000

08006b60 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b60:	b480      	push	{r7}
 8006b62:	b087      	sub	sp, #28
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
 8006b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6a1b      	ldr	r3, [r3, #32]
 8006b6e:	f023 0210 	bic.w	r2, r3, #16
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6a1b      	ldr	r3, [r3, #32]
 8006b7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	685b      	ldr	r3, [r3, #4]
 8006b80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	699b      	ldr	r3, [r3, #24]
 8006b86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006b8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	021b      	lsls	r3, r3, #8
 8006ba2:	68fa      	ldr	r2, [r7, #12]
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006ba8:	697b      	ldr	r3, [r7, #20]
 8006baa:	f023 0320 	bic.w	r3, r3, #32
 8006bae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	689b      	ldr	r3, [r3, #8]
 8006bb4:	011b      	lsls	r3, r3, #4
 8006bb6:	697a      	ldr	r2, [r7, #20]
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	4a2c      	ldr	r2, [pc, #176]	; (8006c70 <TIM_OC2_SetConfig+0x110>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d007      	beq.n	8006bd4 <TIM_OC2_SetConfig+0x74>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	4a2b      	ldr	r2, [pc, #172]	; (8006c74 <TIM_OC2_SetConfig+0x114>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d003      	beq.n	8006bd4 <TIM_OC2_SetConfig+0x74>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	4a2a      	ldr	r2, [pc, #168]	; (8006c78 <TIM_OC2_SetConfig+0x118>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d10d      	bne.n	8006bf0 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006bda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	68db      	ldr	r3, [r3, #12]
 8006be0:	011b      	lsls	r3, r3, #4
 8006be2:	697a      	ldr	r2, [r7, #20]
 8006be4:	4313      	orrs	r3, r2
 8006be6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006be8:	697b      	ldr	r3, [r7, #20]
 8006bea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	4a1f      	ldr	r2, [pc, #124]	; (8006c70 <TIM_OC2_SetConfig+0x110>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d013      	beq.n	8006c20 <TIM_OC2_SetConfig+0xc0>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	4a1e      	ldr	r2, [pc, #120]	; (8006c74 <TIM_OC2_SetConfig+0x114>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d00f      	beq.n	8006c20 <TIM_OC2_SetConfig+0xc0>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	4a1e      	ldr	r2, [pc, #120]	; (8006c7c <TIM_OC2_SetConfig+0x11c>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d00b      	beq.n	8006c20 <TIM_OC2_SetConfig+0xc0>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	4a1d      	ldr	r2, [pc, #116]	; (8006c80 <TIM_OC2_SetConfig+0x120>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d007      	beq.n	8006c20 <TIM_OC2_SetConfig+0xc0>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	4a1c      	ldr	r2, [pc, #112]	; (8006c84 <TIM_OC2_SetConfig+0x124>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d003      	beq.n	8006c20 <TIM_OC2_SetConfig+0xc0>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	4a17      	ldr	r2, [pc, #92]	; (8006c78 <TIM_OC2_SetConfig+0x118>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d113      	bne.n	8006c48 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006c20:	693b      	ldr	r3, [r7, #16]
 8006c22:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006c26:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006c28:	693b      	ldr	r3, [r7, #16]
 8006c2a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006c2e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	695b      	ldr	r3, [r3, #20]
 8006c34:	009b      	lsls	r3, r3, #2
 8006c36:	693a      	ldr	r2, [r7, #16]
 8006c38:	4313      	orrs	r3, r2
 8006c3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	699b      	ldr	r3, [r3, #24]
 8006c40:	009b      	lsls	r3, r3, #2
 8006c42:	693a      	ldr	r2, [r7, #16]
 8006c44:	4313      	orrs	r3, r2
 8006c46:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	693a      	ldr	r2, [r7, #16]
 8006c4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	68fa      	ldr	r2, [r7, #12]
 8006c52:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	685a      	ldr	r2, [r3, #4]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	697a      	ldr	r2, [r7, #20]
 8006c60:	621a      	str	r2, [r3, #32]
}
 8006c62:	bf00      	nop
 8006c64:	371c      	adds	r7, #28
 8006c66:	46bd      	mov	sp, r7
 8006c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6c:	4770      	bx	lr
 8006c6e:	bf00      	nop
 8006c70:	40012c00 	.word	0x40012c00
 8006c74:	40013400 	.word	0x40013400
 8006c78:	40015000 	.word	0x40015000
 8006c7c:	40014000 	.word	0x40014000
 8006c80:	40014400 	.word	0x40014400
 8006c84:	40014800 	.word	0x40014800

08006c88 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	b087      	sub	sp, #28
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
 8006c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6a1b      	ldr	r3, [r3, #32]
 8006c96:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6a1b      	ldr	r3, [r3, #32]
 8006ca2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	685b      	ldr	r3, [r3, #4]
 8006ca8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	69db      	ldr	r3, [r3, #28]
 8006cae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006cb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	f023 0303 	bic.w	r3, r3, #3
 8006cc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	68fa      	ldr	r2, [r7, #12]
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006cd4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	689b      	ldr	r3, [r3, #8]
 8006cda:	021b      	lsls	r3, r3, #8
 8006cdc:	697a      	ldr	r2, [r7, #20]
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	4a2b      	ldr	r2, [pc, #172]	; (8006d94 <TIM_OC3_SetConfig+0x10c>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d007      	beq.n	8006cfa <TIM_OC3_SetConfig+0x72>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	4a2a      	ldr	r2, [pc, #168]	; (8006d98 <TIM_OC3_SetConfig+0x110>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d003      	beq.n	8006cfa <TIM_OC3_SetConfig+0x72>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	4a29      	ldr	r2, [pc, #164]	; (8006d9c <TIM_OC3_SetConfig+0x114>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d10d      	bne.n	8006d16 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006d00:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	68db      	ldr	r3, [r3, #12]
 8006d06:	021b      	lsls	r3, r3, #8
 8006d08:	697a      	ldr	r2, [r7, #20]
 8006d0a:	4313      	orrs	r3, r2
 8006d0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006d0e:	697b      	ldr	r3, [r7, #20]
 8006d10:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006d14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	4a1e      	ldr	r2, [pc, #120]	; (8006d94 <TIM_OC3_SetConfig+0x10c>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d013      	beq.n	8006d46 <TIM_OC3_SetConfig+0xbe>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	4a1d      	ldr	r2, [pc, #116]	; (8006d98 <TIM_OC3_SetConfig+0x110>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d00f      	beq.n	8006d46 <TIM_OC3_SetConfig+0xbe>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	4a1d      	ldr	r2, [pc, #116]	; (8006da0 <TIM_OC3_SetConfig+0x118>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d00b      	beq.n	8006d46 <TIM_OC3_SetConfig+0xbe>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	4a1c      	ldr	r2, [pc, #112]	; (8006da4 <TIM_OC3_SetConfig+0x11c>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d007      	beq.n	8006d46 <TIM_OC3_SetConfig+0xbe>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	4a1b      	ldr	r2, [pc, #108]	; (8006da8 <TIM_OC3_SetConfig+0x120>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d003      	beq.n	8006d46 <TIM_OC3_SetConfig+0xbe>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	4a16      	ldr	r2, [pc, #88]	; (8006d9c <TIM_OC3_SetConfig+0x114>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d113      	bne.n	8006d6e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006d46:	693b      	ldr	r3, [r7, #16]
 8006d48:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006d4e:	693b      	ldr	r3, [r7, #16]
 8006d50:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006d54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	695b      	ldr	r3, [r3, #20]
 8006d5a:	011b      	lsls	r3, r3, #4
 8006d5c:	693a      	ldr	r2, [r7, #16]
 8006d5e:	4313      	orrs	r3, r2
 8006d60:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	699b      	ldr	r3, [r3, #24]
 8006d66:	011b      	lsls	r3, r3, #4
 8006d68:	693a      	ldr	r2, [r7, #16]
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	693a      	ldr	r2, [r7, #16]
 8006d72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	68fa      	ldr	r2, [r7, #12]
 8006d78:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	685a      	ldr	r2, [r3, #4]
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	697a      	ldr	r2, [r7, #20]
 8006d86:	621a      	str	r2, [r3, #32]
}
 8006d88:	bf00      	nop
 8006d8a:	371c      	adds	r7, #28
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d92:	4770      	bx	lr
 8006d94:	40012c00 	.word	0x40012c00
 8006d98:	40013400 	.word	0x40013400
 8006d9c:	40015000 	.word	0x40015000
 8006da0:	40014000 	.word	0x40014000
 8006da4:	40014400 	.word	0x40014400
 8006da8:	40014800 	.word	0x40014800

08006dac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006dac:	b480      	push	{r7}
 8006dae:	b087      	sub	sp, #28
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
 8006db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6a1b      	ldr	r3, [r3, #32]
 8006dba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6a1b      	ldr	r3, [r3, #32]
 8006dc6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	685b      	ldr	r3, [r3, #4]
 8006dcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	69db      	ldr	r3, [r3, #28]
 8006dd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006dda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006de6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	021b      	lsls	r3, r3, #8
 8006dee:	68fa      	ldr	r2, [r7, #12]
 8006df0:	4313      	orrs	r3, r2
 8006df2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006df4:	697b      	ldr	r3, [r7, #20]
 8006df6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006dfa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	689b      	ldr	r3, [r3, #8]
 8006e00:	031b      	lsls	r3, r3, #12
 8006e02:	697a      	ldr	r2, [r7, #20]
 8006e04:	4313      	orrs	r3, r2
 8006e06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	4a2c      	ldr	r2, [pc, #176]	; (8006ebc <TIM_OC4_SetConfig+0x110>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d007      	beq.n	8006e20 <TIM_OC4_SetConfig+0x74>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	4a2b      	ldr	r2, [pc, #172]	; (8006ec0 <TIM_OC4_SetConfig+0x114>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d003      	beq.n	8006e20 <TIM_OC4_SetConfig+0x74>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	4a2a      	ldr	r2, [pc, #168]	; (8006ec4 <TIM_OC4_SetConfig+0x118>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d10d      	bne.n	8006e3c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006e20:	697b      	ldr	r3, [r7, #20]
 8006e22:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006e26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	68db      	ldr	r3, [r3, #12]
 8006e2c:	031b      	lsls	r3, r3, #12
 8006e2e:	697a      	ldr	r2, [r7, #20]
 8006e30:	4313      	orrs	r3, r2
 8006e32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006e34:	697b      	ldr	r3, [r7, #20]
 8006e36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e3a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	4a1f      	ldr	r2, [pc, #124]	; (8006ebc <TIM_OC4_SetConfig+0x110>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d013      	beq.n	8006e6c <TIM_OC4_SetConfig+0xc0>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	4a1e      	ldr	r2, [pc, #120]	; (8006ec0 <TIM_OC4_SetConfig+0x114>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d00f      	beq.n	8006e6c <TIM_OC4_SetConfig+0xc0>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	4a1e      	ldr	r2, [pc, #120]	; (8006ec8 <TIM_OC4_SetConfig+0x11c>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d00b      	beq.n	8006e6c <TIM_OC4_SetConfig+0xc0>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	4a1d      	ldr	r2, [pc, #116]	; (8006ecc <TIM_OC4_SetConfig+0x120>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d007      	beq.n	8006e6c <TIM_OC4_SetConfig+0xc0>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	4a1c      	ldr	r2, [pc, #112]	; (8006ed0 <TIM_OC4_SetConfig+0x124>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d003      	beq.n	8006e6c <TIM_OC4_SetConfig+0xc0>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	4a17      	ldr	r2, [pc, #92]	; (8006ec4 <TIM_OC4_SetConfig+0x118>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d113      	bne.n	8006e94 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e72:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006e74:	693b      	ldr	r3, [r7, #16]
 8006e76:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006e7a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	695b      	ldr	r3, [r3, #20]
 8006e80:	019b      	lsls	r3, r3, #6
 8006e82:	693a      	ldr	r2, [r7, #16]
 8006e84:	4313      	orrs	r3, r2
 8006e86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	699b      	ldr	r3, [r3, #24]
 8006e8c:	019b      	lsls	r3, r3, #6
 8006e8e:	693a      	ldr	r2, [r7, #16]
 8006e90:	4313      	orrs	r3, r2
 8006e92:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	693a      	ldr	r2, [r7, #16]
 8006e98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	68fa      	ldr	r2, [r7, #12]
 8006e9e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	685a      	ldr	r2, [r3, #4]
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	697a      	ldr	r2, [r7, #20]
 8006eac:	621a      	str	r2, [r3, #32]
}
 8006eae:	bf00      	nop
 8006eb0:	371c      	adds	r7, #28
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb8:	4770      	bx	lr
 8006eba:	bf00      	nop
 8006ebc:	40012c00 	.word	0x40012c00
 8006ec0:	40013400 	.word	0x40013400
 8006ec4:	40015000 	.word	0x40015000
 8006ec8:	40014000 	.word	0x40014000
 8006ecc:	40014400 	.word	0x40014400
 8006ed0:	40014800 	.word	0x40014800

08006ed4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b087      	sub	sp, #28
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
 8006edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6a1b      	ldr	r3, [r3, #32]
 8006ee2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6a1b      	ldr	r3, [r3, #32]
 8006eee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	685b      	ldr	r3, [r3, #4]
 8006ef4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006efa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	68fa      	ldr	r2, [r7, #12]
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006f12:	693b      	ldr	r3, [r7, #16]
 8006f14:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006f18:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	689b      	ldr	r3, [r3, #8]
 8006f1e:	041b      	lsls	r3, r3, #16
 8006f20:	693a      	ldr	r2, [r7, #16]
 8006f22:	4313      	orrs	r3, r2
 8006f24:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	4a19      	ldr	r2, [pc, #100]	; (8006f90 <TIM_OC5_SetConfig+0xbc>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d013      	beq.n	8006f56 <TIM_OC5_SetConfig+0x82>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	4a18      	ldr	r2, [pc, #96]	; (8006f94 <TIM_OC5_SetConfig+0xc0>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d00f      	beq.n	8006f56 <TIM_OC5_SetConfig+0x82>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	4a17      	ldr	r2, [pc, #92]	; (8006f98 <TIM_OC5_SetConfig+0xc4>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d00b      	beq.n	8006f56 <TIM_OC5_SetConfig+0x82>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	4a16      	ldr	r2, [pc, #88]	; (8006f9c <TIM_OC5_SetConfig+0xc8>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d007      	beq.n	8006f56 <TIM_OC5_SetConfig+0x82>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	4a15      	ldr	r2, [pc, #84]	; (8006fa0 <TIM_OC5_SetConfig+0xcc>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d003      	beq.n	8006f56 <TIM_OC5_SetConfig+0x82>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	4a14      	ldr	r2, [pc, #80]	; (8006fa4 <TIM_OC5_SetConfig+0xd0>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d109      	bne.n	8006f6a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f5c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	695b      	ldr	r3, [r3, #20]
 8006f62:	021b      	lsls	r3, r3, #8
 8006f64:	697a      	ldr	r2, [r7, #20]
 8006f66:	4313      	orrs	r3, r2
 8006f68:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	697a      	ldr	r2, [r7, #20]
 8006f6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	68fa      	ldr	r2, [r7, #12]
 8006f74:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	685a      	ldr	r2, [r3, #4]
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	693a      	ldr	r2, [r7, #16]
 8006f82:	621a      	str	r2, [r3, #32]
}
 8006f84:	bf00      	nop
 8006f86:	371c      	adds	r7, #28
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8e:	4770      	bx	lr
 8006f90:	40012c00 	.word	0x40012c00
 8006f94:	40013400 	.word	0x40013400
 8006f98:	40014000 	.word	0x40014000
 8006f9c:	40014400 	.word	0x40014400
 8006fa0:	40014800 	.word	0x40014800
 8006fa4:	40015000 	.word	0x40015000

08006fa8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b087      	sub	sp, #28
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
 8006fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6a1b      	ldr	r3, [r3, #32]
 8006fb6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6a1b      	ldr	r3, [r3, #32]
 8006fc2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	685b      	ldr	r3, [r3, #4]
 8006fc8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006fd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	021b      	lsls	r3, r3, #8
 8006fe2:	68fa      	ldr	r2, [r7, #12]
 8006fe4:	4313      	orrs	r3, r2
 8006fe6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006fe8:	693b      	ldr	r3, [r7, #16]
 8006fea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006fee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	689b      	ldr	r3, [r3, #8]
 8006ff4:	051b      	lsls	r3, r3, #20
 8006ff6:	693a      	ldr	r2, [r7, #16]
 8006ff8:	4313      	orrs	r3, r2
 8006ffa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	4a1a      	ldr	r2, [pc, #104]	; (8007068 <TIM_OC6_SetConfig+0xc0>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d013      	beq.n	800702c <TIM_OC6_SetConfig+0x84>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	4a19      	ldr	r2, [pc, #100]	; (800706c <TIM_OC6_SetConfig+0xc4>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d00f      	beq.n	800702c <TIM_OC6_SetConfig+0x84>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	4a18      	ldr	r2, [pc, #96]	; (8007070 <TIM_OC6_SetConfig+0xc8>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d00b      	beq.n	800702c <TIM_OC6_SetConfig+0x84>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	4a17      	ldr	r2, [pc, #92]	; (8007074 <TIM_OC6_SetConfig+0xcc>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d007      	beq.n	800702c <TIM_OC6_SetConfig+0x84>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	4a16      	ldr	r2, [pc, #88]	; (8007078 <TIM_OC6_SetConfig+0xd0>)
 8007020:	4293      	cmp	r3, r2
 8007022:	d003      	beq.n	800702c <TIM_OC6_SetConfig+0x84>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	4a15      	ldr	r2, [pc, #84]	; (800707c <TIM_OC6_SetConfig+0xd4>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d109      	bne.n	8007040 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007032:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	695b      	ldr	r3, [r3, #20]
 8007038:	029b      	lsls	r3, r3, #10
 800703a:	697a      	ldr	r2, [r7, #20]
 800703c:	4313      	orrs	r3, r2
 800703e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	697a      	ldr	r2, [r7, #20]
 8007044:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	68fa      	ldr	r2, [r7, #12]
 800704a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	685a      	ldr	r2, [r3, #4]
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	693a      	ldr	r2, [r7, #16]
 8007058:	621a      	str	r2, [r3, #32]
}
 800705a:	bf00      	nop
 800705c:	371c      	adds	r7, #28
 800705e:	46bd      	mov	sp, r7
 8007060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007064:	4770      	bx	lr
 8007066:	bf00      	nop
 8007068:	40012c00 	.word	0x40012c00
 800706c:	40013400 	.word	0x40013400
 8007070:	40014000 	.word	0x40014000
 8007074:	40014400 	.word	0x40014400
 8007078:	40014800 	.word	0x40014800
 800707c:	40015000 	.word	0x40015000

08007080 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007080:	b480      	push	{r7}
 8007082:	b087      	sub	sp, #28
 8007084:	af00      	add	r7, sp, #0
 8007086:	60f8      	str	r0, [r7, #12]
 8007088:	60b9      	str	r1, [r7, #8]
 800708a:	607a      	str	r2, [r7, #4]
 800708c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	6a1b      	ldr	r3, [r3, #32]
 8007092:	f023 0201 	bic.w	r2, r3, #1
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	699b      	ldr	r3, [r3, #24]
 800709e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	6a1b      	ldr	r3, [r3, #32]
 80070a4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	4a28      	ldr	r2, [pc, #160]	; (800714c <TIM_TI1_SetConfig+0xcc>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d01b      	beq.n	80070e6 <TIM_TI1_SetConfig+0x66>
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070b4:	d017      	beq.n	80070e6 <TIM_TI1_SetConfig+0x66>
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	4a25      	ldr	r2, [pc, #148]	; (8007150 <TIM_TI1_SetConfig+0xd0>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d013      	beq.n	80070e6 <TIM_TI1_SetConfig+0x66>
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	4a24      	ldr	r2, [pc, #144]	; (8007154 <TIM_TI1_SetConfig+0xd4>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d00f      	beq.n	80070e6 <TIM_TI1_SetConfig+0x66>
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	4a23      	ldr	r2, [pc, #140]	; (8007158 <TIM_TI1_SetConfig+0xd8>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d00b      	beq.n	80070e6 <TIM_TI1_SetConfig+0x66>
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	4a22      	ldr	r2, [pc, #136]	; (800715c <TIM_TI1_SetConfig+0xdc>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d007      	beq.n	80070e6 <TIM_TI1_SetConfig+0x66>
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	4a21      	ldr	r2, [pc, #132]	; (8007160 <TIM_TI1_SetConfig+0xe0>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d003      	beq.n	80070e6 <TIM_TI1_SetConfig+0x66>
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	4a20      	ldr	r2, [pc, #128]	; (8007164 <TIM_TI1_SetConfig+0xe4>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d101      	bne.n	80070ea <TIM_TI1_SetConfig+0x6a>
 80070e6:	2301      	movs	r3, #1
 80070e8:	e000      	b.n	80070ec <TIM_TI1_SetConfig+0x6c>
 80070ea:	2300      	movs	r3, #0
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d008      	beq.n	8007102 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80070f0:	697b      	ldr	r3, [r7, #20]
 80070f2:	f023 0303 	bic.w	r3, r3, #3
 80070f6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80070f8:	697a      	ldr	r2, [r7, #20]
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	4313      	orrs	r3, r2
 80070fe:	617b      	str	r3, [r7, #20]
 8007100:	e003      	b.n	800710a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	f043 0301 	orr.w	r3, r3, #1
 8007108:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800710a:	697b      	ldr	r3, [r7, #20]
 800710c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007110:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	011b      	lsls	r3, r3, #4
 8007116:	b2db      	uxtb	r3, r3
 8007118:	697a      	ldr	r2, [r7, #20]
 800711a:	4313      	orrs	r3, r2
 800711c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800711e:	693b      	ldr	r3, [r7, #16]
 8007120:	f023 030a 	bic.w	r3, r3, #10
 8007124:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	f003 030a 	and.w	r3, r3, #10
 800712c:	693a      	ldr	r2, [r7, #16]
 800712e:	4313      	orrs	r3, r2
 8007130:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	697a      	ldr	r2, [r7, #20]
 8007136:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	693a      	ldr	r2, [r7, #16]
 800713c:	621a      	str	r2, [r3, #32]
}
 800713e:	bf00      	nop
 8007140:	371c      	adds	r7, #28
 8007142:	46bd      	mov	sp, r7
 8007144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007148:	4770      	bx	lr
 800714a:	bf00      	nop
 800714c:	40012c00 	.word	0x40012c00
 8007150:	40000400 	.word	0x40000400
 8007154:	40000800 	.word	0x40000800
 8007158:	40000c00 	.word	0x40000c00
 800715c:	40013400 	.word	0x40013400
 8007160:	40014000 	.word	0x40014000
 8007164:	40015000 	.word	0x40015000

08007168 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007168:	b480      	push	{r7}
 800716a:	b087      	sub	sp, #28
 800716c:	af00      	add	r7, sp, #0
 800716e:	60f8      	str	r0, [r7, #12]
 8007170:	60b9      	str	r1, [r7, #8]
 8007172:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	f003 031f 	and.w	r3, r3, #31
 800717a:	2201      	movs	r2, #1
 800717c:	fa02 f303 	lsl.w	r3, r2, r3
 8007180:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	6a1a      	ldr	r2, [r3, #32]
 8007186:	697b      	ldr	r3, [r7, #20]
 8007188:	43db      	mvns	r3, r3
 800718a:	401a      	ands	r2, r3
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	6a1a      	ldr	r2, [r3, #32]
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	f003 031f 	and.w	r3, r3, #31
 800719a:	6879      	ldr	r1, [r7, #4]
 800719c:	fa01 f303 	lsl.w	r3, r1, r3
 80071a0:	431a      	orrs	r2, r3
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	621a      	str	r2, [r3, #32]
}
 80071a6:	bf00      	nop
 80071a8:	371c      	adds	r7, #28
 80071aa:	46bd      	mov	sp, r7
 80071ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b0:	4770      	bx	lr

080071b2 <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, TIM_HallSensor_InitTypeDef *sConfig)
{
 80071b2:	b580      	push	{r7, lr}
 80071b4:	b08a      	sub	sp, #40	; 0x28
 80071b6:	af00      	add	r7, sp, #0
 80071b8:	6078      	str	r0, [r7, #4]
 80071ba:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d101      	bne.n	80071c6 <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 80071c2:	2301      	movs	r3, #1
 80071c4:	e0a0      	b.n	8007308 <HAL_TIMEx_HallSensor_Init+0x156>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071cc:	b2db      	uxtb	r3, r3
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d106      	bne.n	80071e0 <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2200      	movs	r2, #0
 80071d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	f7fa fe44 	bl	8001e68 <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2202      	movs	r2, #2
 80071e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681a      	ldr	r2, [r3, #0]
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	3304      	adds	r3, #4
 80071f0:	4619      	mov	r1, r3
 80071f2:	4610      	mov	r0, r2
 80071f4:	f7ff fb72 	bl	80068dc <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6818      	ldr	r0, [r3, #0]
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	6819      	ldr	r1, [r3, #0]
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	689b      	ldr	r3, [r3, #8]
 8007204:	2203      	movs	r2, #3
 8007206:	f7ff ff3b 	bl	8007080 <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	699a      	ldr	r2, [r3, #24]
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f022 020c 	bic.w	r2, r2, #12
 8007218:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	6999      	ldr	r1, [r3, #24]
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	685a      	ldr	r2, [r3, #4]
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	430a      	orrs	r2, r1
 800722a:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	685a      	ldr	r2, [r3, #4]
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800723a:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	689b      	ldr	r3, [r3, #8]
 8007242:	687a      	ldr	r2, [r7, #4]
 8007244:	6812      	ldr	r2, [r2, #0]
 8007246:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800724a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800724e:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	689a      	ldr	r2, [r3, #8]
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800725e:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	689b      	ldr	r3, [r3, #8]
 8007266:	687a      	ldr	r2, [r7, #4]
 8007268:	6812      	ldr	r2, [r2, #0]
 800726a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800726e:	f023 0307 	bic.w	r3, r3, #7
 8007272:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	689a      	ldr	r2, [r3, #8]
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f042 0204 	orr.w	r2, r2, #4
 8007282:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 8007284:	2300      	movs	r3, #0
 8007286:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 8007288:	2300      	movs	r3, #0
 800728a:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 800728c:	2370      	movs	r3, #112	; 0x70
 800728e:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8007290:	2300      	movs	r3, #0
 8007292:	627b      	str	r3, [r7, #36]	; 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8007294:	2300      	movs	r3, #0
 8007296:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007298:	2300      	movs	r3, #0
 800729a:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	68db      	ldr	r3, [r3, #12]
 80072a0:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f107 020c 	add.w	r2, r7, #12
 80072aa:	4611      	mov	r1, r2
 80072ac:	4618      	mov	r0, r3
 80072ae:	f7ff fc57 	bl	8006b60 <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	685b      	ldr	r3, [r3, #4]
 80072b8:	687a      	ldr	r2, [r7, #4]
 80072ba:	6812      	ldr	r2, [r2, #0]
 80072bc:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80072c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072c4:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	685a      	ldr	r2, [r3, #4]
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 80072d4:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2201      	movs	r2, #1
 80072da:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2201      	movs	r2, #1
 80072e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2201      	movs	r2, #1
 80072ea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2201      	movs	r2, #1
 80072f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2201      	movs	r2, #1
 80072fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2201      	movs	r2, #1
 8007302:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007306:	2300      	movs	r3, #0
}
 8007308:	4618      	mov	r0, r3
 800730a:	3728      	adds	r7, #40	; 0x28
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}

08007310 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b084      	sub	sp, #16
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
 8007318:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d109      	bne.n	8007334 <HAL_TIMEx_PWMN_Start+0x24>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007326:	b2db      	uxtb	r3, r3
 8007328:	2b01      	cmp	r3, #1
 800732a:	bf14      	ite	ne
 800732c:	2301      	movne	r3, #1
 800732e:	2300      	moveq	r3, #0
 8007330:	b2db      	uxtb	r3, r3
 8007332:	e022      	b.n	800737a <HAL_TIMEx_PWMN_Start+0x6a>
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	2b04      	cmp	r3, #4
 8007338:	d109      	bne.n	800734e <HAL_TIMEx_PWMN_Start+0x3e>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007340:	b2db      	uxtb	r3, r3
 8007342:	2b01      	cmp	r3, #1
 8007344:	bf14      	ite	ne
 8007346:	2301      	movne	r3, #1
 8007348:	2300      	moveq	r3, #0
 800734a:	b2db      	uxtb	r3, r3
 800734c:	e015      	b.n	800737a <HAL_TIMEx_PWMN_Start+0x6a>
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	2b08      	cmp	r3, #8
 8007352:	d109      	bne.n	8007368 <HAL_TIMEx_PWMN_Start+0x58>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800735a:	b2db      	uxtb	r3, r3
 800735c:	2b01      	cmp	r3, #1
 800735e:	bf14      	ite	ne
 8007360:	2301      	movne	r3, #1
 8007362:	2300      	moveq	r3, #0
 8007364:	b2db      	uxtb	r3, r3
 8007366:	e008      	b.n	800737a <HAL_TIMEx_PWMN_Start+0x6a>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800736e:	b2db      	uxtb	r3, r3
 8007370:	2b01      	cmp	r3, #1
 8007372:	bf14      	ite	ne
 8007374:	2301      	movne	r3, #1
 8007376:	2300      	moveq	r3, #0
 8007378:	b2db      	uxtb	r3, r3
 800737a:	2b00      	cmp	r3, #0
 800737c:	d001      	beq.n	8007382 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800737e:	2301      	movs	r3, #1
 8007380:	e073      	b.n	800746a <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d104      	bne.n	8007392 <HAL_TIMEx_PWMN_Start+0x82>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2202      	movs	r2, #2
 800738c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007390:	e013      	b.n	80073ba <HAL_TIMEx_PWMN_Start+0xaa>
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	2b04      	cmp	r3, #4
 8007396:	d104      	bne.n	80073a2 <HAL_TIMEx_PWMN_Start+0x92>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2202      	movs	r2, #2
 800739c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80073a0:	e00b      	b.n	80073ba <HAL_TIMEx_PWMN_Start+0xaa>
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	2b08      	cmp	r3, #8
 80073a6:	d104      	bne.n	80073b2 <HAL_TIMEx_PWMN_Start+0xa2>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2202      	movs	r2, #2
 80073ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80073b0:	e003      	b.n	80073ba <HAL_TIMEx_PWMN_Start+0xaa>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2202      	movs	r2, #2
 80073b6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	2204      	movs	r2, #4
 80073c0:	6839      	ldr	r1, [r7, #0]
 80073c2:	4618      	mov	r0, r3
 80073c4:	f000 fa52 	bl	800786c <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80073d6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	4a25      	ldr	r2, [pc, #148]	; (8007474 <HAL_TIMEx_PWMN_Start+0x164>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d022      	beq.n	8007428 <HAL_TIMEx_PWMN_Start+0x118>
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073ea:	d01d      	beq.n	8007428 <HAL_TIMEx_PWMN_Start+0x118>
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	4a21      	ldr	r2, [pc, #132]	; (8007478 <HAL_TIMEx_PWMN_Start+0x168>)
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d018      	beq.n	8007428 <HAL_TIMEx_PWMN_Start+0x118>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	4a20      	ldr	r2, [pc, #128]	; (800747c <HAL_TIMEx_PWMN_Start+0x16c>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d013      	beq.n	8007428 <HAL_TIMEx_PWMN_Start+0x118>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	4a1e      	ldr	r2, [pc, #120]	; (8007480 <HAL_TIMEx_PWMN_Start+0x170>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d00e      	beq.n	8007428 <HAL_TIMEx_PWMN_Start+0x118>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	4a1d      	ldr	r2, [pc, #116]	; (8007484 <HAL_TIMEx_PWMN_Start+0x174>)
 8007410:	4293      	cmp	r3, r2
 8007412:	d009      	beq.n	8007428 <HAL_TIMEx_PWMN_Start+0x118>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	4a1b      	ldr	r2, [pc, #108]	; (8007488 <HAL_TIMEx_PWMN_Start+0x178>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d004      	beq.n	8007428 <HAL_TIMEx_PWMN_Start+0x118>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	4a1a      	ldr	r2, [pc, #104]	; (800748c <HAL_TIMEx_PWMN_Start+0x17c>)
 8007424:	4293      	cmp	r3, r2
 8007426:	d115      	bne.n	8007454 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	689a      	ldr	r2, [r3, #8]
 800742e:	4b18      	ldr	r3, [pc, #96]	; (8007490 <HAL_TIMEx_PWMN_Start+0x180>)
 8007430:	4013      	ands	r3, r2
 8007432:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	2b06      	cmp	r3, #6
 8007438:	d015      	beq.n	8007466 <HAL_TIMEx_PWMN_Start+0x156>
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007440:	d011      	beq.n	8007466 <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	681a      	ldr	r2, [r3, #0]
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f042 0201 	orr.w	r2, r2, #1
 8007450:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007452:	e008      	b.n	8007466 <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	681a      	ldr	r2, [r3, #0]
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f042 0201 	orr.w	r2, r2, #1
 8007462:	601a      	str	r2, [r3, #0]
 8007464:	e000      	b.n	8007468 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007466:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007468:	2300      	movs	r3, #0
}
 800746a:	4618      	mov	r0, r3
 800746c:	3710      	adds	r7, #16
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}
 8007472:	bf00      	nop
 8007474:	40012c00 	.word	0x40012c00
 8007478:	40000400 	.word	0x40000400
 800747c:	40000800 	.word	0x40000800
 8007480:	40000c00 	.word	0x40000c00
 8007484:	40013400 	.word	0x40013400
 8007488:	40014000 	.word	0x40014000
 800748c:	40015000 	.word	0x40015000
 8007490:	00010007 	.word	0x00010007

08007494 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b082      	sub	sp, #8
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
 800749c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	2200      	movs	r2, #0
 80074a4:	6839      	ldr	r1, [r7, #0]
 80074a6:	4618      	mov	r0, r3
 80074a8:	f000 f9e0 	bl	800786c <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	6a1a      	ldr	r2, [r3, #32]
 80074b2:	f241 1311 	movw	r3, #4369	; 0x1111
 80074b6:	4013      	ands	r3, r2
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d10f      	bne.n	80074dc <HAL_TIMEx_PWMN_Stop+0x48>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	6a1a      	ldr	r2, [r3, #32]
 80074c2:	f244 4344 	movw	r3, #17476	; 0x4444
 80074c6:	4013      	ands	r3, r2
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d107      	bne.n	80074dc <HAL_TIMEx_PWMN_Stop+0x48>
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80074da:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	6a1a      	ldr	r2, [r3, #32]
 80074e2:	f241 1311 	movw	r3, #4369	; 0x1111
 80074e6:	4013      	ands	r3, r2
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d10f      	bne.n	800750c <HAL_TIMEx_PWMN_Stop+0x78>
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	6a1a      	ldr	r2, [r3, #32]
 80074f2:	f244 4344 	movw	r3, #17476	; 0x4444
 80074f6:	4013      	ands	r3, r2
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d107      	bne.n	800750c <HAL_TIMEx_PWMN_Stop+0x78>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	681a      	ldr	r2, [r3, #0]
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f022 0201 	bic.w	r2, r2, #1
 800750a:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d104      	bne.n	800751c <HAL_TIMEx_PWMN_Stop+0x88>
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2201      	movs	r2, #1
 8007516:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800751a:	e013      	b.n	8007544 <HAL_TIMEx_PWMN_Stop+0xb0>
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	2b04      	cmp	r3, #4
 8007520:	d104      	bne.n	800752c <HAL_TIMEx_PWMN_Stop+0x98>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2201      	movs	r2, #1
 8007526:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800752a:	e00b      	b.n	8007544 <HAL_TIMEx_PWMN_Stop+0xb0>
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	2b08      	cmp	r3, #8
 8007530:	d104      	bne.n	800753c <HAL_TIMEx_PWMN_Stop+0xa8>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2201      	movs	r2, #1
 8007536:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800753a:	e003      	b.n	8007544 <HAL_TIMEx_PWMN_Stop+0xb0>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2201      	movs	r2, #1
 8007540:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Return function status */
  return HAL_OK;
 8007544:	2300      	movs	r3, #0
}
 8007546:	4618      	mov	r0, r3
 8007548:	3708      	adds	r7, #8
 800754a:	46bd      	mov	sp, r7
 800754c:	bd80      	pop	{r7, pc}
	...

08007550 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007550:	b480      	push	{r7}
 8007552:	b085      	sub	sp, #20
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
 8007558:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007560:	2b01      	cmp	r3, #1
 8007562:	d101      	bne.n	8007568 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007564:	2302      	movs	r3, #2
 8007566:	e074      	b.n	8007652 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2201      	movs	r2, #1
 800756c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2202      	movs	r2, #2
 8007574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	685b      	ldr	r3, [r3, #4]
 800757e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	689b      	ldr	r3, [r3, #8]
 8007586:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	4a34      	ldr	r2, [pc, #208]	; (8007660 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800758e:	4293      	cmp	r3, r2
 8007590:	d009      	beq.n	80075a6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	4a33      	ldr	r2, [pc, #204]	; (8007664 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007598:	4293      	cmp	r3, r2
 800759a:	d004      	beq.n	80075a6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	4a31      	ldr	r2, [pc, #196]	; (8007668 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d108      	bne.n	80075b8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80075ac:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	685b      	ldr	r3, [r3, #4]
 80075b2:	68fa      	ldr	r2, [r7, #12]
 80075b4:	4313      	orrs	r3, r2
 80075b6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80075be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	68fa      	ldr	r2, [r7, #12]
 80075ca:	4313      	orrs	r3, r2
 80075cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	68fa      	ldr	r2, [r7, #12]
 80075d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4a21      	ldr	r2, [pc, #132]	; (8007660 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80075dc:	4293      	cmp	r3, r2
 80075de:	d022      	beq.n	8007626 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075e8:	d01d      	beq.n	8007626 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	4a1f      	ldr	r2, [pc, #124]	; (800766c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d018      	beq.n	8007626 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	4a1d      	ldr	r2, [pc, #116]	; (8007670 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d013      	beq.n	8007626 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	4a1c      	ldr	r2, [pc, #112]	; (8007674 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8007604:	4293      	cmp	r3, r2
 8007606:	d00e      	beq.n	8007626 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	4a15      	ldr	r2, [pc, #84]	; (8007664 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d009      	beq.n	8007626 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	4a18      	ldr	r2, [pc, #96]	; (8007678 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007618:	4293      	cmp	r3, r2
 800761a:	d004      	beq.n	8007626 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4a11      	ldr	r2, [pc, #68]	; (8007668 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d10c      	bne.n	8007640 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800762c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	689b      	ldr	r3, [r3, #8]
 8007632:	68ba      	ldr	r2, [r7, #8]
 8007634:	4313      	orrs	r3, r2
 8007636:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	68ba      	ldr	r2, [r7, #8]
 800763e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2201      	movs	r2, #1
 8007644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2200      	movs	r2, #0
 800764c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007650:	2300      	movs	r3, #0
}
 8007652:	4618      	mov	r0, r3
 8007654:	3714      	adds	r7, #20
 8007656:	46bd      	mov	sp, r7
 8007658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765c:	4770      	bx	lr
 800765e:	bf00      	nop
 8007660:	40012c00 	.word	0x40012c00
 8007664:	40013400 	.word	0x40013400
 8007668:	40015000 	.word	0x40015000
 800766c:	40000400 	.word	0x40000400
 8007670:	40000800 	.word	0x40000800
 8007674:	40000c00 	.word	0x40000c00
 8007678:	40014000 	.word	0x40014000

0800767c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800767c:	b480      	push	{r7}
 800767e:	b085      	sub	sp, #20
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
 8007684:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007686:	2300      	movs	r3, #0
 8007688:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007690:	2b01      	cmp	r3, #1
 8007692:	d101      	bne.n	8007698 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007694:	2302      	movs	r3, #2
 8007696:	e096      	b.n	80077c6 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2201      	movs	r2, #1
 800769c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	68db      	ldr	r3, [r3, #12]
 80076aa:	4313      	orrs	r3, r2
 80076ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	689b      	ldr	r3, [r3, #8]
 80076b8:	4313      	orrs	r3, r2
 80076ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	685b      	ldr	r3, [r3, #4]
 80076c6:	4313      	orrs	r3, r2
 80076c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	4313      	orrs	r3, r2
 80076d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	691b      	ldr	r3, [r3, #16]
 80076e2:	4313      	orrs	r3, r2
 80076e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	695b      	ldr	r3, [r3, #20]
 80076f0:	4313      	orrs	r3, r2
 80076f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076fe:	4313      	orrs	r3, r2
 8007700:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	699b      	ldr	r3, [r3, #24]
 800770c:	041b      	lsls	r3, r3, #16
 800770e:	4313      	orrs	r3, r2
 8007710:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	4a2f      	ldr	r2, [pc, #188]	; (80077d4 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8007718:	4293      	cmp	r3, r2
 800771a:	d009      	beq.n	8007730 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	4a2d      	ldr	r2, [pc, #180]	; (80077d8 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d004      	beq.n	8007730 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	4a2c      	ldr	r2, [pc, #176]	; (80077dc <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d106      	bne.n	800773e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	69db      	ldr	r3, [r3, #28]
 800773a:	4313      	orrs	r3, r2
 800773c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	4a24      	ldr	r2, [pc, #144]	; (80077d4 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8007744:	4293      	cmp	r3, r2
 8007746:	d009      	beq.n	800775c <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	4a22      	ldr	r2, [pc, #136]	; (80077d8 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d004      	beq.n	800775c <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	4a21      	ldr	r2, [pc, #132]	; (80077dc <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8007758:	4293      	cmp	r3, r2
 800775a:	d12b      	bne.n	80077b4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007766:	051b      	lsls	r3, r3, #20
 8007768:	4313      	orrs	r3, r2
 800776a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	6a1b      	ldr	r3, [r3, #32]
 8007776:	4313      	orrs	r3, r2
 8007778:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007784:	4313      	orrs	r3, r2
 8007786:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	4a11      	ldr	r2, [pc, #68]	; (80077d4 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800778e:	4293      	cmp	r3, r2
 8007790:	d009      	beq.n	80077a6 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	4a10      	ldr	r2, [pc, #64]	; (80077d8 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8007798:	4293      	cmp	r3, r2
 800779a:	d004      	beq.n	80077a6 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	4a0e      	ldr	r2, [pc, #56]	; (80077dc <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d106      	bne.n	80077b4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077b0:	4313      	orrs	r3, r2
 80077b2:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	68fa      	ldr	r2, [r7, #12]
 80077ba:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2200      	movs	r2, #0
 80077c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80077c4:	2300      	movs	r3, #0
}
 80077c6:	4618      	mov	r0, r3
 80077c8:	3714      	adds	r7, #20
 80077ca:	46bd      	mov	sp, r7
 80077cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d0:	4770      	bx	lr
 80077d2:	bf00      	nop
 80077d4:	40012c00 	.word	0x40012c00
 80077d8:	40013400 	.word	0x40013400
 80077dc:	40015000 	.word	0x40015000

080077e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80077e0:	b480      	push	{r7}
 80077e2:	b083      	sub	sp, #12
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80077e8:	bf00      	nop
 80077ea:	370c      	adds	r7, #12
 80077ec:	46bd      	mov	sp, r7
 80077ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f2:	4770      	bx	lr

080077f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80077f4:	b480      	push	{r7}
 80077f6:	b083      	sub	sp, #12
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80077fc:	bf00      	nop
 80077fe:	370c      	adds	r7, #12
 8007800:	46bd      	mov	sp, r7
 8007802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007806:	4770      	bx	lr

08007808 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007808:	b480      	push	{r7}
 800780a:	b083      	sub	sp, #12
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007810:	bf00      	nop
 8007812:	370c      	adds	r7, #12
 8007814:	46bd      	mov	sp, r7
 8007816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781a:	4770      	bx	lr

0800781c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800781c:	b480      	push	{r7}
 800781e:	b083      	sub	sp, #12
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007824:	bf00      	nop
 8007826:	370c      	adds	r7, #12
 8007828:	46bd      	mov	sp, r7
 800782a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782e:	4770      	bx	lr

08007830 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007830:	b480      	push	{r7}
 8007832:	b083      	sub	sp, #12
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007838:	bf00      	nop
 800783a:	370c      	adds	r7, #12
 800783c:	46bd      	mov	sp, r7
 800783e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007842:	4770      	bx	lr

08007844 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007844:	b480      	push	{r7}
 8007846:	b083      	sub	sp, #12
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800784c:	bf00      	nop
 800784e:	370c      	adds	r7, #12
 8007850:	46bd      	mov	sp, r7
 8007852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007856:	4770      	bx	lr

08007858 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007858:	b480      	push	{r7}
 800785a:	b083      	sub	sp, #12
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007860:	bf00      	nop
 8007862:	370c      	adds	r7, #12
 8007864:	46bd      	mov	sp, r7
 8007866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786a:	4770      	bx	lr

0800786c <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800786c:	b480      	push	{r7}
 800786e:	b087      	sub	sp, #28
 8007870:	af00      	add	r7, sp, #0
 8007872:	60f8      	str	r0, [r7, #12]
 8007874:	60b9      	str	r1, [r7, #8]
 8007876:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	f003 031f 	and.w	r3, r3, #31
 800787e:	2204      	movs	r2, #4
 8007880:	fa02 f303 	lsl.w	r3, r2, r3
 8007884:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	6a1a      	ldr	r2, [r3, #32]
 800788a:	697b      	ldr	r3, [r7, #20]
 800788c:	43db      	mvns	r3, r3
 800788e:	401a      	ands	r2, r3
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	6a1a      	ldr	r2, [r3, #32]
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	f003 031f 	and.w	r3, r3, #31
 800789e:	6879      	ldr	r1, [r7, #4]
 80078a0:	fa01 f303 	lsl.w	r3, r1, r3
 80078a4:	431a      	orrs	r2, r3
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	621a      	str	r2, [r3, #32]
}
 80078aa:	bf00      	nop
 80078ac:	371c      	adds	r7, #28
 80078ae:	46bd      	mov	sp, r7
 80078b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b4:	4770      	bx	lr

080078b6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80078b6:	b580      	push	{r7, lr}
 80078b8:	b082      	sub	sp, #8
 80078ba:	af00      	add	r7, sp, #0
 80078bc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d101      	bne.n	80078c8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80078c4:	2301      	movs	r3, #1
 80078c6:	e042      	b.n	800794e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d106      	bne.n	80078e0 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2200      	movs	r2, #0
 80078d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	f7fa fcb4 	bl	8002248 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2224      	movs	r2, #36	; 0x24
 80078e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	681a      	ldr	r2, [r3, #0]
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f022 0201 	bic.w	r2, r2, #1
 80078f6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f000 fc51 	bl	80081a0 <UART_SetConfig>
 80078fe:	4603      	mov	r3, r0
 8007900:	2b01      	cmp	r3, #1
 8007902:	d101      	bne.n	8007908 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007904:	2301      	movs	r3, #1
 8007906:	e022      	b.n	800794e <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800790c:	2b00      	cmp	r3, #0
 800790e:	d002      	beq.n	8007916 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007910:	6878      	ldr	r0, [r7, #4]
 8007912:	f000 ff41 	bl	8008798 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	685a      	ldr	r2, [r3, #4]
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007924:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	689a      	ldr	r2, [r3, #8]
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007934:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	681a      	ldr	r2, [r3, #0]
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f042 0201 	orr.w	r2, r2, #1
 8007944:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f000 ffc8 	bl	80088dc <UART_CheckIdleState>
 800794c:	4603      	mov	r3, r0
}
 800794e:	4618      	mov	r0, r3
 8007950:	3708      	adds	r7, #8
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}

08007956 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007956:	b580      	push	{r7, lr}
 8007958:	b08a      	sub	sp, #40	; 0x28
 800795a:	af02      	add	r7, sp, #8
 800795c:	60f8      	str	r0, [r7, #12]
 800795e:	60b9      	str	r1, [r7, #8]
 8007960:	603b      	str	r3, [r7, #0]
 8007962:	4613      	mov	r3, r2
 8007964:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800796c:	2b20      	cmp	r3, #32
 800796e:	f040 8083 	bne.w	8007a78 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d002      	beq.n	800797e <HAL_UART_Transmit+0x28>
 8007978:	88fb      	ldrh	r3, [r7, #6]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d101      	bne.n	8007982 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800797e:	2301      	movs	r3, #1
 8007980:	e07b      	b.n	8007a7a <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007988:	2b01      	cmp	r3, #1
 800798a:	d101      	bne.n	8007990 <HAL_UART_Transmit+0x3a>
 800798c:	2302      	movs	r3, #2
 800798e:	e074      	b.n	8007a7a <HAL_UART_Transmit+0x124>
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	2201      	movs	r2, #1
 8007994:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	2200      	movs	r2, #0
 800799c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	2221      	movs	r2, #33	; 0x21
 80079a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80079a8:	f7fa ff64 	bl	8002874 <HAL_GetTick>
 80079ac:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	88fa      	ldrh	r2, [r7, #6]
 80079b2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	88fa      	ldrh	r2, [r7, #6]
 80079ba:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	689b      	ldr	r3, [r3, #8]
 80079c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079c6:	d108      	bne.n	80079da <HAL_UART_Transmit+0x84>
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	691b      	ldr	r3, [r3, #16]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d104      	bne.n	80079da <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80079d0:	2300      	movs	r3, #0
 80079d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	61bb      	str	r3, [r7, #24]
 80079d8:	e003      	b.n	80079e2 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80079de:	2300      	movs	r3, #0
 80079e0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	2200      	movs	r2, #0
 80079e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80079ea:	e02c      	b.n	8007a46 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	9300      	str	r3, [sp, #0]
 80079f0:	697b      	ldr	r3, [r7, #20]
 80079f2:	2200      	movs	r2, #0
 80079f4:	2180      	movs	r1, #128	; 0x80
 80079f6:	68f8      	ldr	r0, [r7, #12]
 80079f8:	f000 ffbb 	bl	8008972 <UART_WaitOnFlagUntilTimeout>
 80079fc:	4603      	mov	r3, r0
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d001      	beq.n	8007a06 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8007a02:	2303      	movs	r3, #3
 8007a04:	e039      	b.n	8007a7a <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8007a06:	69fb      	ldr	r3, [r7, #28]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d10b      	bne.n	8007a24 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007a0c:	69bb      	ldr	r3, [r7, #24]
 8007a0e:	881b      	ldrh	r3, [r3, #0]
 8007a10:	461a      	mov	r2, r3
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007a1a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007a1c:	69bb      	ldr	r3, [r7, #24]
 8007a1e:	3302      	adds	r3, #2
 8007a20:	61bb      	str	r3, [r7, #24]
 8007a22:	e007      	b.n	8007a34 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007a24:	69fb      	ldr	r3, [r7, #28]
 8007a26:	781a      	ldrb	r2, [r3, #0]
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007a2e:	69fb      	ldr	r3, [r7, #28]
 8007a30:	3301      	adds	r3, #1
 8007a32:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007a3a:	b29b      	uxth	r3, r3
 8007a3c:	3b01      	subs	r3, #1
 8007a3e:	b29a      	uxth	r2, r3
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007a4c:	b29b      	uxth	r3, r3
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d1cc      	bne.n	80079ec <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	9300      	str	r3, [sp, #0]
 8007a56:	697b      	ldr	r3, [r7, #20]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	2140      	movs	r1, #64	; 0x40
 8007a5c:	68f8      	ldr	r0, [r7, #12]
 8007a5e:	f000 ff88 	bl	8008972 <UART_WaitOnFlagUntilTimeout>
 8007a62:	4603      	mov	r3, r0
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d001      	beq.n	8007a6c <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8007a68:	2303      	movs	r3, #3
 8007a6a:	e006      	b.n	8007a7a <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	2220      	movs	r2, #32
 8007a70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8007a74:	2300      	movs	r3, #0
 8007a76:	e000      	b.n	8007a7a <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8007a78:	2302      	movs	r3, #2
  }
}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	3720      	adds	r7, #32
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}
	...

08007a84 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b08a      	sub	sp, #40	; 0x28
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	60f8      	str	r0, [r7, #12]
 8007a8c:	60b9      	str	r1, [r7, #8]
 8007a8e:	4613      	mov	r3, r2
 8007a90:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a98:	2b20      	cmp	r3, #32
 8007a9a:	d142      	bne.n	8007b22 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d002      	beq.n	8007aa8 <HAL_UART_Receive_IT+0x24>
 8007aa2:	88fb      	ldrh	r3, [r7, #6]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d101      	bne.n	8007aac <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	e03b      	b.n	8007b24 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007ab2:	2b01      	cmp	r3, #1
 8007ab4:	d101      	bne.n	8007aba <HAL_UART_Receive_IT+0x36>
 8007ab6:	2302      	movs	r3, #2
 8007ab8:	e034      	b.n	8007b24 <HAL_UART_Receive_IT+0xa0>
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	2201      	movs	r2, #1
 8007abe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	4a17      	ldr	r2, [pc, #92]	; (8007b2c <HAL_UART_Receive_IT+0xa8>)
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d01f      	beq.n	8007b12 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	685b      	ldr	r3, [r3, #4]
 8007ad8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d018      	beq.n	8007b12 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ae6:	697b      	ldr	r3, [r7, #20]
 8007ae8:	e853 3f00 	ldrex	r3, [r3]
 8007aec:	613b      	str	r3, [r7, #16]
   return(result);
 8007aee:	693b      	ldr	r3, [r7, #16]
 8007af0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007af4:	627b      	str	r3, [r7, #36]	; 0x24
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	461a      	mov	r2, r3
 8007afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007afe:	623b      	str	r3, [r7, #32]
 8007b00:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b02:	69f9      	ldr	r1, [r7, #28]
 8007b04:	6a3a      	ldr	r2, [r7, #32]
 8007b06:	e841 2300 	strex	r3, r2, [r1]
 8007b0a:	61bb      	str	r3, [r7, #24]
   return(result);
 8007b0c:	69bb      	ldr	r3, [r7, #24]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d1e6      	bne.n	8007ae0 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007b12:	88fb      	ldrh	r3, [r7, #6]
 8007b14:	461a      	mov	r2, r3
 8007b16:	68b9      	ldr	r1, [r7, #8]
 8007b18:	68f8      	ldr	r0, [r7, #12]
 8007b1a:	f000 fff3 	bl	8008b04 <UART_Start_Receive_IT>
 8007b1e:	4603      	mov	r3, r0
 8007b20:	e000      	b.n	8007b24 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007b22:	2302      	movs	r3, #2
  }
}
 8007b24:	4618      	mov	r0, r3
 8007b26:	3728      	adds	r7, #40	; 0x28
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	bd80      	pop	{r7, pc}
 8007b2c:	40008000 	.word	0x40008000

08007b30 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b0ba      	sub	sp, #232	; 0xe8
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	69db      	ldr	r3, [r3, #28]
 8007b3e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	689b      	ldr	r3, [r3, #8]
 8007b52:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007b56:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007b5a:	f640 030f 	movw	r3, #2063	; 0x80f
 8007b5e:	4013      	ands	r3, r2
 8007b60:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007b64:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d11b      	bne.n	8007ba4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007b6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b70:	f003 0320 	and.w	r3, r3, #32
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d015      	beq.n	8007ba4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007b78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b7c:	f003 0320 	and.w	r3, r3, #32
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d105      	bne.n	8007b90 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007b84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d009      	beq.n	8007ba4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	f000 82d6 	beq.w	8008146 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	4798      	blx	r3
      }
      return;
 8007ba2:	e2d0      	b.n	8008146 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007ba4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	f000 811f 	beq.w	8007dec <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007bae:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007bb2:	4b8b      	ldr	r3, [pc, #556]	; (8007de0 <HAL_UART_IRQHandler+0x2b0>)
 8007bb4:	4013      	ands	r3, r2
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d106      	bne.n	8007bc8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007bba:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007bbe:	4b89      	ldr	r3, [pc, #548]	; (8007de4 <HAL_UART_IRQHandler+0x2b4>)
 8007bc0:	4013      	ands	r3, r2
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	f000 8112 	beq.w	8007dec <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007bc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bcc:	f003 0301 	and.w	r3, r3, #1
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d011      	beq.n	8007bf8 <HAL_UART_IRQHandler+0xc8>
 8007bd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d00b      	beq.n	8007bf8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	2201      	movs	r2, #1
 8007be6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007bee:	f043 0201 	orr.w	r2, r3, #1
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007bf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bfc:	f003 0302 	and.w	r3, r3, #2
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d011      	beq.n	8007c28 <HAL_UART_IRQHandler+0xf8>
 8007c04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c08:	f003 0301 	and.w	r3, r3, #1
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d00b      	beq.n	8007c28 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	2202      	movs	r2, #2
 8007c16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c1e:	f043 0204 	orr.w	r2, r3, #4
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007c28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c2c:	f003 0304 	and.w	r3, r3, #4
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d011      	beq.n	8007c58 <HAL_UART_IRQHandler+0x128>
 8007c34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c38:	f003 0301 	and.w	r3, r3, #1
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d00b      	beq.n	8007c58 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	2204      	movs	r2, #4
 8007c46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c4e:	f043 0202 	orr.w	r2, r3, #2
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007c58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c5c:	f003 0308 	and.w	r3, r3, #8
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d017      	beq.n	8007c94 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007c64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c68:	f003 0320 	and.w	r3, r3, #32
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d105      	bne.n	8007c7c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007c70:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007c74:	4b5a      	ldr	r3, [pc, #360]	; (8007de0 <HAL_UART_IRQHandler+0x2b0>)
 8007c76:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d00b      	beq.n	8007c94 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	2208      	movs	r2, #8
 8007c82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c8a:	f043 0208 	orr.w	r2, r3, #8
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007c94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d012      	beq.n	8007cc6 <HAL_UART_IRQHandler+0x196>
 8007ca0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ca4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d00c      	beq.n	8007cc6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007cb4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007cbc:	f043 0220 	orr.w	r2, r3, #32
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	f000 823c 	beq.w	800814a <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007cd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cd6:	f003 0320 	and.w	r3, r3, #32
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d013      	beq.n	8007d06 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007cde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ce2:	f003 0320 	and.w	r3, r3, #32
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d105      	bne.n	8007cf6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007cea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007cee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d007      	beq.n	8007d06 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d003      	beq.n	8007d06 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d0c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	689b      	ldr	r3, [r3, #8]
 8007d16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d1a:	2b40      	cmp	r3, #64	; 0x40
 8007d1c:	d005      	beq.n	8007d2a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007d1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007d22:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d04f      	beq.n	8007dca <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f001 f814 	bl	8008d58 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	689b      	ldr	r3, [r3, #8]
 8007d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d3a:	2b40      	cmp	r3, #64	; 0x40
 8007d3c:	d141      	bne.n	8007dc2 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	3308      	adds	r3, #8
 8007d44:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d48:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007d4c:	e853 3f00 	ldrex	r3, [r3]
 8007d50:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007d54:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007d58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d5c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	3308      	adds	r3, #8
 8007d66:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007d6a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007d6e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d72:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007d76:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007d7a:	e841 2300 	strex	r3, r2, [r1]
 8007d7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007d82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d1d9      	bne.n	8007d3e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d013      	beq.n	8007dba <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d96:	4a14      	ldr	r2, [pc, #80]	; (8007de8 <HAL_UART_IRQHandler+0x2b8>)
 8007d98:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d9e:	4618      	mov	r0, r3
 8007da0:	f7fc fd7d 	bl	800489e <HAL_DMA_Abort_IT>
 8007da4:	4603      	mov	r3, r0
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d017      	beq.n	8007dda <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007db0:	687a      	ldr	r2, [r7, #4]
 8007db2:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8007db4:	4610      	mov	r0, r2
 8007db6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007db8:	e00f      	b.n	8007dda <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	f000 f9da 	bl	8008174 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007dc0:	e00b      	b.n	8007dda <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f000 f9d6 	bl	8008174 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007dc8:	e007      	b.n	8007dda <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007dca:	6878      	ldr	r0, [r7, #4]
 8007dcc:	f000 f9d2 	bl	8008174 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8007dd8:	e1b7      	b.n	800814a <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007dda:	bf00      	nop
    return;
 8007ddc:	e1b5      	b.n	800814a <HAL_UART_IRQHandler+0x61a>
 8007dde:	bf00      	nop
 8007de0:	10000001 	.word	0x10000001
 8007de4:	04000120 	.word	0x04000120
 8007de8:	08008e25 	.word	0x08008e25

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007df0:	2b01      	cmp	r3, #1
 8007df2:	f040 814a 	bne.w	800808a <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007df6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007dfa:	f003 0310 	and.w	r3, r3, #16
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	f000 8143 	beq.w	800808a <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007e04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e08:	f003 0310 	and.w	r3, r3, #16
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	f000 813c 	beq.w	800808a <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	2210      	movs	r2, #16
 8007e18:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	689b      	ldr	r3, [r3, #8]
 8007e20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e24:	2b40      	cmp	r3, #64	; 0x40
 8007e26:	f040 80b5 	bne.w	8007f94 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	685b      	ldr	r3, [r3, #4]
 8007e32:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007e36:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	f000 8187 	beq.w	800814e <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007e46:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007e4a:	429a      	cmp	r2, r3
 8007e4c:	f080 817f 	bcs.w	800814e <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007e56:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f003 0320 	and.w	r3, r3, #32
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	f040 8086 	bne.w	8007f78 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e74:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007e78:	e853 3f00 	ldrex	r3, [r3]
 8007e7c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007e80:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007e84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007e88:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	461a      	mov	r2, r3
 8007e92:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007e96:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007e9a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e9e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007ea2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007ea6:	e841 2300 	strex	r3, r2, [r1]
 8007eaa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007eae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d1da      	bne.n	8007e6c <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	3308      	adds	r3, #8
 8007ebc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ebe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ec0:	e853 3f00 	ldrex	r3, [r3]
 8007ec4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007ec6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007ec8:	f023 0301 	bic.w	r3, r3, #1
 8007ecc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	3308      	adds	r3, #8
 8007ed6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007eda:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007ede:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ee0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007ee2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007ee6:	e841 2300 	strex	r3, r2, [r1]
 8007eea:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007eec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d1e1      	bne.n	8007eb6 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	3308      	adds	r3, #8
 8007ef8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007efa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007efc:	e853 3f00 	ldrex	r3, [r3]
 8007f00:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007f02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007f04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f08:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	3308      	adds	r3, #8
 8007f12:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007f16:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007f18:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f1a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007f1c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007f1e:	e841 2300 	strex	r3, r2, [r1]
 8007f22:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007f24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d1e3      	bne.n	8007ef2 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2220      	movs	r2, #32
 8007f2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2200      	movs	r2, #0
 8007f36:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f40:	e853 3f00 	ldrex	r3, [r3]
 8007f44:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007f46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f48:	f023 0310 	bic.w	r3, r3, #16
 8007f4c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	461a      	mov	r2, r3
 8007f56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007f5a:	65bb      	str	r3, [r7, #88]	; 0x58
 8007f5c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f5e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007f60:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007f62:	e841 2300 	strex	r3, r2, [r1]
 8007f66:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007f68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d1e4      	bne.n	8007f38 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f72:	4618      	mov	r0, r3
 8007f74:	f7fc fc3a 	bl	80047ec <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007f84:	b29b      	uxth	r3, r3
 8007f86:	1ad3      	subs	r3, r2, r3
 8007f88:	b29b      	uxth	r3, r3
 8007f8a:	4619      	mov	r1, r3
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f000 f8fb 	bl	8008188 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007f92:	e0dc      	b.n	800814e <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007fa0:	b29b      	uxth	r3, r3
 8007fa2:	1ad3      	subs	r3, r2, r3
 8007fa4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007fae:	b29b      	uxth	r3, r3
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	f000 80ce 	beq.w	8008152 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8007fb6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	f000 80c9 	beq.w	8008152 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fc8:	e853 3f00 	ldrex	r3, [r3]
 8007fcc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007fce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fd0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007fd4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	461a      	mov	r2, r3
 8007fde:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007fe2:	647b      	str	r3, [r7, #68]	; 0x44
 8007fe4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fe6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007fe8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007fea:	e841 2300 	strex	r3, r2, [r1]
 8007fee:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007ff0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d1e4      	bne.n	8007fc0 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	3308      	adds	r3, #8
 8007ffc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008000:	e853 3f00 	ldrex	r3, [r3]
 8008004:	623b      	str	r3, [r7, #32]
   return(result);
 8008006:	6a3b      	ldr	r3, [r7, #32]
 8008008:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800800c:	f023 0301 	bic.w	r3, r3, #1
 8008010:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	3308      	adds	r3, #8
 800801a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800801e:	633a      	str	r2, [r7, #48]	; 0x30
 8008020:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008022:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008024:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008026:	e841 2300 	strex	r3, r2, [r1]
 800802a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800802c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800802e:	2b00      	cmp	r3, #0
 8008030:	d1e1      	bne.n	8007ff6 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2220      	movs	r2, #32
 8008036:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2200      	movs	r2, #0
 800803e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2200      	movs	r2, #0
 8008044:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800804c:	693b      	ldr	r3, [r7, #16]
 800804e:	e853 3f00 	ldrex	r3, [r3]
 8008052:	60fb      	str	r3, [r7, #12]
   return(result);
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	f023 0310 	bic.w	r3, r3, #16
 800805a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	461a      	mov	r2, r3
 8008064:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008068:	61fb      	str	r3, [r7, #28]
 800806a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800806c:	69b9      	ldr	r1, [r7, #24]
 800806e:	69fa      	ldr	r2, [r7, #28]
 8008070:	e841 2300 	strex	r3, r2, [r1]
 8008074:	617b      	str	r3, [r7, #20]
   return(result);
 8008076:	697b      	ldr	r3, [r7, #20]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d1e4      	bne.n	8008046 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800807c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008080:	4619      	mov	r1, r3
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	f000 f880 	bl	8008188 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008088:	e063      	b.n	8008152 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800808a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800808e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008092:	2b00      	cmp	r3, #0
 8008094:	d00e      	beq.n	80080b4 <HAL_UART_IRQHandler+0x584>
 8008096:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800809a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d008      	beq.n	80080b4 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80080aa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	f001 fb57 	bl	8009760 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80080b2:	e051      	b.n	8008158 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80080b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d014      	beq.n	80080ea <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80080c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d105      	bne.n	80080d8 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80080cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80080d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d008      	beq.n	80080ea <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d03a      	beq.n	8008156 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	4798      	blx	r3
    }
    return;
 80080e8:	e035      	b.n	8008156 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80080ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d009      	beq.n	800810a <HAL_UART_IRQHandler+0x5da>
 80080f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d003      	beq.n	800810a <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	f000 fea4 	bl	8008e50 <UART_EndTransmit_IT>
    return;
 8008108:	e026      	b.n	8008158 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800810a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800810e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008112:	2b00      	cmp	r3, #0
 8008114:	d009      	beq.n	800812a <HAL_UART_IRQHandler+0x5fa>
 8008116:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800811a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800811e:	2b00      	cmp	r3, #0
 8008120:	d003      	beq.n	800812a <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f001 fb30 	bl	8009788 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008128:	e016      	b.n	8008158 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800812a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800812e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008132:	2b00      	cmp	r3, #0
 8008134:	d010      	beq.n	8008158 <HAL_UART_IRQHandler+0x628>
 8008136:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800813a:	2b00      	cmp	r3, #0
 800813c:	da0c      	bge.n	8008158 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	f001 fb18 	bl	8009774 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008144:	e008      	b.n	8008158 <HAL_UART_IRQHandler+0x628>
      return;
 8008146:	bf00      	nop
 8008148:	e006      	b.n	8008158 <HAL_UART_IRQHandler+0x628>
    return;
 800814a:	bf00      	nop
 800814c:	e004      	b.n	8008158 <HAL_UART_IRQHandler+0x628>
      return;
 800814e:	bf00      	nop
 8008150:	e002      	b.n	8008158 <HAL_UART_IRQHandler+0x628>
      return;
 8008152:	bf00      	nop
 8008154:	e000      	b.n	8008158 <HAL_UART_IRQHandler+0x628>
    return;
 8008156:	bf00      	nop
  }
}
 8008158:	37e8      	adds	r7, #232	; 0xe8
 800815a:	46bd      	mov	sp, r7
 800815c:	bd80      	pop	{r7, pc}
 800815e:	bf00      	nop

08008160 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008160:	b480      	push	{r7}
 8008162:	b083      	sub	sp, #12
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008168:	bf00      	nop
 800816a:	370c      	adds	r7, #12
 800816c:	46bd      	mov	sp, r7
 800816e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008172:	4770      	bx	lr

08008174 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008174:	b480      	push	{r7}
 8008176:	b083      	sub	sp, #12
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800817c:	bf00      	nop
 800817e:	370c      	adds	r7, #12
 8008180:	46bd      	mov	sp, r7
 8008182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008186:	4770      	bx	lr

08008188 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008188:	b480      	push	{r7}
 800818a:	b083      	sub	sp, #12
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
 8008190:	460b      	mov	r3, r1
 8008192:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008194:	bf00      	nop
 8008196:	370c      	adds	r7, #12
 8008198:	46bd      	mov	sp, r7
 800819a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819e:	4770      	bx	lr

080081a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80081a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80081a4:	b08c      	sub	sp, #48	; 0x30
 80081a6:	af00      	add	r7, sp, #0
 80081a8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80081aa:	2300      	movs	r3, #0
 80081ac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80081b0:	697b      	ldr	r3, [r7, #20]
 80081b2:	689a      	ldr	r2, [r3, #8]
 80081b4:	697b      	ldr	r3, [r7, #20]
 80081b6:	691b      	ldr	r3, [r3, #16]
 80081b8:	431a      	orrs	r2, r3
 80081ba:	697b      	ldr	r3, [r7, #20]
 80081bc:	695b      	ldr	r3, [r3, #20]
 80081be:	431a      	orrs	r2, r3
 80081c0:	697b      	ldr	r3, [r7, #20]
 80081c2:	69db      	ldr	r3, [r3, #28]
 80081c4:	4313      	orrs	r3, r2
 80081c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80081c8:	697b      	ldr	r3, [r7, #20]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	681a      	ldr	r2, [r3, #0]
 80081ce:	4baa      	ldr	r3, [pc, #680]	; (8008478 <UART_SetConfig+0x2d8>)
 80081d0:	4013      	ands	r3, r2
 80081d2:	697a      	ldr	r2, [r7, #20]
 80081d4:	6812      	ldr	r2, [r2, #0]
 80081d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80081d8:	430b      	orrs	r3, r1
 80081da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80081dc:	697b      	ldr	r3, [r7, #20]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	685b      	ldr	r3, [r3, #4]
 80081e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80081e6:	697b      	ldr	r3, [r7, #20]
 80081e8:	68da      	ldr	r2, [r3, #12]
 80081ea:	697b      	ldr	r3, [r7, #20]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	430a      	orrs	r2, r1
 80081f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80081f2:	697b      	ldr	r3, [r7, #20]
 80081f4:	699b      	ldr	r3, [r3, #24]
 80081f6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80081f8:	697b      	ldr	r3, [r7, #20]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	4a9f      	ldr	r2, [pc, #636]	; (800847c <UART_SetConfig+0x2dc>)
 80081fe:	4293      	cmp	r3, r2
 8008200:	d004      	beq.n	800820c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008202:	697b      	ldr	r3, [r7, #20]
 8008204:	6a1b      	ldr	r3, [r3, #32]
 8008206:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008208:	4313      	orrs	r3, r2
 800820a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800820c:	697b      	ldr	r3, [r7, #20]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	689b      	ldr	r3, [r3, #8]
 8008212:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8008216:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800821a:	697a      	ldr	r2, [r7, #20]
 800821c:	6812      	ldr	r2, [r2, #0]
 800821e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008220:	430b      	orrs	r3, r1
 8008222:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008224:	697b      	ldr	r3, [r7, #20]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800822a:	f023 010f 	bic.w	r1, r3, #15
 800822e:	697b      	ldr	r3, [r7, #20]
 8008230:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008232:	697b      	ldr	r3, [r7, #20]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	430a      	orrs	r2, r1
 8008238:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800823a:	697b      	ldr	r3, [r7, #20]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	4a90      	ldr	r2, [pc, #576]	; (8008480 <UART_SetConfig+0x2e0>)
 8008240:	4293      	cmp	r3, r2
 8008242:	d125      	bne.n	8008290 <UART_SetConfig+0xf0>
 8008244:	4b8f      	ldr	r3, [pc, #572]	; (8008484 <UART_SetConfig+0x2e4>)
 8008246:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800824a:	f003 0303 	and.w	r3, r3, #3
 800824e:	2b03      	cmp	r3, #3
 8008250:	d81a      	bhi.n	8008288 <UART_SetConfig+0xe8>
 8008252:	a201      	add	r2, pc, #4	; (adr r2, 8008258 <UART_SetConfig+0xb8>)
 8008254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008258:	08008269 	.word	0x08008269
 800825c:	08008279 	.word	0x08008279
 8008260:	08008271 	.word	0x08008271
 8008264:	08008281 	.word	0x08008281
 8008268:	2301      	movs	r3, #1
 800826a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800826e:	e116      	b.n	800849e <UART_SetConfig+0x2fe>
 8008270:	2302      	movs	r3, #2
 8008272:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008276:	e112      	b.n	800849e <UART_SetConfig+0x2fe>
 8008278:	2304      	movs	r3, #4
 800827a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800827e:	e10e      	b.n	800849e <UART_SetConfig+0x2fe>
 8008280:	2308      	movs	r3, #8
 8008282:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008286:	e10a      	b.n	800849e <UART_SetConfig+0x2fe>
 8008288:	2310      	movs	r3, #16
 800828a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800828e:	e106      	b.n	800849e <UART_SetConfig+0x2fe>
 8008290:	697b      	ldr	r3, [r7, #20]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	4a7c      	ldr	r2, [pc, #496]	; (8008488 <UART_SetConfig+0x2e8>)
 8008296:	4293      	cmp	r3, r2
 8008298:	d138      	bne.n	800830c <UART_SetConfig+0x16c>
 800829a:	4b7a      	ldr	r3, [pc, #488]	; (8008484 <UART_SetConfig+0x2e4>)
 800829c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082a0:	f003 030c 	and.w	r3, r3, #12
 80082a4:	2b0c      	cmp	r3, #12
 80082a6:	d82d      	bhi.n	8008304 <UART_SetConfig+0x164>
 80082a8:	a201      	add	r2, pc, #4	; (adr r2, 80082b0 <UART_SetConfig+0x110>)
 80082aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082ae:	bf00      	nop
 80082b0:	080082e5 	.word	0x080082e5
 80082b4:	08008305 	.word	0x08008305
 80082b8:	08008305 	.word	0x08008305
 80082bc:	08008305 	.word	0x08008305
 80082c0:	080082f5 	.word	0x080082f5
 80082c4:	08008305 	.word	0x08008305
 80082c8:	08008305 	.word	0x08008305
 80082cc:	08008305 	.word	0x08008305
 80082d0:	080082ed 	.word	0x080082ed
 80082d4:	08008305 	.word	0x08008305
 80082d8:	08008305 	.word	0x08008305
 80082dc:	08008305 	.word	0x08008305
 80082e0:	080082fd 	.word	0x080082fd
 80082e4:	2300      	movs	r3, #0
 80082e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082ea:	e0d8      	b.n	800849e <UART_SetConfig+0x2fe>
 80082ec:	2302      	movs	r3, #2
 80082ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082f2:	e0d4      	b.n	800849e <UART_SetConfig+0x2fe>
 80082f4:	2304      	movs	r3, #4
 80082f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082fa:	e0d0      	b.n	800849e <UART_SetConfig+0x2fe>
 80082fc:	2308      	movs	r3, #8
 80082fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008302:	e0cc      	b.n	800849e <UART_SetConfig+0x2fe>
 8008304:	2310      	movs	r3, #16
 8008306:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800830a:	e0c8      	b.n	800849e <UART_SetConfig+0x2fe>
 800830c:	697b      	ldr	r3, [r7, #20]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	4a5e      	ldr	r2, [pc, #376]	; (800848c <UART_SetConfig+0x2ec>)
 8008312:	4293      	cmp	r3, r2
 8008314:	d125      	bne.n	8008362 <UART_SetConfig+0x1c2>
 8008316:	4b5b      	ldr	r3, [pc, #364]	; (8008484 <UART_SetConfig+0x2e4>)
 8008318:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800831c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008320:	2b30      	cmp	r3, #48	; 0x30
 8008322:	d016      	beq.n	8008352 <UART_SetConfig+0x1b2>
 8008324:	2b30      	cmp	r3, #48	; 0x30
 8008326:	d818      	bhi.n	800835a <UART_SetConfig+0x1ba>
 8008328:	2b20      	cmp	r3, #32
 800832a:	d00a      	beq.n	8008342 <UART_SetConfig+0x1a2>
 800832c:	2b20      	cmp	r3, #32
 800832e:	d814      	bhi.n	800835a <UART_SetConfig+0x1ba>
 8008330:	2b00      	cmp	r3, #0
 8008332:	d002      	beq.n	800833a <UART_SetConfig+0x19a>
 8008334:	2b10      	cmp	r3, #16
 8008336:	d008      	beq.n	800834a <UART_SetConfig+0x1aa>
 8008338:	e00f      	b.n	800835a <UART_SetConfig+0x1ba>
 800833a:	2300      	movs	r3, #0
 800833c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008340:	e0ad      	b.n	800849e <UART_SetConfig+0x2fe>
 8008342:	2302      	movs	r3, #2
 8008344:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008348:	e0a9      	b.n	800849e <UART_SetConfig+0x2fe>
 800834a:	2304      	movs	r3, #4
 800834c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008350:	e0a5      	b.n	800849e <UART_SetConfig+0x2fe>
 8008352:	2308      	movs	r3, #8
 8008354:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008358:	e0a1      	b.n	800849e <UART_SetConfig+0x2fe>
 800835a:	2310      	movs	r3, #16
 800835c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008360:	e09d      	b.n	800849e <UART_SetConfig+0x2fe>
 8008362:	697b      	ldr	r3, [r7, #20]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	4a4a      	ldr	r2, [pc, #296]	; (8008490 <UART_SetConfig+0x2f0>)
 8008368:	4293      	cmp	r3, r2
 800836a:	d125      	bne.n	80083b8 <UART_SetConfig+0x218>
 800836c:	4b45      	ldr	r3, [pc, #276]	; (8008484 <UART_SetConfig+0x2e4>)
 800836e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008372:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008376:	2bc0      	cmp	r3, #192	; 0xc0
 8008378:	d016      	beq.n	80083a8 <UART_SetConfig+0x208>
 800837a:	2bc0      	cmp	r3, #192	; 0xc0
 800837c:	d818      	bhi.n	80083b0 <UART_SetConfig+0x210>
 800837e:	2b80      	cmp	r3, #128	; 0x80
 8008380:	d00a      	beq.n	8008398 <UART_SetConfig+0x1f8>
 8008382:	2b80      	cmp	r3, #128	; 0x80
 8008384:	d814      	bhi.n	80083b0 <UART_SetConfig+0x210>
 8008386:	2b00      	cmp	r3, #0
 8008388:	d002      	beq.n	8008390 <UART_SetConfig+0x1f0>
 800838a:	2b40      	cmp	r3, #64	; 0x40
 800838c:	d008      	beq.n	80083a0 <UART_SetConfig+0x200>
 800838e:	e00f      	b.n	80083b0 <UART_SetConfig+0x210>
 8008390:	2300      	movs	r3, #0
 8008392:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008396:	e082      	b.n	800849e <UART_SetConfig+0x2fe>
 8008398:	2302      	movs	r3, #2
 800839a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800839e:	e07e      	b.n	800849e <UART_SetConfig+0x2fe>
 80083a0:	2304      	movs	r3, #4
 80083a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083a6:	e07a      	b.n	800849e <UART_SetConfig+0x2fe>
 80083a8:	2308      	movs	r3, #8
 80083aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083ae:	e076      	b.n	800849e <UART_SetConfig+0x2fe>
 80083b0:	2310      	movs	r3, #16
 80083b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083b6:	e072      	b.n	800849e <UART_SetConfig+0x2fe>
 80083b8:	697b      	ldr	r3, [r7, #20]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	4a35      	ldr	r2, [pc, #212]	; (8008494 <UART_SetConfig+0x2f4>)
 80083be:	4293      	cmp	r3, r2
 80083c0:	d12a      	bne.n	8008418 <UART_SetConfig+0x278>
 80083c2:	4b30      	ldr	r3, [pc, #192]	; (8008484 <UART_SetConfig+0x2e4>)
 80083c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80083cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80083d0:	d01a      	beq.n	8008408 <UART_SetConfig+0x268>
 80083d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80083d6:	d81b      	bhi.n	8008410 <UART_SetConfig+0x270>
 80083d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80083dc:	d00c      	beq.n	80083f8 <UART_SetConfig+0x258>
 80083de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80083e2:	d815      	bhi.n	8008410 <UART_SetConfig+0x270>
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d003      	beq.n	80083f0 <UART_SetConfig+0x250>
 80083e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083ec:	d008      	beq.n	8008400 <UART_SetConfig+0x260>
 80083ee:	e00f      	b.n	8008410 <UART_SetConfig+0x270>
 80083f0:	2300      	movs	r3, #0
 80083f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083f6:	e052      	b.n	800849e <UART_SetConfig+0x2fe>
 80083f8:	2302      	movs	r3, #2
 80083fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083fe:	e04e      	b.n	800849e <UART_SetConfig+0x2fe>
 8008400:	2304      	movs	r3, #4
 8008402:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008406:	e04a      	b.n	800849e <UART_SetConfig+0x2fe>
 8008408:	2308      	movs	r3, #8
 800840a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800840e:	e046      	b.n	800849e <UART_SetConfig+0x2fe>
 8008410:	2310      	movs	r3, #16
 8008412:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008416:	e042      	b.n	800849e <UART_SetConfig+0x2fe>
 8008418:	697b      	ldr	r3, [r7, #20]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	4a17      	ldr	r2, [pc, #92]	; (800847c <UART_SetConfig+0x2dc>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d13a      	bne.n	8008498 <UART_SetConfig+0x2f8>
 8008422:	4b18      	ldr	r3, [pc, #96]	; (8008484 <UART_SetConfig+0x2e4>)
 8008424:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008428:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800842c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008430:	d01a      	beq.n	8008468 <UART_SetConfig+0x2c8>
 8008432:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008436:	d81b      	bhi.n	8008470 <UART_SetConfig+0x2d0>
 8008438:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800843c:	d00c      	beq.n	8008458 <UART_SetConfig+0x2b8>
 800843e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008442:	d815      	bhi.n	8008470 <UART_SetConfig+0x2d0>
 8008444:	2b00      	cmp	r3, #0
 8008446:	d003      	beq.n	8008450 <UART_SetConfig+0x2b0>
 8008448:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800844c:	d008      	beq.n	8008460 <UART_SetConfig+0x2c0>
 800844e:	e00f      	b.n	8008470 <UART_SetConfig+0x2d0>
 8008450:	2300      	movs	r3, #0
 8008452:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008456:	e022      	b.n	800849e <UART_SetConfig+0x2fe>
 8008458:	2302      	movs	r3, #2
 800845a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800845e:	e01e      	b.n	800849e <UART_SetConfig+0x2fe>
 8008460:	2304      	movs	r3, #4
 8008462:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008466:	e01a      	b.n	800849e <UART_SetConfig+0x2fe>
 8008468:	2308      	movs	r3, #8
 800846a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800846e:	e016      	b.n	800849e <UART_SetConfig+0x2fe>
 8008470:	2310      	movs	r3, #16
 8008472:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008476:	e012      	b.n	800849e <UART_SetConfig+0x2fe>
 8008478:	cfff69f3 	.word	0xcfff69f3
 800847c:	40008000 	.word	0x40008000
 8008480:	40013800 	.word	0x40013800
 8008484:	40021000 	.word	0x40021000
 8008488:	40004400 	.word	0x40004400
 800848c:	40004800 	.word	0x40004800
 8008490:	40004c00 	.word	0x40004c00
 8008494:	40005000 	.word	0x40005000
 8008498:	2310      	movs	r3, #16
 800849a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800849e:	697b      	ldr	r3, [r7, #20]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	4aae      	ldr	r2, [pc, #696]	; (800875c <UART_SetConfig+0x5bc>)
 80084a4:	4293      	cmp	r3, r2
 80084a6:	f040 8097 	bne.w	80085d8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80084aa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80084ae:	2b08      	cmp	r3, #8
 80084b0:	d823      	bhi.n	80084fa <UART_SetConfig+0x35a>
 80084b2:	a201      	add	r2, pc, #4	; (adr r2, 80084b8 <UART_SetConfig+0x318>)
 80084b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084b8:	080084dd 	.word	0x080084dd
 80084bc:	080084fb 	.word	0x080084fb
 80084c0:	080084e5 	.word	0x080084e5
 80084c4:	080084fb 	.word	0x080084fb
 80084c8:	080084eb 	.word	0x080084eb
 80084cc:	080084fb 	.word	0x080084fb
 80084d0:	080084fb 	.word	0x080084fb
 80084d4:	080084fb 	.word	0x080084fb
 80084d8:	080084f3 	.word	0x080084f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80084dc:	f7fd f97a 	bl	80057d4 <HAL_RCC_GetPCLK1Freq>
 80084e0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80084e2:	e010      	b.n	8008506 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80084e4:	4b9e      	ldr	r3, [pc, #632]	; (8008760 <UART_SetConfig+0x5c0>)
 80084e6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80084e8:	e00d      	b.n	8008506 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80084ea:	f7fd f905 	bl	80056f8 <HAL_RCC_GetSysClockFreq>
 80084ee:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80084f0:	e009      	b.n	8008506 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80084f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80084f6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80084f8:	e005      	b.n	8008506 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80084fa:	2300      	movs	r3, #0
 80084fc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80084fe:	2301      	movs	r3, #1
 8008500:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008504:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008508:	2b00      	cmp	r3, #0
 800850a:	f000 8130 	beq.w	800876e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800850e:	697b      	ldr	r3, [r7, #20]
 8008510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008512:	4a94      	ldr	r2, [pc, #592]	; (8008764 <UART_SetConfig+0x5c4>)
 8008514:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008518:	461a      	mov	r2, r3
 800851a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800851c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008520:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008522:	697b      	ldr	r3, [r7, #20]
 8008524:	685a      	ldr	r2, [r3, #4]
 8008526:	4613      	mov	r3, r2
 8008528:	005b      	lsls	r3, r3, #1
 800852a:	4413      	add	r3, r2
 800852c:	69ba      	ldr	r2, [r7, #24]
 800852e:	429a      	cmp	r2, r3
 8008530:	d305      	bcc.n	800853e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008532:	697b      	ldr	r3, [r7, #20]
 8008534:	685b      	ldr	r3, [r3, #4]
 8008536:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008538:	69ba      	ldr	r2, [r7, #24]
 800853a:	429a      	cmp	r2, r3
 800853c:	d903      	bls.n	8008546 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800853e:	2301      	movs	r3, #1
 8008540:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008544:	e113      	b.n	800876e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008548:	2200      	movs	r2, #0
 800854a:	60bb      	str	r3, [r7, #8]
 800854c:	60fa      	str	r2, [r7, #12]
 800854e:	697b      	ldr	r3, [r7, #20]
 8008550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008552:	4a84      	ldr	r2, [pc, #528]	; (8008764 <UART_SetConfig+0x5c4>)
 8008554:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008558:	b29b      	uxth	r3, r3
 800855a:	2200      	movs	r2, #0
 800855c:	603b      	str	r3, [r7, #0]
 800855e:	607a      	str	r2, [r7, #4]
 8008560:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008564:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008568:	f7f8 fba6 	bl	8000cb8 <__aeabi_uldivmod>
 800856c:	4602      	mov	r2, r0
 800856e:	460b      	mov	r3, r1
 8008570:	4610      	mov	r0, r2
 8008572:	4619      	mov	r1, r3
 8008574:	f04f 0200 	mov.w	r2, #0
 8008578:	f04f 0300 	mov.w	r3, #0
 800857c:	020b      	lsls	r3, r1, #8
 800857e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008582:	0202      	lsls	r2, r0, #8
 8008584:	6979      	ldr	r1, [r7, #20]
 8008586:	6849      	ldr	r1, [r1, #4]
 8008588:	0849      	lsrs	r1, r1, #1
 800858a:	2000      	movs	r0, #0
 800858c:	460c      	mov	r4, r1
 800858e:	4605      	mov	r5, r0
 8008590:	eb12 0804 	adds.w	r8, r2, r4
 8008594:	eb43 0905 	adc.w	r9, r3, r5
 8008598:	697b      	ldr	r3, [r7, #20]
 800859a:	685b      	ldr	r3, [r3, #4]
 800859c:	2200      	movs	r2, #0
 800859e:	469a      	mov	sl, r3
 80085a0:	4693      	mov	fp, r2
 80085a2:	4652      	mov	r2, sl
 80085a4:	465b      	mov	r3, fp
 80085a6:	4640      	mov	r0, r8
 80085a8:	4649      	mov	r1, r9
 80085aa:	f7f8 fb85 	bl	8000cb8 <__aeabi_uldivmod>
 80085ae:	4602      	mov	r2, r0
 80085b0:	460b      	mov	r3, r1
 80085b2:	4613      	mov	r3, r2
 80085b4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80085b6:	6a3b      	ldr	r3, [r7, #32]
 80085b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80085bc:	d308      	bcc.n	80085d0 <UART_SetConfig+0x430>
 80085be:	6a3b      	ldr	r3, [r7, #32]
 80085c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80085c4:	d204      	bcs.n	80085d0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80085c6:	697b      	ldr	r3, [r7, #20]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	6a3a      	ldr	r2, [r7, #32]
 80085cc:	60da      	str	r2, [r3, #12]
 80085ce:	e0ce      	b.n	800876e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80085d0:	2301      	movs	r3, #1
 80085d2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80085d6:	e0ca      	b.n	800876e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80085d8:	697b      	ldr	r3, [r7, #20]
 80085da:	69db      	ldr	r3, [r3, #28]
 80085dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80085e0:	d166      	bne.n	80086b0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80085e2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80085e6:	2b08      	cmp	r3, #8
 80085e8:	d827      	bhi.n	800863a <UART_SetConfig+0x49a>
 80085ea:	a201      	add	r2, pc, #4	; (adr r2, 80085f0 <UART_SetConfig+0x450>)
 80085ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085f0:	08008615 	.word	0x08008615
 80085f4:	0800861d 	.word	0x0800861d
 80085f8:	08008625 	.word	0x08008625
 80085fc:	0800863b 	.word	0x0800863b
 8008600:	0800862b 	.word	0x0800862b
 8008604:	0800863b 	.word	0x0800863b
 8008608:	0800863b 	.word	0x0800863b
 800860c:	0800863b 	.word	0x0800863b
 8008610:	08008633 	.word	0x08008633
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008614:	f7fd f8de 	bl	80057d4 <HAL_RCC_GetPCLK1Freq>
 8008618:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800861a:	e014      	b.n	8008646 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800861c:	f7fd f8f0 	bl	8005800 <HAL_RCC_GetPCLK2Freq>
 8008620:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008622:	e010      	b.n	8008646 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008624:	4b4e      	ldr	r3, [pc, #312]	; (8008760 <UART_SetConfig+0x5c0>)
 8008626:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008628:	e00d      	b.n	8008646 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800862a:	f7fd f865 	bl	80056f8 <HAL_RCC_GetSysClockFreq>
 800862e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008630:	e009      	b.n	8008646 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008632:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008636:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008638:	e005      	b.n	8008646 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800863a:	2300      	movs	r3, #0
 800863c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800863e:	2301      	movs	r3, #1
 8008640:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008644:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008648:	2b00      	cmp	r3, #0
 800864a:	f000 8090 	beq.w	800876e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800864e:	697b      	ldr	r3, [r7, #20]
 8008650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008652:	4a44      	ldr	r2, [pc, #272]	; (8008764 <UART_SetConfig+0x5c4>)
 8008654:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008658:	461a      	mov	r2, r3
 800865a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800865c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008660:	005a      	lsls	r2, r3, #1
 8008662:	697b      	ldr	r3, [r7, #20]
 8008664:	685b      	ldr	r3, [r3, #4]
 8008666:	085b      	lsrs	r3, r3, #1
 8008668:	441a      	add	r2, r3
 800866a:	697b      	ldr	r3, [r7, #20]
 800866c:	685b      	ldr	r3, [r3, #4]
 800866e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008672:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008674:	6a3b      	ldr	r3, [r7, #32]
 8008676:	2b0f      	cmp	r3, #15
 8008678:	d916      	bls.n	80086a8 <UART_SetConfig+0x508>
 800867a:	6a3b      	ldr	r3, [r7, #32]
 800867c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008680:	d212      	bcs.n	80086a8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008682:	6a3b      	ldr	r3, [r7, #32]
 8008684:	b29b      	uxth	r3, r3
 8008686:	f023 030f 	bic.w	r3, r3, #15
 800868a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800868c:	6a3b      	ldr	r3, [r7, #32]
 800868e:	085b      	lsrs	r3, r3, #1
 8008690:	b29b      	uxth	r3, r3
 8008692:	f003 0307 	and.w	r3, r3, #7
 8008696:	b29a      	uxth	r2, r3
 8008698:	8bfb      	ldrh	r3, [r7, #30]
 800869a:	4313      	orrs	r3, r2
 800869c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800869e:	697b      	ldr	r3, [r7, #20]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	8bfa      	ldrh	r2, [r7, #30]
 80086a4:	60da      	str	r2, [r3, #12]
 80086a6:	e062      	b.n	800876e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80086a8:	2301      	movs	r3, #1
 80086aa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80086ae:	e05e      	b.n	800876e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80086b0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80086b4:	2b08      	cmp	r3, #8
 80086b6:	d828      	bhi.n	800870a <UART_SetConfig+0x56a>
 80086b8:	a201      	add	r2, pc, #4	; (adr r2, 80086c0 <UART_SetConfig+0x520>)
 80086ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086be:	bf00      	nop
 80086c0:	080086e5 	.word	0x080086e5
 80086c4:	080086ed 	.word	0x080086ed
 80086c8:	080086f5 	.word	0x080086f5
 80086cc:	0800870b 	.word	0x0800870b
 80086d0:	080086fb 	.word	0x080086fb
 80086d4:	0800870b 	.word	0x0800870b
 80086d8:	0800870b 	.word	0x0800870b
 80086dc:	0800870b 	.word	0x0800870b
 80086e0:	08008703 	.word	0x08008703
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80086e4:	f7fd f876 	bl	80057d4 <HAL_RCC_GetPCLK1Freq>
 80086e8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80086ea:	e014      	b.n	8008716 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80086ec:	f7fd f888 	bl	8005800 <HAL_RCC_GetPCLK2Freq>
 80086f0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80086f2:	e010      	b.n	8008716 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80086f4:	4b1a      	ldr	r3, [pc, #104]	; (8008760 <UART_SetConfig+0x5c0>)
 80086f6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80086f8:	e00d      	b.n	8008716 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80086fa:	f7fc fffd 	bl	80056f8 <HAL_RCC_GetSysClockFreq>
 80086fe:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008700:	e009      	b.n	8008716 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008702:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008706:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008708:	e005      	b.n	8008716 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800870a:	2300      	movs	r3, #0
 800870c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800870e:	2301      	movs	r3, #1
 8008710:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008714:	bf00      	nop
    }

    if (pclk != 0U)
 8008716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008718:	2b00      	cmp	r3, #0
 800871a:	d028      	beq.n	800876e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800871c:	697b      	ldr	r3, [r7, #20]
 800871e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008720:	4a10      	ldr	r2, [pc, #64]	; (8008764 <UART_SetConfig+0x5c4>)
 8008722:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008726:	461a      	mov	r2, r3
 8008728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800872a:	fbb3 f2f2 	udiv	r2, r3, r2
 800872e:	697b      	ldr	r3, [r7, #20]
 8008730:	685b      	ldr	r3, [r3, #4]
 8008732:	085b      	lsrs	r3, r3, #1
 8008734:	441a      	add	r2, r3
 8008736:	697b      	ldr	r3, [r7, #20]
 8008738:	685b      	ldr	r3, [r3, #4]
 800873a:	fbb2 f3f3 	udiv	r3, r2, r3
 800873e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008740:	6a3b      	ldr	r3, [r7, #32]
 8008742:	2b0f      	cmp	r3, #15
 8008744:	d910      	bls.n	8008768 <UART_SetConfig+0x5c8>
 8008746:	6a3b      	ldr	r3, [r7, #32]
 8008748:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800874c:	d20c      	bcs.n	8008768 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800874e:	6a3b      	ldr	r3, [r7, #32]
 8008750:	b29a      	uxth	r2, r3
 8008752:	697b      	ldr	r3, [r7, #20]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	60da      	str	r2, [r3, #12]
 8008758:	e009      	b.n	800876e <UART_SetConfig+0x5ce>
 800875a:	bf00      	nop
 800875c:	40008000 	.word	0x40008000
 8008760:	00f42400 	.word	0x00f42400
 8008764:	0800c9e0 	.word	0x0800c9e0
      }
      else
      {
        ret = HAL_ERROR;
 8008768:	2301      	movs	r3, #1
 800876a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800876e:	697b      	ldr	r3, [r7, #20]
 8008770:	2201      	movs	r2, #1
 8008772:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008776:	697b      	ldr	r3, [r7, #20]
 8008778:	2201      	movs	r2, #1
 800877a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800877e:	697b      	ldr	r3, [r7, #20]
 8008780:	2200      	movs	r2, #0
 8008782:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008784:	697b      	ldr	r3, [r7, #20]
 8008786:	2200      	movs	r2, #0
 8008788:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800878a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800878e:	4618      	mov	r0, r3
 8008790:	3730      	adds	r7, #48	; 0x30
 8008792:	46bd      	mov	sp, r7
 8008794:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008798 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008798:	b480      	push	{r7}
 800879a:	b083      	sub	sp, #12
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087a4:	f003 0301 	and.w	r3, r3, #1
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d00a      	beq.n	80087c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	685b      	ldr	r3, [r3, #4]
 80087b2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	430a      	orrs	r2, r1
 80087c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087c6:	f003 0302 	and.w	r3, r3, #2
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d00a      	beq.n	80087e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	685b      	ldr	r3, [r3, #4]
 80087d4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	430a      	orrs	r2, r1
 80087e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087e8:	f003 0304 	and.w	r3, r3, #4
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d00a      	beq.n	8008806 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	685b      	ldr	r3, [r3, #4]
 80087f6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	430a      	orrs	r2, r1
 8008804:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800880a:	f003 0308 	and.w	r3, r3, #8
 800880e:	2b00      	cmp	r3, #0
 8008810:	d00a      	beq.n	8008828 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	685b      	ldr	r3, [r3, #4]
 8008818:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	430a      	orrs	r2, r1
 8008826:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800882c:	f003 0310 	and.w	r3, r3, #16
 8008830:	2b00      	cmp	r3, #0
 8008832:	d00a      	beq.n	800884a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	689b      	ldr	r3, [r3, #8]
 800883a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	430a      	orrs	r2, r1
 8008848:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800884e:	f003 0320 	and.w	r3, r3, #32
 8008852:	2b00      	cmp	r3, #0
 8008854:	d00a      	beq.n	800886c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	689b      	ldr	r3, [r3, #8]
 800885c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	430a      	orrs	r2, r1
 800886a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008870:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008874:	2b00      	cmp	r3, #0
 8008876:	d01a      	beq.n	80088ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	685b      	ldr	r3, [r3, #4]
 800887e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	430a      	orrs	r2, r1
 800888c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008892:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008896:	d10a      	bne.n	80088ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	685b      	ldr	r3, [r3, #4]
 800889e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	430a      	orrs	r2, r1
 80088ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d00a      	beq.n	80088d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	685b      	ldr	r3, [r3, #4]
 80088c0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	430a      	orrs	r2, r1
 80088ce:	605a      	str	r2, [r3, #4]
  }
}
 80088d0:	bf00      	nop
 80088d2:	370c      	adds	r7, #12
 80088d4:	46bd      	mov	sp, r7
 80088d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088da:	4770      	bx	lr

080088dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b086      	sub	sp, #24
 80088e0:	af02      	add	r7, sp, #8
 80088e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2200      	movs	r2, #0
 80088e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80088ec:	f7f9 ffc2 	bl	8002874 <HAL_GetTick>
 80088f0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f003 0308 	and.w	r3, r3, #8
 80088fc:	2b08      	cmp	r3, #8
 80088fe:	d10e      	bne.n	800891e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008900:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008904:	9300      	str	r3, [sp, #0]
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	2200      	movs	r2, #0
 800890a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800890e:	6878      	ldr	r0, [r7, #4]
 8008910:	f000 f82f 	bl	8008972 <UART_WaitOnFlagUntilTimeout>
 8008914:	4603      	mov	r3, r0
 8008916:	2b00      	cmp	r3, #0
 8008918:	d001      	beq.n	800891e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800891a:	2303      	movs	r3, #3
 800891c:	e025      	b.n	800896a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f003 0304 	and.w	r3, r3, #4
 8008928:	2b04      	cmp	r3, #4
 800892a:	d10e      	bne.n	800894a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800892c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008930:	9300      	str	r3, [sp, #0]
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	2200      	movs	r2, #0
 8008936:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	f000 f819 	bl	8008972 <UART_WaitOnFlagUntilTimeout>
 8008940:	4603      	mov	r3, r0
 8008942:	2b00      	cmp	r3, #0
 8008944:	d001      	beq.n	800894a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008946:	2303      	movs	r3, #3
 8008948:	e00f      	b.n	800896a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2220      	movs	r2, #32
 800894e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2220      	movs	r2, #32
 8008956:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2200      	movs	r2, #0
 800895e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2200      	movs	r2, #0
 8008964:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008968:	2300      	movs	r3, #0
}
 800896a:	4618      	mov	r0, r3
 800896c:	3710      	adds	r7, #16
 800896e:	46bd      	mov	sp, r7
 8008970:	bd80      	pop	{r7, pc}

08008972 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008972:	b580      	push	{r7, lr}
 8008974:	b09c      	sub	sp, #112	; 0x70
 8008976:	af00      	add	r7, sp, #0
 8008978:	60f8      	str	r0, [r7, #12]
 800897a:	60b9      	str	r1, [r7, #8]
 800897c:	603b      	str	r3, [r7, #0]
 800897e:	4613      	mov	r3, r2
 8008980:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008982:	e0a9      	b.n	8008ad8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008984:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008986:	f1b3 3fff 	cmp.w	r3, #4294967295
 800898a:	f000 80a5 	beq.w	8008ad8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800898e:	f7f9 ff71 	bl	8002874 <HAL_GetTick>
 8008992:	4602      	mov	r2, r0
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	1ad3      	subs	r3, r2, r3
 8008998:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800899a:	429a      	cmp	r2, r3
 800899c:	d302      	bcc.n	80089a4 <UART_WaitOnFlagUntilTimeout+0x32>
 800899e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d140      	bne.n	8008a26 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80089ac:	e853 3f00 	ldrex	r3, [r3]
 80089b0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80089b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089b4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80089b8:	667b      	str	r3, [r7, #100]	; 0x64
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	461a      	mov	r2, r3
 80089c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80089c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80089c4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089c6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80089c8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80089ca:	e841 2300 	strex	r3, r2, [r1]
 80089ce:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80089d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d1e6      	bne.n	80089a4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	3308      	adds	r3, #8
 80089dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089e0:	e853 3f00 	ldrex	r3, [r3]
 80089e4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80089e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089e8:	f023 0301 	bic.w	r3, r3, #1
 80089ec:	663b      	str	r3, [r7, #96]	; 0x60
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	3308      	adds	r3, #8
 80089f4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80089f6:	64ba      	str	r2, [r7, #72]	; 0x48
 80089f8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089fa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80089fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80089fe:	e841 2300 	strex	r3, r2, [r1]
 8008a02:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008a04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d1e5      	bne.n	80089d6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	2220      	movs	r2, #32
 8008a0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	2220      	movs	r2, #32
 8008a16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008a22:	2303      	movs	r3, #3
 8008a24:	e069      	b.n	8008afa <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f003 0304 	and.w	r3, r3, #4
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d051      	beq.n	8008ad8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	69db      	ldr	r3, [r3, #28]
 8008a3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008a3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a42:	d149      	bne.n	8008ad8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008a4c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a56:	e853 3f00 	ldrex	r3, [r3]
 8008a5a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a5e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008a62:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	461a      	mov	r2, r3
 8008a6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a6c:	637b      	str	r3, [r7, #52]	; 0x34
 8008a6e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a70:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008a72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008a74:	e841 2300 	strex	r3, r2, [r1]
 8008a78:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d1e6      	bne.n	8008a4e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	3308      	adds	r3, #8
 8008a86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a88:	697b      	ldr	r3, [r7, #20]
 8008a8a:	e853 3f00 	ldrex	r3, [r3]
 8008a8e:	613b      	str	r3, [r7, #16]
   return(result);
 8008a90:	693b      	ldr	r3, [r7, #16]
 8008a92:	f023 0301 	bic.w	r3, r3, #1
 8008a96:	66bb      	str	r3, [r7, #104]	; 0x68
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	3308      	adds	r3, #8
 8008a9e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008aa0:	623a      	str	r2, [r7, #32]
 8008aa2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aa4:	69f9      	ldr	r1, [r7, #28]
 8008aa6:	6a3a      	ldr	r2, [r7, #32]
 8008aa8:	e841 2300 	strex	r3, r2, [r1]
 8008aac:	61bb      	str	r3, [r7, #24]
   return(result);
 8008aae:	69bb      	ldr	r3, [r7, #24]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d1e5      	bne.n	8008a80 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	2220      	movs	r2, #32
 8008ab8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	2220      	movs	r2, #32
 8008ac0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	2220      	movs	r2, #32
 8008ac8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	2200      	movs	r2, #0
 8008ad0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008ad4:	2303      	movs	r3, #3
 8008ad6:	e010      	b.n	8008afa <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	69da      	ldr	r2, [r3, #28]
 8008ade:	68bb      	ldr	r3, [r7, #8]
 8008ae0:	4013      	ands	r3, r2
 8008ae2:	68ba      	ldr	r2, [r7, #8]
 8008ae4:	429a      	cmp	r2, r3
 8008ae6:	bf0c      	ite	eq
 8008ae8:	2301      	moveq	r3, #1
 8008aea:	2300      	movne	r3, #0
 8008aec:	b2db      	uxtb	r3, r3
 8008aee:	461a      	mov	r2, r3
 8008af0:	79fb      	ldrb	r3, [r7, #7]
 8008af2:	429a      	cmp	r2, r3
 8008af4:	f43f af46 	beq.w	8008984 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008af8:	2300      	movs	r3, #0
}
 8008afa:	4618      	mov	r0, r3
 8008afc:	3770      	adds	r7, #112	; 0x70
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bd80      	pop	{r7, pc}
	...

08008b04 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008b04:	b480      	push	{r7}
 8008b06:	b0a3      	sub	sp, #140	; 0x8c
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	60f8      	str	r0, [r7, #12]
 8008b0c:	60b9      	str	r1, [r7, #8]
 8008b0e:	4613      	mov	r3, r2
 8008b10:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	68ba      	ldr	r2, [r7, #8]
 8008b16:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	88fa      	ldrh	r2, [r7, #6]
 8008b1c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	88fa      	ldrh	r2, [r7, #6]
 8008b24:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	689b      	ldr	r3, [r3, #8]
 8008b32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b36:	d10e      	bne.n	8008b56 <UART_Start_Receive_IT+0x52>
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	691b      	ldr	r3, [r3, #16]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d105      	bne.n	8008b4c <UART_Start_Receive_IT+0x48>
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008b46:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008b4a:	e02d      	b.n	8008ba8 <UART_Start_Receive_IT+0xa4>
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	22ff      	movs	r2, #255	; 0xff
 8008b50:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008b54:	e028      	b.n	8008ba8 <UART_Start_Receive_IT+0xa4>
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	689b      	ldr	r3, [r3, #8]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d10d      	bne.n	8008b7a <UART_Start_Receive_IT+0x76>
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	691b      	ldr	r3, [r3, #16]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d104      	bne.n	8008b70 <UART_Start_Receive_IT+0x6c>
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	22ff      	movs	r2, #255	; 0xff
 8008b6a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008b6e:	e01b      	b.n	8008ba8 <UART_Start_Receive_IT+0xa4>
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	227f      	movs	r2, #127	; 0x7f
 8008b74:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008b78:	e016      	b.n	8008ba8 <UART_Start_Receive_IT+0xa4>
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	689b      	ldr	r3, [r3, #8]
 8008b7e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008b82:	d10d      	bne.n	8008ba0 <UART_Start_Receive_IT+0x9c>
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	691b      	ldr	r3, [r3, #16]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d104      	bne.n	8008b96 <UART_Start_Receive_IT+0x92>
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	227f      	movs	r2, #127	; 0x7f
 8008b90:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008b94:	e008      	b.n	8008ba8 <UART_Start_Receive_IT+0xa4>
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	223f      	movs	r2, #63	; 0x3f
 8008b9a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008b9e:	e003      	b.n	8008ba8 <UART_Start_Receive_IT+0xa4>
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	2200      	movs	r2, #0
 8008bac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	2222      	movs	r2, #34	; 0x22
 8008bb4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	3308      	adds	r3, #8
 8008bbe:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bc0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008bc2:	e853 3f00 	ldrex	r3, [r3]
 8008bc6:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008bc8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008bca:	f043 0301 	orr.w	r3, r3, #1
 8008bce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	3308      	adds	r3, #8
 8008bd8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008bdc:	673a      	str	r2, [r7, #112]	; 0x70
 8008bde:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008be0:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8008be2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008be4:	e841 2300 	strex	r3, r2, [r1]
 8008be8:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8008bea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d1e3      	bne.n	8008bb8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008bf4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008bf8:	d153      	bne.n	8008ca2 <UART_Start_Receive_IT+0x19e>
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008c00:	88fa      	ldrh	r2, [r7, #6]
 8008c02:	429a      	cmp	r2, r3
 8008c04:	d34d      	bcc.n	8008ca2 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	689b      	ldr	r3, [r3, #8]
 8008c0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c0e:	d107      	bne.n	8008c20 <UART_Start_Receive_IT+0x11c>
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	691b      	ldr	r3, [r3, #16]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d103      	bne.n	8008c20 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	4a4b      	ldr	r2, [pc, #300]	; (8008d48 <UART_Start_Receive_IT+0x244>)
 8008c1c:	671a      	str	r2, [r3, #112]	; 0x70
 8008c1e:	e002      	b.n	8008c26 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	4a4a      	ldr	r2, [pc, #296]	; (8008d4c <UART_Start_Receive_IT+0x248>)
 8008c24:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	2200      	movs	r2, #0
 8008c2a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	691b      	ldr	r3, [r3, #16]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d01a      	beq.n	8008c6c <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c3e:	e853 3f00 	ldrex	r3, [r3]
 8008c42:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008c44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008c4a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	461a      	mov	r2, r3
 8008c54:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008c58:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008c5a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c5c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008c5e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008c60:	e841 2300 	strex	r3, r2, [r1]
 8008c64:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008c66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d1e4      	bne.n	8008c36 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	3308      	adds	r3, #8
 8008c72:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c76:	e853 3f00 	ldrex	r3, [r3]
 8008c7a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008c7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c82:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	3308      	adds	r3, #8
 8008c8a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008c8c:	64ba      	str	r2, [r7, #72]	; 0x48
 8008c8e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c90:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008c92:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008c94:	e841 2300 	strex	r3, r2, [r1]
 8008c98:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008c9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d1e5      	bne.n	8008c6c <UART_Start_Receive_IT+0x168>
 8008ca0:	e04a      	b.n	8008d38 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	689b      	ldr	r3, [r3, #8]
 8008ca6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008caa:	d107      	bne.n	8008cbc <UART_Start_Receive_IT+0x1b8>
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	691b      	ldr	r3, [r3, #16]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d103      	bne.n	8008cbc <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	4a26      	ldr	r2, [pc, #152]	; (8008d50 <UART_Start_Receive_IT+0x24c>)
 8008cb8:	671a      	str	r2, [r3, #112]	; 0x70
 8008cba:	e002      	b.n	8008cc2 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	4a25      	ldr	r2, [pc, #148]	; (8008d54 <UART_Start_Receive_IT+0x250>)
 8008cc0:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	691b      	ldr	r3, [r3, #16]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d019      	beq.n	8008d06 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cda:	e853 3f00 	ldrex	r3, [r3]
 8008cde:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ce2:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8008ce6:	677b      	str	r3, [r7, #116]	; 0x74
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	461a      	mov	r2, r3
 8008cee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008cf0:	637b      	str	r3, [r7, #52]	; 0x34
 8008cf2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cf4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008cf6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008cf8:	e841 2300 	strex	r3, r2, [r1]
 8008cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d1e6      	bne.n	8008cd2 <UART_Start_Receive_IT+0x1ce>
 8008d04:	e018      	b.n	8008d38 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d0c:	697b      	ldr	r3, [r7, #20]
 8008d0e:	e853 3f00 	ldrex	r3, [r3]
 8008d12:	613b      	str	r3, [r7, #16]
   return(result);
 8008d14:	693b      	ldr	r3, [r7, #16]
 8008d16:	f043 0320 	orr.w	r3, r3, #32
 8008d1a:	67bb      	str	r3, [r7, #120]	; 0x78
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	461a      	mov	r2, r3
 8008d22:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d24:	623b      	str	r3, [r7, #32]
 8008d26:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d28:	69f9      	ldr	r1, [r7, #28]
 8008d2a:	6a3a      	ldr	r2, [r7, #32]
 8008d2c:	e841 2300 	strex	r3, r2, [r1]
 8008d30:	61bb      	str	r3, [r7, #24]
   return(result);
 8008d32:	69bb      	ldr	r3, [r7, #24]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d1e6      	bne.n	8008d06 <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8008d38:	2300      	movs	r3, #0
}
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	378c      	adds	r7, #140	; 0x8c
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d44:	4770      	bx	lr
 8008d46:	bf00      	nop
 8008d48:	08009461 	.word	0x08009461
 8008d4c:	08009169 	.word	0x08009169
 8008d50:	08009007 	.word	0x08009007
 8008d54:	08008ea7 	.word	0x08008ea7

08008d58 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008d58:	b480      	push	{r7}
 8008d5a:	b095      	sub	sp, #84	; 0x54
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d68:	e853 3f00 	ldrex	r3, [r3]
 8008d6c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d70:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008d74:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	461a      	mov	r2, r3
 8008d7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d7e:	643b      	str	r3, [r7, #64]	; 0x40
 8008d80:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d82:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008d84:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008d86:	e841 2300 	strex	r3, r2, [r1]
 8008d8a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d1e6      	bne.n	8008d60 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	3308      	adds	r3, #8
 8008d98:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d9a:	6a3b      	ldr	r3, [r7, #32]
 8008d9c:	e853 3f00 	ldrex	r3, [r3]
 8008da0:	61fb      	str	r3, [r7, #28]
   return(result);
 8008da2:	69fb      	ldr	r3, [r7, #28]
 8008da4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008da8:	f023 0301 	bic.w	r3, r3, #1
 8008dac:	64bb      	str	r3, [r7, #72]	; 0x48
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	3308      	adds	r3, #8
 8008db4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008db6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008db8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008dbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008dbe:	e841 2300 	strex	r3, r2, [r1]
 8008dc2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d1e3      	bne.n	8008d92 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008dce:	2b01      	cmp	r3, #1
 8008dd0:	d118      	bne.n	8008e04 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	e853 3f00 	ldrex	r3, [r3]
 8008dde:	60bb      	str	r3, [r7, #8]
   return(result);
 8008de0:	68bb      	ldr	r3, [r7, #8]
 8008de2:	f023 0310 	bic.w	r3, r3, #16
 8008de6:	647b      	str	r3, [r7, #68]	; 0x44
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	461a      	mov	r2, r3
 8008dee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008df0:	61bb      	str	r3, [r7, #24]
 8008df2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008df4:	6979      	ldr	r1, [r7, #20]
 8008df6:	69ba      	ldr	r2, [r7, #24]
 8008df8:	e841 2300 	strex	r3, r2, [r1]
 8008dfc:	613b      	str	r3, [r7, #16]
   return(result);
 8008dfe:	693b      	ldr	r3, [r7, #16]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d1e6      	bne.n	8008dd2 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2220      	movs	r2, #32
 8008e08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2200      	movs	r2, #0
 8008e10:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	2200      	movs	r2, #0
 8008e16:	671a      	str	r2, [r3, #112]	; 0x70
}
 8008e18:	bf00      	nop
 8008e1a:	3754      	adds	r7, #84	; 0x54
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e22:	4770      	bx	lr

08008e24 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b084      	sub	sp, #16
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e30:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	2200      	movs	r2, #0
 8008e36:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008e42:	68f8      	ldr	r0, [r7, #12]
 8008e44:	f7ff f996 	bl	8008174 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e48:	bf00      	nop
 8008e4a:	3710      	adds	r7, #16
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	bd80      	pop	{r7, pc}

08008e50 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b088      	sub	sp, #32
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	e853 3f00 	ldrex	r3, [r3]
 8008e64:	60bb      	str	r3, [r7, #8]
   return(result);
 8008e66:	68bb      	ldr	r3, [r7, #8]
 8008e68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e6c:	61fb      	str	r3, [r7, #28]
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	461a      	mov	r2, r3
 8008e74:	69fb      	ldr	r3, [r7, #28]
 8008e76:	61bb      	str	r3, [r7, #24]
 8008e78:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e7a:	6979      	ldr	r1, [r7, #20]
 8008e7c:	69ba      	ldr	r2, [r7, #24]
 8008e7e:	e841 2300 	strex	r3, r2, [r1]
 8008e82:	613b      	str	r3, [r7, #16]
   return(result);
 8008e84:	693b      	ldr	r3, [r7, #16]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d1e6      	bne.n	8008e58 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	2220      	movs	r2, #32
 8008e8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	2200      	movs	r2, #0
 8008e96:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008e98:	6878      	ldr	r0, [r7, #4]
 8008e9a:	f7ff f961 	bl	8008160 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e9e:	bf00      	nop
 8008ea0:	3720      	adds	r7, #32
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	bd80      	pop	{r7, pc}

08008ea6 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008ea6:	b580      	push	{r7, lr}
 8008ea8:	b096      	sub	sp, #88	; 0x58
 8008eaa:	af00      	add	r7, sp, #0
 8008eac:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008eb4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ebe:	2b22      	cmp	r3, #34	; 0x22
 8008ec0:	f040 8095 	bne.w	8008fee <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eca:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008ece:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8008ed2:	b2d9      	uxtb	r1, r3
 8008ed4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008ed8:	b2da      	uxtb	r2, r3
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ede:	400a      	ands	r2, r1
 8008ee0:	b2d2      	uxtb	r2, r2
 8008ee2:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ee8:	1c5a      	adds	r2, r3, #1
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008ef4:	b29b      	uxth	r3, r3
 8008ef6:	3b01      	subs	r3, #1
 8008ef8:	b29a      	uxth	r2, r3
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008f06:	b29b      	uxth	r3, r3
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d178      	bne.n	8008ffe <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f14:	e853 3f00 	ldrex	r3, [r3]
 8008f18:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008f1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f1c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008f20:	653b      	str	r3, [r7, #80]	; 0x50
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	461a      	mov	r2, r3
 8008f28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f2a:	647b      	str	r3, [r7, #68]	; 0x44
 8008f2c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f2e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008f30:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008f32:	e841 2300 	strex	r3, r2, [r1]
 8008f36:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008f38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d1e6      	bne.n	8008f0c <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	3308      	adds	r3, #8
 8008f44:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f48:	e853 3f00 	ldrex	r3, [r3]
 8008f4c:	623b      	str	r3, [r7, #32]
   return(result);
 8008f4e:	6a3b      	ldr	r3, [r7, #32]
 8008f50:	f023 0301 	bic.w	r3, r3, #1
 8008f54:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	3308      	adds	r3, #8
 8008f5c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008f5e:	633a      	str	r2, [r7, #48]	; 0x30
 8008f60:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008f64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f66:	e841 2300 	strex	r3, r2, [r1]
 8008f6a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d1e5      	bne.n	8008f3e <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	2220      	movs	r2, #32
 8008f76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f84:	2b01      	cmp	r3, #1
 8008f86:	d12e      	bne.n	8008fe6 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f94:	693b      	ldr	r3, [r7, #16]
 8008f96:	e853 3f00 	ldrex	r3, [r3]
 8008f9a:	60fb      	str	r3, [r7, #12]
   return(result);
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	f023 0310 	bic.w	r3, r3, #16
 8008fa2:	64bb      	str	r3, [r7, #72]	; 0x48
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	461a      	mov	r2, r3
 8008faa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008fac:	61fb      	str	r3, [r7, #28]
 8008fae:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fb0:	69b9      	ldr	r1, [r7, #24]
 8008fb2:	69fa      	ldr	r2, [r7, #28]
 8008fb4:	e841 2300 	strex	r3, r2, [r1]
 8008fb8:	617b      	str	r3, [r7, #20]
   return(result);
 8008fba:	697b      	ldr	r3, [r7, #20]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d1e6      	bne.n	8008f8e <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	69db      	ldr	r3, [r3, #28]
 8008fc6:	f003 0310 	and.w	r3, r3, #16
 8008fca:	2b10      	cmp	r3, #16
 8008fcc:	d103      	bne.n	8008fd6 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	2210      	movs	r2, #16
 8008fd4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008fdc:	4619      	mov	r1, r3
 8008fde:	6878      	ldr	r0, [r7, #4]
 8008fe0:	f7ff f8d2 	bl	8008188 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008fe4:	e00b      	b.n	8008ffe <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8008fe6:	6878      	ldr	r0, [r7, #4]
 8008fe8:	f7f9 fbda 	bl	80027a0 <HAL_UART_RxCpltCallback>
}
 8008fec:	e007      	b.n	8008ffe <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	699a      	ldr	r2, [r3, #24]
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	f042 0208 	orr.w	r2, r2, #8
 8008ffc:	619a      	str	r2, [r3, #24]
}
 8008ffe:	bf00      	nop
 8009000:	3758      	adds	r7, #88	; 0x58
 8009002:	46bd      	mov	sp, r7
 8009004:	bd80      	pop	{r7, pc}

08009006 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009006:	b580      	push	{r7, lr}
 8009008:	b096      	sub	sp, #88	; 0x58
 800900a:	af00      	add	r7, sp, #0
 800900c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009014:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800901e:	2b22      	cmp	r3, #34	; 0x22
 8009020:	f040 8095 	bne.w	800914e <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800902a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009032:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8009034:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8009038:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800903c:	4013      	ands	r3, r2
 800903e:	b29a      	uxth	r2, r3
 8009040:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009042:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009048:	1c9a      	adds	r2, r3, #2
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009054:	b29b      	uxth	r3, r3
 8009056:	3b01      	subs	r3, #1
 8009058:	b29a      	uxth	r2, r3
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009066:	b29b      	uxth	r3, r3
 8009068:	2b00      	cmp	r3, #0
 800906a:	d178      	bne.n	800915e <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009072:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009074:	e853 3f00 	ldrex	r3, [r3]
 8009078:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800907a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800907c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009080:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	461a      	mov	r2, r3
 8009088:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800908a:	643b      	str	r3, [r7, #64]	; 0x40
 800908c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800908e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009090:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009092:	e841 2300 	strex	r3, r2, [r1]
 8009096:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800909a:	2b00      	cmp	r3, #0
 800909c:	d1e6      	bne.n	800906c <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	3308      	adds	r3, #8
 80090a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090a6:	6a3b      	ldr	r3, [r7, #32]
 80090a8:	e853 3f00 	ldrex	r3, [r3]
 80090ac:	61fb      	str	r3, [r7, #28]
   return(result);
 80090ae:	69fb      	ldr	r3, [r7, #28]
 80090b0:	f023 0301 	bic.w	r3, r3, #1
 80090b4:	64bb      	str	r3, [r7, #72]	; 0x48
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	3308      	adds	r3, #8
 80090bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80090be:	62fa      	str	r2, [r7, #44]	; 0x2c
 80090c0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80090c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80090c6:	e841 2300 	strex	r3, r2, [r1]
 80090ca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80090cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d1e5      	bne.n	800909e <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2220      	movs	r2, #32
 80090d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	2200      	movs	r2, #0
 80090de:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090e4:	2b01      	cmp	r3, #1
 80090e6:	d12e      	bne.n	8009146 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	2200      	movs	r2, #0
 80090ec:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	e853 3f00 	ldrex	r3, [r3]
 80090fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80090fc:	68bb      	ldr	r3, [r7, #8]
 80090fe:	f023 0310 	bic.w	r3, r3, #16
 8009102:	647b      	str	r3, [r7, #68]	; 0x44
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	461a      	mov	r2, r3
 800910a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800910c:	61bb      	str	r3, [r7, #24]
 800910e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009110:	6979      	ldr	r1, [r7, #20]
 8009112:	69ba      	ldr	r2, [r7, #24]
 8009114:	e841 2300 	strex	r3, r2, [r1]
 8009118:	613b      	str	r3, [r7, #16]
   return(result);
 800911a:	693b      	ldr	r3, [r7, #16]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d1e6      	bne.n	80090ee <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	69db      	ldr	r3, [r3, #28]
 8009126:	f003 0310 	and.w	r3, r3, #16
 800912a:	2b10      	cmp	r3, #16
 800912c:	d103      	bne.n	8009136 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	2210      	movs	r2, #16
 8009134:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800913c:	4619      	mov	r1, r3
 800913e:	6878      	ldr	r0, [r7, #4]
 8009140:	f7ff f822 	bl	8008188 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009144:	e00b      	b.n	800915e <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8009146:	6878      	ldr	r0, [r7, #4]
 8009148:	f7f9 fb2a 	bl	80027a0 <HAL_UART_RxCpltCallback>
}
 800914c:	e007      	b.n	800915e <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	699a      	ldr	r2, [r3, #24]
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	f042 0208 	orr.w	r2, r2, #8
 800915c:	619a      	str	r2, [r3, #24]
}
 800915e:	bf00      	nop
 8009160:	3758      	adds	r7, #88	; 0x58
 8009162:	46bd      	mov	sp, r7
 8009164:	bd80      	pop	{r7, pc}
	...

08009168 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b0a6      	sub	sp, #152	; 0x98
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009176:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	69db      	ldr	r3, [r3, #28]
 8009180:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	689b      	ldr	r3, [r3, #8]
 8009194:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800919e:	2b22      	cmp	r3, #34	; 0x22
 80091a0:	f040 814f 	bne.w	8009442 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80091aa:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80091ae:	e0f6      	b.n	800939e <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091b6:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80091ba:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 80091be:	b2d9      	uxtb	r1, r3
 80091c0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80091c4:	b2da      	uxtb	r2, r3
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091ca:	400a      	ands	r2, r1
 80091cc:	b2d2      	uxtb	r2, r2
 80091ce:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091d4:	1c5a      	adds	r2, r3, #1
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80091e0:	b29b      	uxth	r3, r3
 80091e2:	3b01      	subs	r3, #1
 80091e4:	b29a      	uxth	r2, r3
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	69db      	ldr	r3, [r3, #28]
 80091f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80091f6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80091fa:	f003 0307 	and.w	r3, r3, #7
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d053      	beq.n	80092aa <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009202:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009206:	f003 0301 	and.w	r3, r3, #1
 800920a:	2b00      	cmp	r3, #0
 800920c:	d011      	beq.n	8009232 <UART_RxISR_8BIT_FIFOEN+0xca>
 800920e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009212:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009216:	2b00      	cmp	r3, #0
 8009218:	d00b      	beq.n	8009232 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	2201      	movs	r2, #1
 8009220:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009228:	f043 0201 	orr.w	r2, r3, #1
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009232:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009236:	f003 0302 	and.w	r3, r3, #2
 800923a:	2b00      	cmp	r3, #0
 800923c:	d011      	beq.n	8009262 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800923e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009242:	f003 0301 	and.w	r3, r3, #1
 8009246:	2b00      	cmp	r3, #0
 8009248:	d00b      	beq.n	8009262 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	2202      	movs	r2, #2
 8009250:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009258:	f043 0204 	orr.w	r2, r3, #4
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009262:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009266:	f003 0304 	and.w	r3, r3, #4
 800926a:	2b00      	cmp	r3, #0
 800926c:	d011      	beq.n	8009292 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800926e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009272:	f003 0301 	and.w	r3, r3, #1
 8009276:	2b00      	cmp	r3, #0
 8009278:	d00b      	beq.n	8009292 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	2204      	movs	r2, #4
 8009280:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009288:	f043 0202 	orr.w	r2, r3, #2
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009298:	2b00      	cmp	r3, #0
 800929a:	d006      	beq.n	80092aa <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800929c:	6878      	ldr	r0, [r7, #4]
 800929e:	f7fe ff69 	bl	8008174 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	2200      	movs	r2, #0
 80092a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80092b0:	b29b      	uxth	r3, r3
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d173      	bne.n	800939e <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80092be:	e853 3f00 	ldrex	r3, [r3]
 80092c2:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80092c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80092c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80092ca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	461a      	mov	r2, r3
 80092d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80092d8:	66bb      	str	r3, [r7, #104]	; 0x68
 80092da:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092dc:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80092de:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80092e0:	e841 2300 	strex	r3, r2, [r1]
 80092e4:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80092e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d1e4      	bne.n	80092b6 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	3308      	adds	r3, #8
 80092f2:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80092f6:	e853 3f00 	ldrex	r3, [r3]
 80092fa:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80092fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80092fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009302:	f023 0301 	bic.w	r3, r3, #1
 8009306:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	3308      	adds	r3, #8
 800930e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009310:	657a      	str	r2, [r7, #84]	; 0x54
 8009312:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009314:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009316:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009318:	e841 2300 	strex	r3, r2, [r1]
 800931c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800931e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009320:	2b00      	cmp	r3, #0
 8009322:	d1e3      	bne.n	80092ec <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	2220      	movs	r2, #32
 8009328:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	2200      	movs	r2, #0
 8009330:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009336:	2b01      	cmp	r3, #1
 8009338:	d12e      	bne.n	8009398 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	2200      	movs	r2, #0
 800933e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009346:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009348:	e853 3f00 	ldrex	r3, [r3]
 800934c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800934e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009350:	f023 0310 	bic.w	r3, r3, #16
 8009354:	67bb      	str	r3, [r7, #120]	; 0x78
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	461a      	mov	r2, r3
 800935c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800935e:	643b      	str	r3, [r7, #64]	; 0x40
 8009360:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009362:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009364:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009366:	e841 2300 	strex	r3, r2, [r1]
 800936a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800936c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800936e:	2b00      	cmp	r3, #0
 8009370:	d1e6      	bne.n	8009340 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	69db      	ldr	r3, [r3, #28]
 8009378:	f003 0310 	and.w	r3, r3, #16
 800937c:	2b10      	cmp	r3, #16
 800937e:	d103      	bne.n	8009388 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	2210      	movs	r2, #16
 8009386:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800938e:	4619      	mov	r1, r3
 8009390:	6878      	ldr	r0, [r7, #4]
 8009392:	f7fe fef9 	bl	8008188 <HAL_UARTEx_RxEventCallback>
 8009396:	e002      	b.n	800939e <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009398:	6878      	ldr	r0, [r7, #4]
 800939a:	f7f9 fa01 	bl	80027a0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800939e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d006      	beq.n	80093b4 <UART_RxISR_8BIT_FIFOEN+0x24c>
 80093a6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80093aa:	f003 0320 	and.w	r3, r3, #32
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	f47f aefe 	bne.w	80091b0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80093ba:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80093be:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d045      	beq.n	8009452 <UART_RxISR_8BIT_FIFOEN+0x2ea>
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80093cc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80093d0:	429a      	cmp	r2, r3
 80093d2:	d23e      	bcs.n	8009452 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	3308      	adds	r3, #8
 80093da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093dc:	6a3b      	ldr	r3, [r7, #32]
 80093de:	e853 3f00 	ldrex	r3, [r3]
 80093e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80093e4:	69fb      	ldr	r3, [r7, #28]
 80093e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80093ea:	673b      	str	r3, [r7, #112]	; 0x70
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	3308      	adds	r3, #8
 80093f2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80093f4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80093f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80093fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80093fc:	e841 2300 	strex	r3, r2, [r1]
 8009400:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009404:	2b00      	cmp	r3, #0
 8009406:	d1e5      	bne.n	80093d4 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	4a14      	ldr	r2, [pc, #80]	; (800945c <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 800940c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	e853 3f00 	ldrex	r3, [r3]
 800941a:	60bb      	str	r3, [r7, #8]
   return(result);
 800941c:	68bb      	ldr	r3, [r7, #8]
 800941e:	f043 0320 	orr.w	r3, r3, #32
 8009422:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	461a      	mov	r2, r3
 800942a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800942c:	61bb      	str	r3, [r7, #24]
 800942e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009430:	6979      	ldr	r1, [r7, #20]
 8009432:	69ba      	ldr	r2, [r7, #24]
 8009434:	e841 2300 	strex	r3, r2, [r1]
 8009438:	613b      	str	r3, [r7, #16]
   return(result);
 800943a:	693b      	ldr	r3, [r7, #16]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d1e6      	bne.n	800940e <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009440:	e007      	b.n	8009452 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	699a      	ldr	r2, [r3, #24]
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	f042 0208 	orr.w	r2, r2, #8
 8009450:	619a      	str	r2, [r3, #24]
}
 8009452:	bf00      	nop
 8009454:	3798      	adds	r7, #152	; 0x98
 8009456:	46bd      	mov	sp, r7
 8009458:	bd80      	pop	{r7, pc}
 800945a:	bf00      	nop
 800945c:	08008ea7 	.word	0x08008ea7

08009460 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b0a8      	sub	sp, #160	; 0xa0
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800946e:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	69db      	ldr	r3, [r3, #28]
 8009478:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	689b      	ldr	r3, [r3, #8]
 800948c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009496:	2b22      	cmp	r3, #34	; 0x22
 8009498:	f040 8153 	bne.w	8009742 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80094a2:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80094a6:	e0fa      	b.n	800969e <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094ae:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094b6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 80094ba:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 80094be:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80094c2:	4013      	ands	r3, r2
 80094c4:	b29a      	uxth	r2, r3
 80094c6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80094ca:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094d0:	1c9a      	adds	r2, r3, #2
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80094dc:	b29b      	uxth	r3, r3
 80094de:	3b01      	subs	r3, #1
 80094e0:	b29a      	uxth	r2, r3
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	69db      	ldr	r3, [r3, #28]
 80094ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80094f2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80094f6:	f003 0307 	and.w	r3, r3, #7
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d053      	beq.n	80095a6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80094fe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009502:	f003 0301 	and.w	r3, r3, #1
 8009506:	2b00      	cmp	r3, #0
 8009508:	d011      	beq.n	800952e <UART_RxISR_16BIT_FIFOEN+0xce>
 800950a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800950e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009512:	2b00      	cmp	r3, #0
 8009514:	d00b      	beq.n	800952e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	2201      	movs	r2, #1
 800951c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009524:	f043 0201 	orr.w	r2, r3, #1
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800952e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009532:	f003 0302 	and.w	r3, r3, #2
 8009536:	2b00      	cmp	r3, #0
 8009538:	d011      	beq.n	800955e <UART_RxISR_16BIT_FIFOEN+0xfe>
 800953a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800953e:	f003 0301 	and.w	r3, r3, #1
 8009542:	2b00      	cmp	r3, #0
 8009544:	d00b      	beq.n	800955e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	2202      	movs	r2, #2
 800954c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009554:	f043 0204 	orr.w	r2, r3, #4
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800955e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009562:	f003 0304 	and.w	r3, r3, #4
 8009566:	2b00      	cmp	r3, #0
 8009568:	d011      	beq.n	800958e <UART_RxISR_16BIT_FIFOEN+0x12e>
 800956a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800956e:	f003 0301 	and.w	r3, r3, #1
 8009572:	2b00      	cmp	r3, #0
 8009574:	d00b      	beq.n	800958e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	2204      	movs	r2, #4
 800957c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009584:	f043 0202 	orr.w	r2, r3, #2
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009594:	2b00      	cmp	r3, #0
 8009596:	d006      	beq.n	80095a6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009598:	6878      	ldr	r0, [r7, #4]
 800959a:	f7fe fdeb 	bl	8008174 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	2200      	movs	r2, #0
 80095a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80095ac:	b29b      	uxth	r3, r3
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d175      	bne.n	800969e <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80095ba:	e853 3f00 	ldrex	r3, [r3]
 80095be:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80095c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80095c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80095c6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	461a      	mov	r2, r3
 80095d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80095d4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80095d6:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095d8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80095da:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80095dc:	e841 2300 	strex	r3, r2, [r1]
 80095e0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80095e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d1e4      	bne.n	80095b2 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	3308      	adds	r3, #8
 80095ee:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095f2:	e853 3f00 	ldrex	r3, [r3]
 80095f6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80095f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80095fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80095fe:	f023 0301 	bic.w	r3, r3, #1
 8009602:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	3308      	adds	r3, #8
 800960c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009610:	65ba      	str	r2, [r7, #88]	; 0x58
 8009612:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009614:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009616:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009618:	e841 2300 	strex	r3, r2, [r1]
 800961c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800961e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009620:	2b00      	cmp	r3, #0
 8009622:	d1e1      	bne.n	80095e8 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	2220      	movs	r2, #32
 8009628:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	2200      	movs	r2, #0
 8009630:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009636:	2b01      	cmp	r3, #1
 8009638:	d12e      	bne.n	8009698 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	2200      	movs	r2, #0
 800963e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009648:	e853 3f00 	ldrex	r3, [r3]
 800964c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800964e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009650:	f023 0310 	bic.w	r3, r3, #16
 8009654:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	461a      	mov	r2, r3
 800965c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800965e:	647b      	str	r3, [r7, #68]	; 0x44
 8009660:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009662:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009664:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009666:	e841 2300 	strex	r3, r2, [r1]
 800966a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800966c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800966e:	2b00      	cmp	r3, #0
 8009670:	d1e6      	bne.n	8009640 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	69db      	ldr	r3, [r3, #28]
 8009678:	f003 0310 	and.w	r3, r3, #16
 800967c:	2b10      	cmp	r3, #16
 800967e:	d103      	bne.n	8009688 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	2210      	movs	r2, #16
 8009686:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800968e:	4619      	mov	r1, r3
 8009690:	6878      	ldr	r0, [r7, #4]
 8009692:	f7fe fd79 	bl	8008188 <HAL_UARTEx_RxEventCallback>
 8009696:	e002      	b.n	800969e <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009698:	6878      	ldr	r0, [r7, #4]
 800969a:	f7f9 f881 	bl	80027a0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800969e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d006      	beq.n	80096b4 <UART_RxISR_16BIT_FIFOEN+0x254>
 80096a6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80096aa:	f003 0320 	and.w	r3, r3, #32
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	f47f aefa 	bne.w	80094a8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80096ba:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80096be:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d045      	beq.n	8009752 <UART_RxISR_16BIT_FIFOEN+0x2f2>
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80096cc:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 80096d0:	429a      	cmp	r2, r3
 80096d2:	d23e      	bcs.n	8009752 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	3308      	adds	r3, #8
 80096da:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096de:	e853 3f00 	ldrex	r3, [r3]
 80096e2:	623b      	str	r3, [r7, #32]
   return(result);
 80096e4:	6a3b      	ldr	r3, [r7, #32]
 80096e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80096ea:	677b      	str	r3, [r7, #116]	; 0x74
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	3308      	adds	r3, #8
 80096f2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80096f4:	633a      	str	r2, [r7, #48]	; 0x30
 80096f6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096f8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80096fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80096fc:	e841 2300 	strex	r3, r2, [r1]
 8009700:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009704:	2b00      	cmp	r3, #0
 8009706:	d1e5      	bne.n	80096d4 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	4a14      	ldr	r2, [pc, #80]	; (800975c <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 800970c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009714:	693b      	ldr	r3, [r7, #16]
 8009716:	e853 3f00 	ldrex	r3, [r3]
 800971a:	60fb      	str	r3, [r7, #12]
   return(result);
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	f043 0320 	orr.w	r3, r3, #32
 8009722:	673b      	str	r3, [r7, #112]	; 0x70
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	461a      	mov	r2, r3
 800972a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800972c:	61fb      	str	r3, [r7, #28]
 800972e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009730:	69b9      	ldr	r1, [r7, #24]
 8009732:	69fa      	ldr	r2, [r7, #28]
 8009734:	e841 2300 	strex	r3, r2, [r1]
 8009738:	617b      	str	r3, [r7, #20]
   return(result);
 800973a:	697b      	ldr	r3, [r7, #20]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d1e6      	bne.n	800970e <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009740:	e007      	b.n	8009752 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	699a      	ldr	r2, [r3, #24]
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	f042 0208 	orr.w	r2, r2, #8
 8009750:	619a      	str	r2, [r3, #24]
}
 8009752:	bf00      	nop
 8009754:	37a0      	adds	r7, #160	; 0xa0
 8009756:	46bd      	mov	sp, r7
 8009758:	bd80      	pop	{r7, pc}
 800975a:	bf00      	nop
 800975c:	08009007 	.word	0x08009007

08009760 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009760:	b480      	push	{r7}
 8009762:	b083      	sub	sp, #12
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009768:	bf00      	nop
 800976a:	370c      	adds	r7, #12
 800976c:	46bd      	mov	sp, r7
 800976e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009772:	4770      	bx	lr

08009774 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009774:	b480      	push	{r7}
 8009776:	b083      	sub	sp, #12
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800977c:	bf00      	nop
 800977e:	370c      	adds	r7, #12
 8009780:	46bd      	mov	sp, r7
 8009782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009786:	4770      	bx	lr

08009788 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009788:	b480      	push	{r7}
 800978a:	b083      	sub	sp, #12
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009790:	bf00      	nop
 8009792:	370c      	adds	r7, #12
 8009794:	46bd      	mov	sp, r7
 8009796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979a:	4770      	bx	lr

0800979c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800979c:	b480      	push	{r7}
 800979e:	b085      	sub	sp, #20
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80097aa:	2b01      	cmp	r3, #1
 80097ac:	d101      	bne.n	80097b2 <HAL_UARTEx_DisableFifoMode+0x16>
 80097ae:	2302      	movs	r3, #2
 80097b0:	e027      	b.n	8009802 <HAL_UARTEx_DisableFifoMode+0x66>
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	2201      	movs	r2, #1
 80097b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	2224      	movs	r2, #36	; 0x24
 80097be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	681a      	ldr	r2, [r3, #0]
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	f022 0201 	bic.w	r2, r2, #1
 80097d8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80097e0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	2200      	movs	r2, #0
 80097e6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	68fa      	ldr	r2, [r7, #12]
 80097ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2220      	movs	r2, #32
 80097f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2200      	movs	r2, #0
 80097fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009800:	2300      	movs	r3, #0
}
 8009802:	4618      	mov	r0, r3
 8009804:	3714      	adds	r7, #20
 8009806:	46bd      	mov	sp, r7
 8009808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980c:	4770      	bx	lr

0800980e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800980e:	b580      	push	{r7, lr}
 8009810:	b084      	sub	sp, #16
 8009812:	af00      	add	r7, sp, #0
 8009814:	6078      	str	r0, [r7, #4]
 8009816:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800981e:	2b01      	cmp	r3, #1
 8009820:	d101      	bne.n	8009826 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009822:	2302      	movs	r3, #2
 8009824:	e02d      	b.n	8009882 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	2201      	movs	r2, #1
 800982a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	2224      	movs	r2, #36	; 0x24
 8009832:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	681a      	ldr	r2, [r3, #0]
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	f022 0201 	bic.w	r2, r2, #1
 800984c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	689b      	ldr	r3, [r3, #8]
 8009854:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	683a      	ldr	r2, [r7, #0]
 800985e:	430a      	orrs	r2, r1
 8009860:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009862:	6878      	ldr	r0, [r7, #4]
 8009864:	f000 f850 	bl	8009908 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	68fa      	ldr	r2, [r7, #12]
 800986e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	2220      	movs	r2, #32
 8009874:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	2200      	movs	r2, #0
 800987c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009880:	2300      	movs	r3, #0
}
 8009882:	4618      	mov	r0, r3
 8009884:	3710      	adds	r7, #16
 8009886:	46bd      	mov	sp, r7
 8009888:	bd80      	pop	{r7, pc}

0800988a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800988a:	b580      	push	{r7, lr}
 800988c:	b084      	sub	sp, #16
 800988e:	af00      	add	r7, sp, #0
 8009890:	6078      	str	r0, [r7, #4]
 8009892:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800989a:	2b01      	cmp	r3, #1
 800989c:	d101      	bne.n	80098a2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800989e:	2302      	movs	r3, #2
 80098a0:	e02d      	b.n	80098fe <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	2201      	movs	r2, #1
 80098a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	2224      	movs	r2, #36	; 0x24
 80098ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	681a      	ldr	r2, [r3, #0]
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	f022 0201 	bic.w	r2, r2, #1
 80098c8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	689b      	ldr	r3, [r3, #8]
 80098d0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	683a      	ldr	r2, [r7, #0]
 80098da:	430a      	orrs	r2, r1
 80098dc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80098de:	6878      	ldr	r0, [r7, #4]
 80098e0:	f000 f812 	bl	8009908 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	68fa      	ldr	r2, [r7, #12]
 80098ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	2220      	movs	r2, #32
 80098f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2200      	movs	r2, #0
 80098f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80098fc:	2300      	movs	r3, #0
}
 80098fe:	4618      	mov	r0, r3
 8009900:	3710      	adds	r7, #16
 8009902:	46bd      	mov	sp, r7
 8009904:	bd80      	pop	{r7, pc}
	...

08009908 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009908:	b480      	push	{r7}
 800990a:	b085      	sub	sp, #20
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009914:	2b00      	cmp	r3, #0
 8009916:	d108      	bne.n	800992a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	2201      	movs	r2, #1
 800991c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	2201      	movs	r2, #1
 8009924:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009928:	e031      	b.n	800998e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800992a:	2308      	movs	r3, #8
 800992c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800992e:	2308      	movs	r3, #8
 8009930:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	689b      	ldr	r3, [r3, #8]
 8009938:	0e5b      	lsrs	r3, r3, #25
 800993a:	b2db      	uxtb	r3, r3
 800993c:	f003 0307 	and.w	r3, r3, #7
 8009940:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	689b      	ldr	r3, [r3, #8]
 8009948:	0f5b      	lsrs	r3, r3, #29
 800994a:	b2db      	uxtb	r3, r3
 800994c:	f003 0307 	and.w	r3, r3, #7
 8009950:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009952:	7bbb      	ldrb	r3, [r7, #14]
 8009954:	7b3a      	ldrb	r2, [r7, #12]
 8009956:	4911      	ldr	r1, [pc, #68]	; (800999c <UARTEx_SetNbDataToProcess+0x94>)
 8009958:	5c8a      	ldrb	r2, [r1, r2]
 800995a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800995e:	7b3a      	ldrb	r2, [r7, #12]
 8009960:	490f      	ldr	r1, [pc, #60]	; (80099a0 <UARTEx_SetNbDataToProcess+0x98>)
 8009962:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009964:	fb93 f3f2 	sdiv	r3, r3, r2
 8009968:	b29a      	uxth	r2, r3
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009970:	7bfb      	ldrb	r3, [r7, #15]
 8009972:	7b7a      	ldrb	r2, [r7, #13]
 8009974:	4909      	ldr	r1, [pc, #36]	; (800999c <UARTEx_SetNbDataToProcess+0x94>)
 8009976:	5c8a      	ldrb	r2, [r1, r2]
 8009978:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800997c:	7b7a      	ldrb	r2, [r7, #13]
 800997e:	4908      	ldr	r1, [pc, #32]	; (80099a0 <UARTEx_SetNbDataToProcess+0x98>)
 8009980:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009982:	fb93 f3f2 	sdiv	r3, r3, r2
 8009986:	b29a      	uxth	r2, r3
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800998e:	bf00      	nop
 8009990:	3714      	adds	r7, #20
 8009992:	46bd      	mov	sp, r7
 8009994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009998:	4770      	bx	lr
 800999a:	bf00      	nop
 800999c:	0800c9f8 	.word	0x0800c9f8
 80099a0:	0800ca00 	.word	0x0800ca00

080099a4 <atoi>:
 80099a4:	220a      	movs	r2, #10
 80099a6:	2100      	movs	r1, #0
 80099a8:	f000 b882 	b.w	8009ab0 <strtol>

080099ac <_strtol_l.constprop.0>:
 80099ac:	2b01      	cmp	r3, #1
 80099ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099b2:	d001      	beq.n	80099b8 <_strtol_l.constprop.0+0xc>
 80099b4:	2b24      	cmp	r3, #36	; 0x24
 80099b6:	d906      	bls.n	80099c6 <_strtol_l.constprop.0+0x1a>
 80099b8:	f000 ff04 	bl	800a7c4 <__errno>
 80099bc:	2316      	movs	r3, #22
 80099be:	6003      	str	r3, [r0, #0]
 80099c0:	2000      	movs	r0, #0
 80099c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099c6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009aac <_strtol_l.constprop.0+0x100>
 80099ca:	460d      	mov	r5, r1
 80099cc:	462e      	mov	r6, r5
 80099ce:	f815 4b01 	ldrb.w	r4, [r5], #1
 80099d2:	f81c 7004 	ldrb.w	r7, [ip, r4]
 80099d6:	f017 0708 	ands.w	r7, r7, #8
 80099da:	d1f7      	bne.n	80099cc <_strtol_l.constprop.0+0x20>
 80099dc:	2c2d      	cmp	r4, #45	; 0x2d
 80099de:	d132      	bne.n	8009a46 <_strtol_l.constprop.0+0x9a>
 80099e0:	782c      	ldrb	r4, [r5, #0]
 80099e2:	2701      	movs	r7, #1
 80099e4:	1cb5      	adds	r5, r6, #2
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d05b      	beq.n	8009aa2 <_strtol_l.constprop.0+0xf6>
 80099ea:	2b10      	cmp	r3, #16
 80099ec:	d109      	bne.n	8009a02 <_strtol_l.constprop.0+0x56>
 80099ee:	2c30      	cmp	r4, #48	; 0x30
 80099f0:	d107      	bne.n	8009a02 <_strtol_l.constprop.0+0x56>
 80099f2:	782c      	ldrb	r4, [r5, #0]
 80099f4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80099f8:	2c58      	cmp	r4, #88	; 0x58
 80099fa:	d14d      	bne.n	8009a98 <_strtol_l.constprop.0+0xec>
 80099fc:	786c      	ldrb	r4, [r5, #1]
 80099fe:	2310      	movs	r3, #16
 8009a00:	3502      	adds	r5, #2
 8009a02:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009a06:	f108 38ff 	add.w	r8, r8, #4294967295
 8009a0a:	f04f 0e00 	mov.w	lr, #0
 8009a0e:	fbb8 f9f3 	udiv	r9, r8, r3
 8009a12:	4676      	mov	r6, lr
 8009a14:	fb03 8a19 	mls	sl, r3, r9, r8
 8009a18:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8009a1c:	f1bc 0f09 	cmp.w	ip, #9
 8009a20:	d816      	bhi.n	8009a50 <_strtol_l.constprop.0+0xa4>
 8009a22:	4664      	mov	r4, ip
 8009a24:	42a3      	cmp	r3, r4
 8009a26:	dd24      	ble.n	8009a72 <_strtol_l.constprop.0+0xc6>
 8009a28:	f1be 3fff 	cmp.w	lr, #4294967295
 8009a2c:	d008      	beq.n	8009a40 <_strtol_l.constprop.0+0x94>
 8009a2e:	45b1      	cmp	r9, r6
 8009a30:	d31c      	bcc.n	8009a6c <_strtol_l.constprop.0+0xc0>
 8009a32:	d101      	bne.n	8009a38 <_strtol_l.constprop.0+0x8c>
 8009a34:	45a2      	cmp	sl, r4
 8009a36:	db19      	blt.n	8009a6c <_strtol_l.constprop.0+0xc0>
 8009a38:	fb06 4603 	mla	r6, r6, r3, r4
 8009a3c:	f04f 0e01 	mov.w	lr, #1
 8009a40:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009a44:	e7e8      	b.n	8009a18 <_strtol_l.constprop.0+0x6c>
 8009a46:	2c2b      	cmp	r4, #43	; 0x2b
 8009a48:	bf04      	itt	eq
 8009a4a:	782c      	ldrbeq	r4, [r5, #0]
 8009a4c:	1cb5      	addeq	r5, r6, #2
 8009a4e:	e7ca      	b.n	80099e6 <_strtol_l.constprop.0+0x3a>
 8009a50:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8009a54:	f1bc 0f19 	cmp.w	ip, #25
 8009a58:	d801      	bhi.n	8009a5e <_strtol_l.constprop.0+0xb2>
 8009a5a:	3c37      	subs	r4, #55	; 0x37
 8009a5c:	e7e2      	b.n	8009a24 <_strtol_l.constprop.0+0x78>
 8009a5e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8009a62:	f1bc 0f19 	cmp.w	ip, #25
 8009a66:	d804      	bhi.n	8009a72 <_strtol_l.constprop.0+0xc6>
 8009a68:	3c57      	subs	r4, #87	; 0x57
 8009a6a:	e7db      	b.n	8009a24 <_strtol_l.constprop.0+0x78>
 8009a6c:	f04f 3eff 	mov.w	lr, #4294967295
 8009a70:	e7e6      	b.n	8009a40 <_strtol_l.constprop.0+0x94>
 8009a72:	f1be 3fff 	cmp.w	lr, #4294967295
 8009a76:	d105      	bne.n	8009a84 <_strtol_l.constprop.0+0xd8>
 8009a78:	2322      	movs	r3, #34	; 0x22
 8009a7a:	6003      	str	r3, [r0, #0]
 8009a7c:	4646      	mov	r6, r8
 8009a7e:	b942      	cbnz	r2, 8009a92 <_strtol_l.constprop.0+0xe6>
 8009a80:	4630      	mov	r0, r6
 8009a82:	e79e      	b.n	80099c2 <_strtol_l.constprop.0+0x16>
 8009a84:	b107      	cbz	r7, 8009a88 <_strtol_l.constprop.0+0xdc>
 8009a86:	4276      	negs	r6, r6
 8009a88:	2a00      	cmp	r2, #0
 8009a8a:	d0f9      	beq.n	8009a80 <_strtol_l.constprop.0+0xd4>
 8009a8c:	f1be 0f00 	cmp.w	lr, #0
 8009a90:	d000      	beq.n	8009a94 <_strtol_l.constprop.0+0xe8>
 8009a92:	1e69      	subs	r1, r5, #1
 8009a94:	6011      	str	r1, [r2, #0]
 8009a96:	e7f3      	b.n	8009a80 <_strtol_l.constprop.0+0xd4>
 8009a98:	2430      	movs	r4, #48	; 0x30
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d1b1      	bne.n	8009a02 <_strtol_l.constprop.0+0x56>
 8009a9e:	2308      	movs	r3, #8
 8009aa0:	e7af      	b.n	8009a02 <_strtol_l.constprop.0+0x56>
 8009aa2:	2c30      	cmp	r4, #48	; 0x30
 8009aa4:	d0a5      	beq.n	80099f2 <_strtol_l.constprop.0+0x46>
 8009aa6:	230a      	movs	r3, #10
 8009aa8:	e7ab      	b.n	8009a02 <_strtol_l.constprop.0+0x56>
 8009aaa:	bf00      	nop
 8009aac:	0800ca09 	.word	0x0800ca09

08009ab0 <strtol>:
 8009ab0:	4613      	mov	r3, r2
 8009ab2:	460a      	mov	r2, r1
 8009ab4:	4601      	mov	r1, r0
 8009ab6:	4802      	ldr	r0, [pc, #8]	; (8009ac0 <strtol+0x10>)
 8009ab8:	6800      	ldr	r0, [r0, #0]
 8009aba:	f7ff bf77 	b.w	80099ac <_strtol_l.constprop.0>
 8009abe:	bf00      	nop
 8009ac0:	20000108 	.word	0x20000108

08009ac4 <__cvt>:
 8009ac4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009ac8:	ec55 4b10 	vmov	r4, r5, d0
 8009acc:	2d00      	cmp	r5, #0
 8009ace:	460e      	mov	r6, r1
 8009ad0:	4619      	mov	r1, r3
 8009ad2:	462b      	mov	r3, r5
 8009ad4:	bfbb      	ittet	lt
 8009ad6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009ada:	461d      	movlt	r5, r3
 8009adc:	2300      	movge	r3, #0
 8009ade:	232d      	movlt	r3, #45	; 0x2d
 8009ae0:	700b      	strb	r3, [r1, #0]
 8009ae2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009ae4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009ae8:	4691      	mov	r9, r2
 8009aea:	f023 0820 	bic.w	r8, r3, #32
 8009aee:	bfbc      	itt	lt
 8009af0:	4622      	movlt	r2, r4
 8009af2:	4614      	movlt	r4, r2
 8009af4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009af8:	d005      	beq.n	8009b06 <__cvt+0x42>
 8009afa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009afe:	d100      	bne.n	8009b02 <__cvt+0x3e>
 8009b00:	3601      	adds	r6, #1
 8009b02:	2102      	movs	r1, #2
 8009b04:	e000      	b.n	8009b08 <__cvt+0x44>
 8009b06:	2103      	movs	r1, #3
 8009b08:	ab03      	add	r3, sp, #12
 8009b0a:	9301      	str	r3, [sp, #4]
 8009b0c:	ab02      	add	r3, sp, #8
 8009b0e:	9300      	str	r3, [sp, #0]
 8009b10:	ec45 4b10 	vmov	d0, r4, r5
 8009b14:	4653      	mov	r3, sl
 8009b16:	4632      	mov	r2, r6
 8009b18:	f000 ff26 	bl	800a968 <_dtoa_r>
 8009b1c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009b20:	4607      	mov	r7, r0
 8009b22:	d102      	bne.n	8009b2a <__cvt+0x66>
 8009b24:	f019 0f01 	tst.w	r9, #1
 8009b28:	d022      	beq.n	8009b70 <__cvt+0xac>
 8009b2a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009b2e:	eb07 0906 	add.w	r9, r7, r6
 8009b32:	d110      	bne.n	8009b56 <__cvt+0x92>
 8009b34:	783b      	ldrb	r3, [r7, #0]
 8009b36:	2b30      	cmp	r3, #48	; 0x30
 8009b38:	d10a      	bne.n	8009b50 <__cvt+0x8c>
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	4620      	mov	r0, r4
 8009b40:	4629      	mov	r1, r5
 8009b42:	f7f6 fff9 	bl	8000b38 <__aeabi_dcmpeq>
 8009b46:	b918      	cbnz	r0, 8009b50 <__cvt+0x8c>
 8009b48:	f1c6 0601 	rsb	r6, r6, #1
 8009b4c:	f8ca 6000 	str.w	r6, [sl]
 8009b50:	f8da 3000 	ldr.w	r3, [sl]
 8009b54:	4499      	add	r9, r3
 8009b56:	2200      	movs	r2, #0
 8009b58:	2300      	movs	r3, #0
 8009b5a:	4620      	mov	r0, r4
 8009b5c:	4629      	mov	r1, r5
 8009b5e:	f7f6 ffeb 	bl	8000b38 <__aeabi_dcmpeq>
 8009b62:	b108      	cbz	r0, 8009b68 <__cvt+0xa4>
 8009b64:	f8cd 900c 	str.w	r9, [sp, #12]
 8009b68:	2230      	movs	r2, #48	; 0x30
 8009b6a:	9b03      	ldr	r3, [sp, #12]
 8009b6c:	454b      	cmp	r3, r9
 8009b6e:	d307      	bcc.n	8009b80 <__cvt+0xbc>
 8009b70:	9b03      	ldr	r3, [sp, #12]
 8009b72:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009b74:	1bdb      	subs	r3, r3, r7
 8009b76:	4638      	mov	r0, r7
 8009b78:	6013      	str	r3, [r2, #0]
 8009b7a:	b004      	add	sp, #16
 8009b7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b80:	1c59      	adds	r1, r3, #1
 8009b82:	9103      	str	r1, [sp, #12]
 8009b84:	701a      	strb	r2, [r3, #0]
 8009b86:	e7f0      	b.n	8009b6a <__cvt+0xa6>

08009b88 <__exponent>:
 8009b88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009b8a:	4603      	mov	r3, r0
 8009b8c:	2900      	cmp	r1, #0
 8009b8e:	bfb8      	it	lt
 8009b90:	4249      	neglt	r1, r1
 8009b92:	f803 2b02 	strb.w	r2, [r3], #2
 8009b96:	bfb4      	ite	lt
 8009b98:	222d      	movlt	r2, #45	; 0x2d
 8009b9a:	222b      	movge	r2, #43	; 0x2b
 8009b9c:	2909      	cmp	r1, #9
 8009b9e:	7042      	strb	r2, [r0, #1]
 8009ba0:	dd2a      	ble.n	8009bf8 <__exponent+0x70>
 8009ba2:	f10d 0207 	add.w	r2, sp, #7
 8009ba6:	4617      	mov	r7, r2
 8009ba8:	260a      	movs	r6, #10
 8009baa:	4694      	mov	ip, r2
 8009bac:	fb91 f5f6 	sdiv	r5, r1, r6
 8009bb0:	fb06 1415 	mls	r4, r6, r5, r1
 8009bb4:	3430      	adds	r4, #48	; 0x30
 8009bb6:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8009bba:	460c      	mov	r4, r1
 8009bbc:	2c63      	cmp	r4, #99	; 0x63
 8009bbe:	f102 32ff 	add.w	r2, r2, #4294967295
 8009bc2:	4629      	mov	r1, r5
 8009bc4:	dcf1      	bgt.n	8009baa <__exponent+0x22>
 8009bc6:	3130      	adds	r1, #48	; 0x30
 8009bc8:	f1ac 0402 	sub.w	r4, ip, #2
 8009bcc:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009bd0:	1c41      	adds	r1, r0, #1
 8009bd2:	4622      	mov	r2, r4
 8009bd4:	42ba      	cmp	r2, r7
 8009bd6:	d30a      	bcc.n	8009bee <__exponent+0x66>
 8009bd8:	f10d 0209 	add.w	r2, sp, #9
 8009bdc:	eba2 020c 	sub.w	r2, r2, ip
 8009be0:	42bc      	cmp	r4, r7
 8009be2:	bf88      	it	hi
 8009be4:	2200      	movhi	r2, #0
 8009be6:	4413      	add	r3, r2
 8009be8:	1a18      	subs	r0, r3, r0
 8009bea:	b003      	add	sp, #12
 8009bec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009bee:	f812 5b01 	ldrb.w	r5, [r2], #1
 8009bf2:	f801 5f01 	strb.w	r5, [r1, #1]!
 8009bf6:	e7ed      	b.n	8009bd4 <__exponent+0x4c>
 8009bf8:	2330      	movs	r3, #48	; 0x30
 8009bfa:	3130      	adds	r1, #48	; 0x30
 8009bfc:	7083      	strb	r3, [r0, #2]
 8009bfe:	70c1      	strb	r1, [r0, #3]
 8009c00:	1d03      	adds	r3, r0, #4
 8009c02:	e7f1      	b.n	8009be8 <__exponent+0x60>

08009c04 <_printf_float>:
 8009c04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c08:	ed2d 8b02 	vpush	{d8}
 8009c0c:	b08d      	sub	sp, #52	; 0x34
 8009c0e:	460c      	mov	r4, r1
 8009c10:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009c14:	4616      	mov	r6, r2
 8009c16:	461f      	mov	r7, r3
 8009c18:	4605      	mov	r5, r0
 8009c1a:	f000 fd89 	bl	800a730 <_localeconv_r>
 8009c1e:	f8d0 a000 	ldr.w	sl, [r0]
 8009c22:	4650      	mov	r0, sl
 8009c24:	f7f6 fb5c 	bl	80002e0 <strlen>
 8009c28:	2300      	movs	r3, #0
 8009c2a:	930a      	str	r3, [sp, #40]	; 0x28
 8009c2c:	6823      	ldr	r3, [r4, #0]
 8009c2e:	9305      	str	r3, [sp, #20]
 8009c30:	f8d8 3000 	ldr.w	r3, [r8]
 8009c34:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009c38:	3307      	adds	r3, #7
 8009c3a:	f023 0307 	bic.w	r3, r3, #7
 8009c3e:	f103 0208 	add.w	r2, r3, #8
 8009c42:	f8c8 2000 	str.w	r2, [r8]
 8009c46:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009c4a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009c4e:	9307      	str	r3, [sp, #28]
 8009c50:	f8cd 8018 	str.w	r8, [sp, #24]
 8009c54:	ee08 0a10 	vmov	s16, r0
 8009c58:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8009c5c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009c60:	4b9e      	ldr	r3, [pc, #632]	; (8009edc <_printf_float+0x2d8>)
 8009c62:	f04f 32ff 	mov.w	r2, #4294967295
 8009c66:	f7f6 ff99 	bl	8000b9c <__aeabi_dcmpun>
 8009c6a:	bb88      	cbnz	r0, 8009cd0 <_printf_float+0xcc>
 8009c6c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009c70:	4b9a      	ldr	r3, [pc, #616]	; (8009edc <_printf_float+0x2d8>)
 8009c72:	f04f 32ff 	mov.w	r2, #4294967295
 8009c76:	f7f6 ff73 	bl	8000b60 <__aeabi_dcmple>
 8009c7a:	bb48      	cbnz	r0, 8009cd0 <_printf_float+0xcc>
 8009c7c:	2200      	movs	r2, #0
 8009c7e:	2300      	movs	r3, #0
 8009c80:	4640      	mov	r0, r8
 8009c82:	4649      	mov	r1, r9
 8009c84:	f7f6 ff62 	bl	8000b4c <__aeabi_dcmplt>
 8009c88:	b110      	cbz	r0, 8009c90 <_printf_float+0x8c>
 8009c8a:	232d      	movs	r3, #45	; 0x2d
 8009c8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c90:	4a93      	ldr	r2, [pc, #588]	; (8009ee0 <_printf_float+0x2dc>)
 8009c92:	4b94      	ldr	r3, [pc, #592]	; (8009ee4 <_printf_float+0x2e0>)
 8009c94:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009c98:	bf94      	ite	ls
 8009c9a:	4690      	movls	r8, r2
 8009c9c:	4698      	movhi	r8, r3
 8009c9e:	2303      	movs	r3, #3
 8009ca0:	6123      	str	r3, [r4, #16]
 8009ca2:	9b05      	ldr	r3, [sp, #20]
 8009ca4:	f023 0304 	bic.w	r3, r3, #4
 8009ca8:	6023      	str	r3, [r4, #0]
 8009caa:	f04f 0900 	mov.w	r9, #0
 8009cae:	9700      	str	r7, [sp, #0]
 8009cb0:	4633      	mov	r3, r6
 8009cb2:	aa0b      	add	r2, sp, #44	; 0x2c
 8009cb4:	4621      	mov	r1, r4
 8009cb6:	4628      	mov	r0, r5
 8009cb8:	f000 f9da 	bl	800a070 <_printf_common>
 8009cbc:	3001      	adds	r0, #1
 8009cbe:	f040 8090 	bne.w	8009de2 <_printf_float+0x1de>
 8009cc2:	f04f 30ff 	mov.w	r0, #4294967295
 8009cc6:	b00d      	add	sp, #52	; 0x34
 8009cc8:	ecbd 8b02 	vpop	{d8}
 8009ccc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cd0:	4642      	mov	r2, r8
 8009cd2:	464b      	mov	r3, r9
 8009cd4:	4640      	mov	r0, r8
 8009cd6:	4649      	mov	r1, r9
 8009cd8:	f7f6 ff60 	bl	8000b9c <__aeabi_dcmpun>
 8009cdc:	b140      	cbz	r0, 8009cf0 <_printf_float+0xec>
 8009cde:	464b      	mov	r3, r9
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	bfbc      	itt	lt
 8009ce4:	232d      	movlt	r3, #45	; 0x2d
 8009ce6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009cea:	4a7f      	ldr	r2, [pc, #508]	; (8009ee8 <_printf_float+0x2e4>)
 8009cec:	4b7f      	ldr	r3, [pc, #508]	; (8009eec <_printf_float+0x2e8>)
 8009cee:	e7d1      	b.n	8009c94 <_printf_float+0x90>
 8009cf0:	6863      	ldr	r3, [r4, #4]
 8009cf2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009cf6:	9206      	str	r2, [sp, #24]
 8009cf8:	1c5a      	adds	r2, r3, #1
 8009cfa:	d13f      	bne.n	8009d7c <_printf_float+0x178>
 8009cfc:	2306      	movs	r3, #6
 8009cfe:	6063      	str	r3, [r4, #4]
 8009d00:	9b05      	ldr	r3, [sp, #20]
 8009d02:	6861      	ldr	r1, [r4, #4]
 8009d04:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009d08:	2300      	movs	r3, #0
 8009d0a:	9303      	str	r3, [sp, #12]
 8009d0c:	ab0a      	add	r3, sp, #40	; 0x28
 8009d0e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009d12:	ab09      	add	r3, sp, #36	; 0x24
 8009d14:	ec49 8b10 	vmov	d0, r8, r9
 8009d18:	9300      	str	r3, [sp, #0]
 8009d1a:	6022      	str	r2, [r4, #0]
 8009d1c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009d20:	4628      	mov	r0, r5
 8009d22:	f7ff fecf 	bl	8009ac4 <__cvt>
 8009d26:	9b06      	ldr	r3, [sp, #24]
 8009d28:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009d2a:	2b47      	cmp	r3, #71	; 0x47
 8009d2c:	4680      	mov	r8, r0
 8009d2e:	d108      	bne.n	8009d42 <_printf_float+0x13e>
 8009d30:	1cc8      	adds	r0, r1, #3
 8009d32:	db02      	blt.n	8009d3a <_printf_float+0x136>
 8009d34:	6863      	ldr	r3, [r4, #4]
 8009d36:	4299      	cmp	r1, r3
 8009d38:	dd41      	ble.n	8009dbe <_printf_float+0x1ba>
 8009d3a:	f1ab 0302 	sub.w	r3, fp, #2
 8009d3e:	fa5f fb83 	uxtb.w	fp, r3
 8009d42:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009d46:	d820      	bhi.n	8009d8a <_printf_float+0x186>
 8009d48:	3901      	subs	r1, #1
 8009d4a:	465a      	mov	r2, fp
 8009d4c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009d50:	9109      	str	r1, [sp, #36]	; 0x24
 8009d52:	f7ff ff19 	bl	8009b88 <__exponent>
 8009d56:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009d58:	1813      	adds	r3, r2, r0
 8009d5a:	2a01      	cmp	r2, #1
 8009d5c:	4681      	mov	r9, r0
 8009d5e:	6123      	str	r3, [r4, #16]
 8009d60:	dc02      	bgt.n	8009d68 <_printf_float+0x164>
 8009d62:	6822      	ldr	r2, [r4, #0]
 8009d64:	07d2      	lsls	r2, r2, #31
 8009d66:	d501      	bpl.n	8009d6c <_printf_float+0x168>
 8009d68:	3301      	adds	r3, #1
 8009d6a:	6123      	str	r3, [r4, #16]
 8009d6c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d09c      	beq.n	8009cae <_printf_float+0xaa>
 8009d74:	232d      	movs	r3, #45	; 0x2d
 8009d76:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d7a:	e798      	b.n	8009cae <_printf_float+0xaa>
 8009d7c:	9a06      	ldr	r2, [sp, #24]
 8009d7e:	2a47      	cmp	r2, #71	; 0x47
 8009d80:	d1be      	bne.n	8009d00 <_printf_float+0xfc>
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d1bc      	bne.n	8009d00 <_printf_float+0xfc>
 8009d86:	2301      	movs	r3, #1
 8009d88:	e7b9      	b.n	8009cfe <_printf_float+0xfa>
 8009d8a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009d8e:	d118      	bne.n	8009dc2 <_printf_float+0x1be>
 8009d90:	2900      	cmp	r1, #0
 8009d92:	6863      	ldr	r3, [r4, #4]
 8009d94:	dd0b      	ble.n	8009dae <_printf_float+0x1aa>
 8009d96:	6121      	str	r1, [r4, #16]
 8009d98:	b913      	cbnz	r3, 8009da0 <_printf_float+0x19c>
 8009d9a:	6822      	ldr	r2, [r4, #0]
 8009d9c:	07d0      	lsls	r0, r2, #31
 8009d9e:	d502      	bpl.n	8009da6 <_printf_float+0x1a2>
 8009da0:	3301      	adds	r3, #1
 8009da2:	440b      	add	r3, r1
 8009da4:	6123      	str	r3, [r4, #16]
 8009da6:	65a1      	str	r1, [r4, #88]	; 0x58
 8009da8:	f04f 0900 	mov.w	r9, #0
 8009dac:	e7de      	b.n	8009d6c <_printf_float+0x168>
 8009dae:	b913      	cbnz	r3, 8009db6 <_printf_float+0x1b2>
 8009db0:	6822      	ldr	r2, [r4, #0]
 8009db2:	07d2      	lsls	r2, r2, #31
 8009db4:	d501      	bpl.n	8009dba <_printf_float+0x1b6>
 8009db6:	3302      	adds	r3, #2
 8009db8:	e7f4      	b.n	8009da4 <_printf_float+0x1a0>
 8009dba:	2301      	movs	r3, #1
 8009dbc:	e7f2      	b.n	8009da4 <_printf_float+0x1a0>
 8009dbe:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009dc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009dc4:	4299      	cmp	r1, r3
 8009dc6:	db05      	blt.n	8009dd4 <_printf_float+0x1d0>
 8009dc8:	6823      	ldr	r3, [r4, #0]
 8009dca:	6121      	str	r1, [r4, #16]
 8009dcc:	07d8      	lsls	r0, r3, #31
 8009dce:	d5ea      	bpl.n	8009da6 <_printf_float+0x1a2>
 8009dd0:	1c4b      	adds	r3, r1, #1
 8009dd2:	e7e7      	b.n	8009da4 <_printf_float+0x1a0>
 8009dd4:	2900      	cmp	r1, #0
 8009dd6:	bfd4      	ite	le
 8009dd8:	f1c1 0202 	rsble	r2, r1, #2
 8009ddc:	2201      	movgt	r2, #1
 8009dde:	4413      	add	r3, r2
 8009de0:	e7e0      	b.n	8009da4 <_printf_float+0x1a0>
 8009de2:	6823      	ldr	r3, [r4, #0]
 8009de4:	055a      	lsls	r2, r3, #21
 8009de6:	d407      	bmi.n	8009df8 <_printf_float+0x1f4>
 8009de8:	6923      	ldr	r3, [r4, #16]
 8009dea:	4642      	mov	r2, r8
 8009dec:	4631      	mov	r1, r6
 8009dee:	4628      	mov	r0, r5
 8009df0:	47b8      	blx	r7
 8009df2:	3001      	adds	r0, #1
 8009df4:	d12c      	bne.n	8009e50 <_printf_float+0x24c>
 8009df6:	e764      	b.n	8009cc2 <_printf_float+0xbe>
 8009df8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009dfc:	f240 80e0 	bls.w	8009fc0 <_printf_float+0x3bc>
 8009e00:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009e04:	2200      	movs	r2, #0
 8009e06:	2300      	movs	r3, #0
 8009e08:	f7f6 fe96 	bl	8000b38 <__aeabi_dcmpeq>
 8009e0c:	2800      	cmp	r0, #0
 8009e0e:	d034      	beq.n	8009e7a <_printf_float+0x276>
 8009e10:	4a37      	ldr	r2, [pc, #220]	; (8009ef0 <_printf_float+0x2ec>)
 8009e12:	2301      	movs	r3, #1
 8009e14:	4631      	mov	r1, r6
 8009e16:	4628      	mov	r0, r5
 8009e18:	47b8      	blx	r7
 8009e1a:	3001      	adds	r0, #1
 8009e1c:	f43f af51 	beq.w	8009cc2 <_printf_float+0xbe>
 8009e20:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009e24:	429a      	cmp	r2, r3
 8009e26:	db02      	blt.n	8009e2e <_printf_float+0x22a>
 8009e28:	6823      	ldr	r3, [r4, #0]
 8009e2a:	07d8      	lsls	r0, r3, #31
 8009e2c:	d510      	bpl.n	8009e50 <_printf_float+0x24c>
 8009e2e:	ee18 3a10 	vmov	r3, s16
 8009e32:	4652      	mov	r2, sl
 8009e34:	4631      	mov	r1, r6
 8009e36:	4628      	mov	r0, r5
 8009e38:	47b8      	blx	r7
 8009e3a:	3001      	adds	r0, #1
 8009e3c:	f43f af41 	beq.w	8009cc2 <_printf_float+0xbe>
 8009e40:	f04f 0800 	mov.w	r8, #0
 8009e44:	f104 091a 	add.w	r9, r4, #26
 8009e48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e4a:	3b01      	subs	r3, #1
 8009e4c:	4543      	cmp	r3, r8
 8009e4e:	dc09      	bgt.n	8009e64 <_printf_float+0x260>
 8009e50:	6823      	ldr	r3, [r4, #0]
 8009e52:	079b      	lsls	r3, r3, #30
 8009e54:	f100 8107 	bmi.w	800a066 <_printf_float+0x462>
 8009e58:	68e0      	ldr	r0, [r4, #12]
 8009e5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e5c:	4298      	cmp	r0, r3
 8009e5e:	bfb8      	it	lt
 8009e60:	4618      	movlt	r0, r3
 8009e62:	e730      	b.n	8009cc6 <_printf_float+0xc2>
 8009e64:	2301      	movs	r3, #1
 8009e66:	464a      	mov	r2, r9
 8009e68:	4631      	mov	r1, r6
 8009e6a:	4628      	mov	r0, r5
 8009e6c:	47b8      	blx	r7
 8009e6e:	3001      	adds	r0, #1
 8009e70:	f43f af27 	beq.w	8009cc2 <_printf_float+0xbe>
 8009e74:	f108 0801 	add.w	r8, r8, #1
 8009e78:	e7e6      	b.n	8009e48 <_printf_float+0x244>
 8009e7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	dc39      	bgt.n	8009ef4 <_printf_float+0x2f0>
 8009e80:	4a1b      	ldr	r2, [pc, #108]	; (8009ef0 <_printf_float+0x2ec>)
 8009e82:	2301      	movs	r3, #1
 8009e84:	4631      	mov	r1, r6
 8009e86:	4628      	mov	r0, r5
 8009e88:	47b8      	blx	r7
 8009e8a:	3001      	adds	r0, #1
 8009e8c:	f43f af19 	beq.w	8009cc2 <_printf_float+0xbe>
 8009e90:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009e94:	4313      	orrs	r3, r2
 8009e96:	d102      	bne.n	8009e9e <_printf_float+0x29a>
 8009e98:	6823      	ldr	r3, [r4, #0]
 8009e9a:	07d9      	lsls	r1, r3, #31
 8009e9c:	d5d8      	bpl.n	8009e50 <_printf_float+0x24c>
 8009e9e:	ee18 3a10 	vmov	r3, s16
 8009ea2:	4652      	mov	r2, sl
 8009ea4:	4631      	mov	r1, r6
 8009ea6:	4628      	mov	r0, r5
 8009ea8:	47b8      	blx	r7
 8009eaa:	3001      	adds	r0, #1
 8009eac:	f43f af09 	beq.w	8009cc2 <_printf_float+0xbe>
 8009eb0:	f04f 0900 	mov.w	r9, #0
 8009eb4:	f104 0a1a 	add.w	sl, r4, #26
 8009eb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009eba:	425b      	negs	r3, r3
 8009ebc:	454b      	cmp	r3, r9
 8009ebe:	dc01      	bgt.n	8009ec4 <_printf_float+0x2c0>
 8009ec0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ec2:	e792      	b.n	8009dea <_printf_float+0x1e6>
 8009ec4:	2301      	movs	r3, #1
 8009ec6:	4652      	mov	r2, sl
 8009ec8:	4631      	mov	r1, r6
 8009eca:	4628      	mov	r0, r5
 8009ecc:	47b8      	blx	r7
 8009ece:	3001      	adds	r0, #1
 8009ed0:	f43f aef7 	beq.w	8009cc2 <_printf_float+0xbe>
 8009ed4:	f109 0901 	add.w	r9, r9, #1
 8009ed8:	e7ee      	b.n	8009eb8 <_printf_float+0x2b4>
 8009eda:	bf00      	nop
 8009edc:	7fefffff 	.word	0x7fefffff
 8009ee0:	0800cb09 	.word	0x0800cb09
 8009ee4:	0800cb0d 	.word	0x0800cb0d
 8009ee8:	0800cb11 	.word	0x0800cb11
 8009eec:	0800cb15 	.word	0x0800cb15
 8009ef0:	0800cb19 	.word	0x0800cb19
 8009ef4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009ef6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009ef8:	429a      	cmp	r2, r3
 8009efa:	bfa8      	it	ge
 8009efc:	461a      	movge	r2, r3
 8009efe:	2a00      	cmp	r2, #0
 8009f00:	4691      	mov	r9, r2
 8009f02:	dc37      	bgt.n	8009f74 <_printf_float+0x370>
 8009f04:	f04f 0b00 	mov.w	fp, #0
 8009f08:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009f0c:	f104 021a 	add.w	r2, r4, #26
 8009f10:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009f12:	9305      	str	r3, [sp, #20]
 8009f14:	eba3 0309 	sub.w	r3, r3, r9
 8009f18:	455b      	cmp	r3, fp
 8009f1a:	dc33      	bgt.n	8009f84 <_printf_float+0x380>
 8009f1c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009f20:	429a      	cmp	r2, r3
 8009f22:	db3b      	blt.n	8009f9c <_printf_float+0x398>
 8009f24:	6823      	ldr	r3, [r4, #0]
 8009f26:	07da      	lsls	r2, r3, #31
 8009f28:	d438      	bmi.n	8009f9c <_printf_float+0x398>
 8009f2a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009f2e:	eba2 0903 	sub.w	r9, r2, r3
 8009f32:	9b05      	ldr	r3, [sp, #20]
 8009f34:	1ad2      	subs	r2, r2, r3
 8009f36:	4591      	cmp	r9, r2
 8009f38:	bfa8      	it	ge
 8009f3a:	4691      	movge	r9, r2
 8009f3c:	f1b9 0f00 	cmp.w	r9, #0
 8009f40:	dc35      	bgt.n	8009fae <_printf_float+0x3aa>
 8009f42:	f04f 0800 	mov.w	r8, #0
 8009f46:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009f4a:	f104 0a1a 	add.w	sl, r4, #26
 8009f4e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009f52:	1a9b      	subs	r3, r3, r2
 8009f54:	eba3 0309 	sub.w	r3, r3, r9
 8009f58:	4543      	cmp	r3, r8
 8009f5a:	f77f af79 	ble.w	8009e50 <_printf_float+0x24c>
 8009f5e:	2301      	movs	r3, #1
 8009f60:	4652      	mov	r2, sl
 8009f62:	4631      	mov	r1, r6
 8009f64:	4628      	mov	r0, r5
 8009f66:	47b8      	blx	r7
 8009f68:	3001      	adds	r0, #1
 8009f6a:	f43f aeaa 	beq.w	8009cc2 <_printf_float+0xbe>
 8009f6e:	f108 0801 	add.w	r8, r8, #1
 8009f72:	e7ec      	b.n	8009f4e <_printf_float+0x34a>
 8009f74:	4613      	mov	r3, r2
 8009f76:	4631      	mov	r1, r6
 8009f78:	4642      	mov	r2, r8
 8009f7a:	4628      	mov	r0, r5
 8009f7c:	47b8      	blx	r7
 8009f7e:	3001      	adds	r0, #1
 8009f80:	d1c0      	bne.n	8009f04 <_printf_float+0x300>
 8009f82:	e69e      	b.n	8009cc2 <_printf_float+0xbe>
 8009f84:	2301      	movs	r3, #1
 8009f86:	4631      	mov	r1, r6
 8009f88:	4628      	mov	r0, r5
 8009f8a:	9205      	str	r2, [sp, #20]
 8009f8c:	47b8      	blx	r7
 8009f8e:	3001      	adds	r0, #1
 8009f90:	f43f ae97 	beq.w	8009cc2 <_printf_float+0xbe>
 8009f94:	9a05      	ldr	r2, [sp, #20]
 8009f96:	f10b 0b01 	add.w	fp, fp, #1
 8009f9a:	e7b9      	b.n	8009f10 <_printf_float+0x30c>
 8009f9c:	ee18 3a10 	vmov	r3, s16
 8009fa0:	4652      	mov	r2, sl
 8009fa2:	4631      	mov	r1, r6
 8009fa4:	4628      	mov	r0, r5
 8009fa6:	47b8      	blx	r7
 8009fa8:	3001      	adds	r0, #1
 8009faa:	d1be      	bne.n	8009f2a <_printf_float+0x326>
 8009fac:	e689      	b.n	8009cc2 <_printf_float+0xbe>
 8009fae:	9a05      	ldr	r2, [sp, #20]
 8009fb0:	464b      	mov	r3, r9
 8009fb2:	4442      	add	r2, r8
 8009fb4:	4631      	mov	r1, r6
 8009fb6:	4628      	mov	r0, r5
 8009fb8:	47b8      	blx	r7
 8009fba:	3001      	adds	r0, #1
 8009fbc:	d1c1      	bne.n	8009f42 <_printf_float+0x33e>
 8009fbe:	e680      	b.n	8009cc2 <_printf_float+0xbe>
 8009fc0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009fc2:	2a01      	cmp	r2, #1
 8009fc4:	dc01      	bgt.n	8009fca <_printf_float+0x3c6>
 8009fc6:	07db      	lsls	r3, r3, #31
 8009fc8:	d53a      	bpl.n	800a040 <_printf_float+0x43c>
 8009fca:	2301      	movs	r3, #1
 8009fcc:	4642      	mov	r2, r8
 8009fce:	4631      	mov	r1, r6
 8009fd0:	4628      	mov	r0, r5
 8009fd2:	47b8      	blx	r7
 8009fd4:	3001      	adds	r0, #1
 8009fd6:	f43f ae74 	beq.w	8009cc2 <_printf_float+0xbe>
 8009fda:	ee18 3a10 	vmov	r3, s16
 8009fde:	4652      	mov	r2, sl
 8009fe0:	4631      	mov	r1, r6
 8009fe2:	4628      	mov	r0, r5
 8009fe4:	47b8      	blx	r7
 8009fe6:	3001      	adds	r0, #1
 8009fe8:	f43f ae6b 	beq.w	8009cc2 <_printf_float+0xbe>
 8009fec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009ff0:	2200      	movs	r2, #0
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8009ff8:	f7f6 fd9e 	bl	8000b38 <__aeabi_dcmpeq>
 8009ffc:	b9d8      	cbnz	r0, 800a036 <_printf_float+0x432>
 8009ffe:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a002:	f108 0201 	add.w	r2, r8, #1
 800a006:	4631      	mov	r1, r6
 800a008:	4628      	mov	r0, r5
 800a00a:	47b8      	blx	r7
 800a00c:	3001      	adds	r0, #1
 800a00e:	d10e      	bne.n	800a02e <_printf_float+0x42a>
 800a010:	e657      	b.n	8009cc2 <_printf_float+0xbe>
 800a012:	2301      	movs	r3, #1
 800a014:	4652      	mov	r2, sl
 800a016:	4631      	mov	r1, r6
 800a018:	4628      	mov	r0, r5
 800a01a:	47b8      	blx	r7
 800a01c:	3001      	adds	r0, #1
 800a01e:	f43f ae50 	beq.w	8009cc2 <_printf_float+0xbe>
 800a022:	f108 0801 	add.w	r8, r8, #1
 800a026:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a028:	3b01      	subs	r3, #1
 800a02a:	4543      	cmp	r3, r8
 800a02c:	dcf1      	bgt.n	800a012 <_printf_float+0x40e>
 800a02e:	464b      	mov	r3, r9
 800a030:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a034:	e6da      	b.n	8009dec <_printf_float+0x1e8>
 800a036:	f04f 0800 	mov.w	r8, #0
 800a03a:	f104 0a1a 	add.w	sl, r4, #26
 800a03e:	e7f2      	b.n	800a026 <_printf_float+0x422>
 800a040:	2301      	movs	r3, #1
 800a042:	4642      	mov	r2, r8
 800a044:	e7df      	b.n	800a006 <_printf_float+0x402>
 800a046:	2301      	movs	r3, #1
 800a048:	464a      	mov	r2, r9
 800a04a:	4631      	mov	r1, r6
 800a04c:	4628      	mov	r0, r5
 800a04e:	47b8      	blx	r7
 800a050:	3001      	adds	r0, #1
 800a052:	f43f ae36 	beq.w	8009cc2 <_printf_float+0xbe>
 800a056:	f108 0801 	add.w	r8, r8, #1
 800a05a:	68e3      	ldr	r3, [r4, #12]
 800a05c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a05e:	1a5b      	subs	r3, r3, r1
 800a060:	4543      	cmp	r3, r8
 800a062:	dcf0      	bgt.n	800a046 <_printf_float+0x442>
 800a064:	e6f8      	b.n	8009e58 <_printf_float+0x254>
 800a066:	f04f 0800 	mov.w	r8, #0
 800a06a:	f104 0919 	add.w	r9, r4, #25
 800a06e:	e7f4      	b.n	800a05a <_printf_float+0x456>

0800a070 <_printf_common>:
 800a070:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a074:	4616      	mov	r6, r2
 800a076:	4699      	mov	r9, r3
 800a078:	688a      	ldr	r2, [r1, #8]
 800a07a:	690b      	ldr	r3, [r1, #16]
 800a07c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a080:	4293      	cmp	r3, r2
 800a082:	bfb8      	it	lt
 800a084:	4613      	movlt	r3, r2
 800a086:	6033      	str	r3, [r6, #0]
 800a088:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a08c:	4607      	mov	r7, r0
 800a08e:	460c      	mov	r4, r1
 800a090:	b10a      	cbz	r2, 800a096 <_printf_common+0x26>
 800a092:	3301      	adds	r3, #1
 800a094:	6033      	str	r3, [r6, #0]
 800a096:	6823      	ldr	r3, [r4, #0]
 800a098:	0699      	lsls	r1, r3, #26
 800a09a:	bf42      	ittt	mi
 800a09c:	6833      	ldrmi	r3, [r6, #0]
 800a09e:	3302      	addmi	r3, #2
 800a0a0:	6033      	strmi	r3, [r6, #0]
 800a0a2:	6825      	ldr	r5, [r4, #0]
 800a0a4:	f015 0506 	ands.w	r5, r5, #6
 800a0a8:	d106      	bne.n	800a0b8 <_printf_common+0x48>
 800a0aa:	f104 0a19 	add.w	sl, r4, #25
 800a0ae:	68e3      	ldr	r3, [r4, #12]
 800a0b0:	6832      	ldr	r2, [r6, #0]
 800a0b2:	1a9b      	subs	r3, r3, r2
 800a0b4:	42ab      	cmp	r3, r5
 800a0b6:	dc26      	bgt.n	800a106 <_printf_common+0x96>
 800a0b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a0bc:	1e13      	subs	r3, r2, #0
 800a0be:	6822      	ldr	r2, [r4, #0]
 800a0c0:	bf18      	it	ne
 800a0c2:	2301      	movne	r3, #1
 800a0c4:	0692      	lsls	r2, r2, #26
 800a0c6:	d42b      	bmi.n	800a120 <_printf_common+0xb0>
 800a0c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a0cc:	4649      	mov	r1, r9
 800a0ce:	4638      	mov	r0, r7
 800a0d0:	47c0      	blx	r8
 800a0d2:	3001      	adds	r0, #1
 800a0d4:	d01e      	beq.n	800a114 <_printf_common+0xa4>
 800a0d6:	6823      	ldr	r3, [r4, #0]
 800a0d8:	6922      	ldr	r2, [r4, #16]
 800a0da:	f003 0306 	and.w	r3, r3, #6
 800a0de:	2b04      	cmp	r3, #4
 800a0e0:	bf02      	ittt	eq
 800a0e2:	68e5      	ldreq	r5, [r4, #12]
 800a0e4:	6833      	ldreq	r3, [r6, #0]
 800a0e6:	1aed      	subeq	r5, r5, r3
 800a0e8:	68a3      	ldr	r3, [r4, #8]
 800a0ea:	bf0c      	ite	eq
 800a0ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a0f0:	2500      	movne	r5, #0
 800a0f2:	4293      	cmp	r3, r2
 800a0f4:	bfc4      	itt	gt
 800a0f6:	1a9b      	subgt	r3, r3, r2
 800a0f8:	18ed      	addgt	r5, r5, r3
 800a0fa:	2600      	movs	r6, #0
 800a0fc:	341a      	adds	r4, #26
 800a0fe:	42b5      	cmp	r5, r6
 800a100:	d11a      	bne.n	800a138 <_printf_common+0xc8>
 800a102:	2000      	movs	r0, #0
 800a104:	e008      	b.n	800a118 <_printf_common+0xa8>
 800a106:	2301      	movs	r3, #1
 800a108:	4652      	mov	r2, sl
 800a10a:	4649      	mov	r1, r9
 800a10c:	4638      	mov	r0, r7
 800a10e:	47c0      	blx	r8
 800a110:	3001      	adds	r0, #1
 800a112:	d103      	bne.n	800a11c <_printf_common+0xac>
 800a114:	f04f 30ff 	mov.w	r0, #4294967295
 800a118:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a11c:	3501      	adds	r5, #1
 800a11e:	e7c6      	b.n	800a0ae <_printf_common+0x3e>
 800a120:	18e1      	adds	r1, r4, r3
 800a122:	1c5a      	adds	r2, r3, #1
 800a124:	2030      	movs	r0, #48	; 0x30
 800a126:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a12a:	4422      	add	r2, r4
 800a12c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a130:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a134:	3302      	adds	r3, #2
 800a136:	e7c7      	b.n	800a0c8 <_printf_common+0x58>
 800a138:	2301      	movs	r3, #1
 800a13a:	4622      	mov	r2, r4
 800a13c:	4649      	mov	r1, r9
 800a13e:	4638      	mov	r0, r7
 800a140:	47c0      	blx	r8
 800a142:	3001      	adds	r0, #1
 800a144:	d0e6      	beq.n	800a114 <_printf_common+0xa4>
 800a146:	3601      	adds	r6, #1
 800a148:	e7d9      	b.n	800a0fe <_printf_common+0x8e>
	...

0800a14c <_printf_i>:
 800a14c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a150:	7e0f      	ldrb	r7, [r1, #24]
 800a152:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a154:	2f78      	cmp	r7, #120	; 0x78
 800a156:	4691      	mov	r9, r2
 800a158:	4680      	mov	r8, r0
 800a15a:	460c      	mov	r4, r1
 800a15c:	469a      	mov	sl, r3
 800a15e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a162:	d807      	bhi.n	800a174 <_printf_i+0x28>
 800a164:	2f62      	cmp	r7, #98	; 0x62
 800a166:	d80a      	bhi.n	800a17e <_printf_i+0x32>
 800a168:	2f00      	cmp	r7, #0
 800a16a:	f000 80d4 	beq.w	800a316 <_printf_i+0x1ca>
 800a16e:	2f58      	cmp	r7, #88	; 0x58
 800a170:	f000 80c0 	beq.w	800a2f4 <_printf_i+0x1a8>
 800a174:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a178:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a17c:	e03a      	b.n	800a1f4 <_printf_i+0xa8>
 800a17e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a182:	2b15      	cmp	r3, #21
 800a184:	d8f6      	bhi.n	800a174 <_printf_i+0x28>
 800a186:	a101      	add	r1, pc, #4	; (adr r1, 800a18c <_printf_i+0x40>)
 800a188:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a18c:	0800a1e5 	.word	0x0800a1e5
 800a190:	0800a1f9 	.word	0x0800a1f9
 800a194:	0800a175 	.word	0x0800a175
 800a198:	0800a175 	.word	0x0800a175
 800a19c:	0800a175 	.word	0x0800a175
 800a1a0:	0800a175 	.word	0x0800a175
 800a1a4:	0800a1f9 	.word	0x0800a1f9
 800a1a8:	0800a175 	.word	0x0800a175
 800a1ac:	0800a175 	.word	0x0800a175
 800a1b0:	0800a175 	.word	0x0800a175
 800a1b4:	0800a175 	.word	0x0800a175
 800a1b8:	0800a2fd 	.word	0x0800a2fd
 800a1bc:	0800a225 	.word	0x0800a225
 800a1c0:	0800a2b7 	.word	0x0800a2b7
 800a1c4:	0800a175 	.word	0x0800a175
 800a1c8:	0800a175 	.word	0x0800a175
 800a1cc:	0800a31f 	.word	0x0800a31f
 800a1d0:	0800a175 	.word	0x0800a175
 800a1d4:	0800a225 	.word	0x0800a225
 800a1d8:	0800a175 	.word	0x0800a175
 800a1dc:	0800a175 	.word	0x0800a175
 800a1e0:	0800a2bf 	.word	0x0800a2bf
 800a1e4:	682b      	ldr	r3, [r5, #0]
 800a1e6:	1d1a      	adds	r2, r3, #4
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	602a      	str	r2, [r5, #0]
 800a1ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a1f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a1f4:	2301      	movs	r3, #1
 800a1f6:	e09f      	b.n	800a338 <_printf_i+0x1ec>
 800a1f8:	6820      	ldr	r0, [r4, #0]
 800a1fa:	682b      	ldr	r3, [r5, #0]
 800a1fc:	0607      	lsls	r7, r0, #24
 800a1fe:	f103 0104 	add.w	r1, r3, #4
 800a202:	6029      	str	r1, [r5, #0]
 800a204:	d501      	bpl.n	800a20a <_printf_i+0xbe>
 800a206:	681e      	ldr	r6, [r3, #0]
 800a208:	e003      	b.n	800a212 <_printf_i+0xc6>
 800a20a:	0646      	lsls	r6, r0, #25
 800a20c:	d5fb      	bpl.n	800a206 <_printf_i+0xba>
 800a20e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a212:	2e00      	cmp	r6, #0
 800a214:	da03      	bge.n	800a21e <_printf_i+0xd2>
 800a216:	232d      	movs	r3, #45	; 0x2d
 800a218:	4276      	negs	r6, r6
 800a21a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a21e:	485a      	ldr	r0, [pc, #360]	; (800a388 <_printf_i+0x23c>)
 800a220:	230a      	movs	r3, #10
 800a222:	e012      	b.n	800a24a <_printf_i+0xfe>
 800a224:	682b      	ldr	r3, [r5, #0]
 800a226:	6820      	ldr	r0, [r4, #0]
 800a228:	1d19      	adds	r1, r3, #4
 800a22a:	6029      	str	r1, [r5, #0]
 800a22c:	0605      	lsls	r5, r0, #24
 800a22e:	d501      	bpl.n	800a234 <_printf_i+0xe8>
 800a230:	681e      	ldr	r6, [r3, #0]
 800a232:	e002      	b.n	800a23a <_printf_i+0xee>
 800a234:	0641      	lsls	r1, r0, #25
 800a236:	d5fb      	bpl.n	800a230 <_printf_i+0xe4>
 800a238:	881e      	ldrh	r6, [r3, #0]
 800a23a:	4853      	ldr	r0, [pc, #332]	; (800a388 <_printf_i+0x23c>)
 800a23c:	2f6f      	cmp	r7, #111	; 0x6f
 800a23e:	bf0c      	ite	eq
 800a240:	2308      	moveq	r3, #8
 800a242:	230a      	movne	r3, #10
 800a244:	2100      	movs	r1, #0
 800a246:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a24a:	6865      	ldr	r5, [r4, #4]
 800a24c:	60a5      	str	r5, [r4, #8]
 800a24e:	2d00      	cmp	r5, #0
 800a250:	bfa2      	ittt	ge
 800a252:	6821      	ldrge	r1, [r4, #0]
 800a254:	f021 0104 	bicge.w	r1, r1, #4
 800a258:	6021      	strge	r1, [r4, #0]
 800a25a:	b90e      	cbnz	r6, 800a260 <_printf_i+0x114>
 800a25c:	2d00      	cmp	r5, #0
 800a25e:	d04b      	beq.n	800a2f8 <_printf_i+0x1ac>
 800a260:	4615      	mov	r5, r2
 800a262:	fbb6 f1f3 	udiv	r1, r6, r3
 800a266:	fb03 6711 	mls	r7, r3, r1, r6
 800a26a:	5dc7      	ldrb	r7, [r0, r7]
 800a26c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a270:	4637      	mov	r7, r6
 800a272:	42bb      	cmp	r3, r7
 800a274:	460e      	mov	r6, r1
 800a276:	d9f4      	bls.n	800a262 <_printf_i+0x116>
 800a278:	2b08      	cmp	r3, #8
 800a27a:	d10b      	bne.n	800a294 <_printf_i+0x148>
 800a27c:	6823      	ldr	r3, [r4, #0]
 800a27e:	07de      	lsls	r6, r3, #31
 800a280:	d508      	bpl.n	800a294 <_printf_i+0x148>
 800a282:	6923      	ldr	r3, [r4, #16]
 800a284:	6861      	ldr	r1, [r4, #4]
 800a286:	4299      	cmp	r1, r3
 800a288:	bfde      	ittt	le
 800a28a:	2330      	movle	r3, #48	; 0x30
 800a28c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a290:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a294:	1b52      	subs	r2, r2, r5
 800a296:	6122      	str	r2, [r4, #16]
 800a298:	f8cd a000 	str.w	sl, [sp]
 800a29c:	464b      	mov	r3, r9
 800a29e:	aa03      	add	r2, sp, #12
 800a2a0:	4621      	mov	r1, r4
 800a2a2:	4640      	mov	r0, r8
 800a2a4:	f7ff fee4 	bl	800a070 <_printf_common>
 800a2a8:	3001      	adds	r0, #1
 800a2aa:	d14a      	bne.n	800a342 <_printf_i+0x1f6>
 800a2ac:	f04f 30ff 	mov.w	r0, #4294967295
 800a2b0:	b004      	add	sp, #16
 800a2b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2b6:	6823      	ldr	r3, [r4, #0]
 800a2b8:	f043 0320 	orr.w	r3, r3, #32
 800a2bc:	6023      	str	r3, [r4, #0]
 800a2be:	4833      	ldr	r0, [pc, #204]	; (800a38c <_printf_i+0x240>)
 800a2c0:	2778      	movs	r7, #120	; 0x78
 800a2c2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a2c6:	6823      	ldr	r3, [r4, #0]
 800a2c8:	6829      	ldr	r1, [r5, #0]
 800a2ca:	061f      	lsls	r7, r3, #24
 800a2cc:	f851 6b04 	ldr.w	r6, [r1], #4
 800a2d0:	d402      	bmi.n	800a2d8 <_printf_i+0x18c>
 800a2d2:	065f      	lsls	r7, r3, #25
 800a2d4:	bf48      	it	mi
 800a2d6:	b2b6      	uxthmi	r6, r6
 800a2d8:	07df      	lsls	r7, r3, #31
 800a2da:	bf48      	it	mi
 800a2dc:	f043 0320 	orrmi.w	r3, r3, #32
 800a2e0:	6029      	str	r1, [r5, #0]
 800a2e2:	bf48      	it	mi
 800a2e4:	6023      	strmi	r3, [r4, #0]
 800a2e6:	b91e      	cbnz	r6, 800a2f0 <_printf_i+0x1a4>
 800a2e8:	6823      	ldr	r3, [r4, #0]
 800a2ea:	f023 0320 	bic.w	r3, r3, #32
 800a2ee:	6023      	str	r3, [r4, #0]
 800a2f0:	2310      	movs	r3, #16
 800a2f2:	e7a7      	b.n	800a244 <_printf_i+0xf8>
 800a2f4:	4824      	ldr	r0, [pc, #144]	; (800a388 <_printf_i+0x23c>)
 800a2f6:	e7e4      	b.n	800a2c2 <_printf_i+0x176>
 800a2f8:	4615      	mov	r5, r2
 800a2fa:	e7bd      	b.n	800a278 <_printf_i+0x12c>
 800a2fc:	682b      	ldr	r3, [r5, #0]
 800a2fe:	6826      	ldr	r6, [r4, #0]
 800a300:	6961      	ldr	r1, [r4, #20]
 800a302:	1d18      	adds	r0, r3, #4
 800a304:	6028      	str	r0, [r5, #0]
 800a306:	0635      	lsls	r5, r6, #24
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	d501      	bpl.n	800a310 <_printf_i+0x1c4>
 800a30c:	6019      	str	r1, [r3, #0]
 800a30e:	e002      	b.n	800a316 <_printf_i+0x1ca>
 800a310:	0670      	lsls	r0, r6, #25
 800a312:	d5fb      	bpl.n	800a30c <_printf_i+0x1c0>
 800a314:	8019      	strh	r1, [r3, #0]
 800a316:	2300      	movs	r3, #0
 800a318:	6123      	str	r3, [r4, #16]
 800a31a:	4615      	mov	r5, r2
 800a31c:	e7bc      	b.n	800a298 <_printf_i+0x14c>
 800a31e:	682b      	ldr	r3, [r5, #0]
 800a320:	1d1a      	adds	r2, r3, #4
 800a322:	602a      	str	r2, [r5, #0]
 800a324:	681d      	ldr	r5, [r3, #0]
 800a326:	6862      	ldr	r2, [r4, #4]
 800a328:	2100      	movs	r1, #0
 800a32a:	4628      	mov	r0, r5
 800a32c:	f7f5 ff88 	bl	8000240 <memchr>
 800a330:	b108      	cbz	r0, 800a336 <_printf_i+0x1ea>
 800a332:	1b40      	subs	r0, r0, r5
 800a334:	6060      	str	r0, [r4, #4]
 800a336:	6863      	ldr	r3, [r4, #4]
 800a338:	6123      	str	r3, [r4, #16]
 800a33a:	2300      	movs	r3, #0
 800a33c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a340:	e7aa      	b.n	800a298 <_printf_i+0x14c>
 800a342:	6923      	ldr	r3, [r4, #16]
 800a344:	462a      	mov	r2, r5
 800a346:	4649      	mov	r1, r9
 800a348:	4640      	mov	r0, r8
 800a34a:	47d0      	blx	sl
 800a34c:	3001      	adds	r0, #1
 800a34e:	d0ad      	beq.n	800a2ac <_printf_i+0x160>
 800a350:	6823      	ldr	r3, [r4, #0]
 800a352:	079b      	lsls	r3, r3, #30
 800a354:	d413      	bmi.n	800a37e <_printf_i+0x232>
 800a356:	68e0      	ldr	r0, [r4, #12]
 800a358:	9b03      	ldr	r3, [sp, #12]
 800a35a:	4298      	cmp	r0, r3
 800a35c:	bfb8      	it	lt
 800a35e:	4618      	movlt	r0, r3
 800a360:	e7a6      	b.n	800a2b0 <_printf_i+0x164>
 800a362:	2301      	movs	r3, #1
 800a364:	4632      	mov	r2, r6
 800a366:	4649      	mov	r1, r9
 800a368:	4640      	mov	r0, r8
 800a36a:	47d0      	blx	sl
 800a36c:	3001      	adds	r0, #1
 800a36e:	d09d      	beq.n	800a2ac <_printf_i+0x160>
 800a370:	3501      	adds	r5, #1
 800a372:	68e3      	ldr	r3, [r4, #12]
 800a374:	9903      	ldr	r1, [sp, #12]
 800a376:	1a5b      	subs	r3, r3, r1
 800a378:	42ab      	cmp	r3, r5
 800a37a:	dcf2      	bgt.n	800a362 <_printf_i+0x216>
 800a37c:	e7eb      	b.n	800a356 <_printf_i+0x20a>
 800a37e:	2500      	movs	r5, #0
 800a380:	f104 0619 	add.w	r6, r4, #25
 800a384:	e7f5      	b.n	800a372 <_printf_i+0x226>
 800a386:	bf00      	nop
 800a388:	0800cb1b 	.word	0x0800cb1b
 800a38c:	0800cb2c 	.word	0x0800cb2c

0800a390 <std>:
 800a390:	2300      	movs	r3, #0
 800a392:	b510      	push	{r4, lr}
 800a394:	4604      	mov	r4, r0
 800a396:	e9c0 3300 	strd	r3, r3, [r0]
 800a39a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a39e:	6083      	str	r3, [r0, #8]
 800a3a0:	8181      	strh	r1, [r0, #12]
 800a3a2:	6643      	str	r3, [r0, #100]	; 0x64
 800a3a4:	81c2      	strh	r2, [r0, #14]
 800a3a6:	6183      	str	r3, [r0, #24]
 800a3a8:	4619      	mov	r1, r3
 800a3aa:	2208      	movs	r2, #8
 800a3ac:	305c      	adds	r0, #92	; 0x5c
 800a3ae:	f000 f948 	bl	800a642 <memset>
 800a3b2:	4b05      	ldr	r3, [pc, #20]	; (800a3c8 <std+0x38>)
 800a3b4:	6263      	str	r3, [r4, #36]	; 0x24
 800a3b6:	4b05      	ldr	r3, [pc, #20]	; (800a3cc <std+0x3c>)
 800a3b8:	62a3      	str	r3, [r4, #40]	; 0x28
 800a3ba:	4b05      	ldr	r3, [pc, #20]	; (800a3d0 <std+0x40>)
 800a3bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a3be:	4b05      	ldr	r3, [pc, #20]	; (800a3d4 <std+0x44>)
 800a3c0:	6224      	str	r4, [r4, #32]
 800a3c2:	6323      	str	r3, [r4, #48]	; 0x30
 800a3c4:	bd10      	pop	{r4, pc}
 800a3c6:	bf00      	nop
 800a3c8:	0800a5bd 	.word	0x0800a5bd
 800a3cc:	0800a5df 	.word	0x0800a5df
 800a3d0:	0800a617 	.word	0x0800a617
 800a3d4:	0800a63b 	.word	0x0800a63b

0800a3d8 <stdio_exit_handler>:
 800a3d8:	4a02      	ldr	r2, [pc, #8]	; (800a3e4 <stdio_exit_handler+0xc>)
 800a3da:	4903      	ldr	r1, [pc, #12]	; (800a3e8 <stdio_exit_handler+0x10>)
 800a3dc:	4803      	ldr	r0, [pc, #12]	; (800a3ec <stdio_exit_handler+0x14>)
 800a3de:	f000 b869 	b.w	800a4b4 <_fwalk_sglue>
 800a3e2:	bf00      	nop
 800a3e4:	200000b0 	.word	0x200000b0
 800a3e8:	0800c489 	.word	0x0800c489
 800a3ec:	200000bc 	.word	0x200000bc

0800a3f0 <cleanup_stdio>:
 800a3f0:	6841      	ldr	r1, [r0, #4]
 800a3f2:	4b0c      	ldr	r3, [pc, #48]	; (800a424 <cleanup_stdio+0x34>)
 800a3f4:	4299      	cmp	r1, r3
 800a3f6:	b510      	push	{r4, lr}
 800a3f8:	4604      	mov	r4, r0
 800a3fa:	d001      	beq.n	800a400 <cleanup_stdio+0x10>
 800a3fc:	f002 f844 	bl	800c488 <_fflush_r>
 800a400:	68a1      	ldr	r1, [r4, #8]
 800a402:	4b09      	ldr	r3, [pc, #36]	; (800a428 <cleanup_stdio+0x38>)
 800a404:	4299      	cmp	r1, r3
 800a406:	d002      	beq.n	800a40e <cleanup_stdio+0x1e>
 800a408:	4620      	mov	r0, r4
 800a40a:	f002 f83d 	bl	800c488 <_fflush_r>
 800a40e:	68e1      	ldr	r1, [r4, #12]
 800a410:	4b06      	ldr	r3, [pc, #24]	; (800a42c <cleanup_stdio+0x3c>)
 800a412:	4299      	cmp	r1, r3
 800a414:	d004      	beq.n	800a420 <cleanup_stdio+0x30>
 800a416:	4620      	mov	r0, r4
 800a418:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a41c:	f002 b834 	b.w	800c488 <_fflush_r>
 800a420:	bd10      	pop	{r4, pc}
 800a422:	bf00      	nop
 800a424:	20000908 	.word	0x20000908
 800a428:	20000970 	.word	0x20000970
 800a42c:	200009d8 	.word	0x200009d8

0800a430 <global_stdio_init.part.0>:
 800a430:	b510      	push	{r4, lr}
 800a432:	4b0b      	ldr	r3, [pc, #44]	; (800a460 <global_stdio_init.part.0+0x30>)
 800a434:	4c0b      	ldr	r4, [pc, #44]	; (800a464 <global_stdio_init.part.0+0x34>)
 800a436:	4a0c      	ldr	r2, [pc, #48]	; (800a468 <global_stdio_init.part.0+0x38>)
 800a438:	601a      	str	r2, [r3, #0]
 800a43a:	4620      	mov	r0, r4
 800a43c:	2200      	movs	r2, #0
 800a43e:	2104      	movs	r1, #4
 800a440:	f7ff ffa6 	bl	800a390 <std>
 800a444:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a448:	2201      	movs	r2, #1
 800a44a:	2109      	movs	r1, #9
 800a44c:	f7ff ffa0 	bl	800a390 <std>
 800a450:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a454:	2202      	movs	r2, #2
 800a456:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a45a:	2112      	movs	r1, #18
 800a45c:	f7ff bf98 	b.w	800a390 <std>
 800a460:	20000a40 	.word	0x20000a40
 800a464:	20000908 	.word	0x20000908
 800a468:	0800a3d9 	.word	0x0800a3d9

0800a46c <__sfp_lock_acquire>:
 800a46c:	4801      	ldr	r0, [pc, #4]	; (800a474 <__sfp_lock_acquire+0x8>)
 800a46e:	f000 b9d3 	b.w	800a818 <__retarget_lock_acquire_recursive>
 800a472:	bf00      	nop
 800a474:	20000a49 	.word	0x20000a49

0800a478 <__sfp_lock_release>:
 800a478:	4801      	ldr	r0, [pc, #4]	; (800a480 <__sfp_lock_release+0x8>)
 800a47a:	f000 b9ce 	b.w	800a81a <__retarget_lock_release_recursive>
 800a47e:	bf00      	nop
 800a480:	20000a49 	.word	0x20000a49

0800a484 <__sinit>:
 800a484:	b510      	push	{r4, lr}
 800a486:	4604      	mov	r4, r0
 800a488:	f7ff fff0 	bl	800a46c <__sfp_lock_acquire>
 800a48c:	6a23      	ldr	r3, [r4, #32]
 800a48e:	b11b      	cbz	r3, 800a498 <__sinit+0x14>
 800a490:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a494:	f7ff bff0 	b.w	800a478 <__sfp_lock_release>
 800a498:	4b04      	ldr	r3, [pc, #16]	; (800a4ac <__sinit+0x28>)
 800a49a:	6223      	str	r3, [r4, #32]
 800a49c:	4b04      	ldr	r3, [pc, #16]	; (800a4b0 <__sinit+0x2c>)
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d1f5      	bne.n	800a490 <__sinit+0xc>
 800a4a4:	f7ff ffc4 	bl	800a430 <global_stdio_init.part.0>
 800a4a8:	e7f2      	b.n	800a490 <__sinit+0xc>
 800a4aa:	bf00      	nop
 800a4ac:	0800a3f1 	.word	0x0800a3f1
 800a4b0:	20000a40 	.word	0x20000a40

0800a4b4 <_fwalk_sglue>:
 800a4b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a4b8:	4607      	mov	r7, r0
 800a4ba:	4688      	mov	r8, r1
 800a4bc:	4614      	mov	r4, r2
 800a4be:	2600      	movs	r6, #0
 800a4c0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a4c4:	f1b9 0901 	subs.w	r9, r9, #1
 800a4c8:	d505      	bpl.n	800a4d6 <_fwalk_sglue+0x22>
 800a4ca:	6824      	ldr	r4, [r4, #0]
 800a4cc:	2c00      	cmp	r4, #0
 800a4ce:	d1f7      	bne.n	800a4c0 <_fwalk_sglue+0xc>
 800a4d0:	4630      	mov	r0, r6
 800a4d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a4d6:	89ab      	ldrh	r3, [r5, #12]
 800a4d8:	2b01      	cmp	r3, #1
 800a4da:	d907      	bls.n	800a4ec <_fwalk_sglue+0x38>
 800a4dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a4e0:	3301      	adds	r3, #1
 800a4e2:	d003      	beq.n	800a4ec <_fwalk_sglue+0x38>
 800a4e4:	4629      	mov	r1, r5
 800a4e6:	4638      	mov	r0, r7
 800a4e8:	47c0      	blx	r8
 800a4ea:	4306      	orrs	r6, r0
 800a4ec:	3568      	adds	r5, #104	; 0x68
 800a4ee:	e7e9      	b.n	800a4c4 <_fwalk_sglue+0x10>

0800a4f0 <iprintf>:
 800a4f0:	b40f      	push	{r0, r1, r2, r3}
 800a4f2:	b507      	push	{r0, r1, r2, lr}
 800a4f4:	4906      	ldr	r1, [pc, #24]	; (800a510 <iprintf+0x20>)
 800a4f6:	ab04      	add	r3, sp, #16
 800a4f8:	6808      	ldr	r0, [r1, #0]
 800a4fa:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4fe:	6881      	ldr	r1, [r0, #8]
 800a500:	9301      	str	r3, [sp, #4]
 800a502:	f001 fe21 	bl	800c148 <_vfiprintf_r>
 800a506:	b003      	add	sp, #12
 800a508:	f85d eb04 	ldr.w	lr, [sp], #4
 800a50c:	b004      	add	sp, #16
 800a50e:	4770      	bx	lr
 800a510:	20000108 	.word	0x20000108

0800a514 <sniprintf>:
 800a514:	b40c      	push	{r2, r3}
 800a516:	b530      	push	{r4, r5, lr}
 800a518:	4b17      	ldr	r3, [pc, #92]	; (800a578 <sniprintf+0x64>)
 800a51a:	1e0c      	subs	r4, r1, #0
 800a51c:	681d      	ldr	r5, [r3, #0]
 800a51e:	b09d      	sub	sp, #116	; 0x74
 800a520:	da08      	bge.n	800a534 <sniprintf+0x20>
 800a522:	238b      	movs	r3, #139	; 0x8b
 800a524:	602b      	str	r3, [r5, #0]
 800a526:	f04f 30ff 	mov.w	r0, #4294967295
 800a52a:	b01d      	add	sp, #116	; 0x74
 800a52c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a530:	b002      	add	sp, #8
 800a532:	4770      	bx	lr
 800a534:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a538:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a53c:	bf14      	ite	ne
 800a53e:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a542:	4623      	moveq	r3, r4
 800a544:	9304      	str	r3, [sp, #16]
 800a546:	9307      	str	r3, [sp, #28]
 800a548:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a54c:	9002      	str	r0, [sp, #8]
 800a54e:	9006      	str	r0, [sp, #24]
 800a550:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a554:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a556:	ab21      	add	r3, sp, #132	; 0x84
 800a558:	a902      	add	r1, sp, #8
 800a55a:	4628      	mov	r0, r5
 800a55c:	9301      	str	r3, [sp, #4]
 800a55e:	f001 fccb 	bl	800bef8 <_svfiprintf_r>
 800a562:	1c43      	adds	r3, r0, #1
 800a564:	bfbc      	itt	lt
 800a566:	238b      	movlt	r3, #139	; 0x8b
 800a568:	602b      	strlt	r3, [r5, #0]
 800a56a:	2c00      	cmp	r4, #0
 800a56c:	d0dd      	beq.n	800a52a <sniprintf+0x16>
 800a56e:	9b02      	ldr	r3, [sp, #8]
 800a570:	2200      	movs	r2, #0
 800a572:	701a      	strb	r2, [r3, #0]
 800a574:	e7d9      	b.n	800a52a <sniprintf+0x16>
 800a576:	bf00      	nop
 800a578:	20000108 	.word	0x20000108

0800a57c <siprintf>:
 800a57c:	b40e      	push	{r1, r2, r3}
 800a57e:	b500      	push	{lr}
 800a580:	b09c      	sub	sp, #112	; 0x70
 800a582:	ab1d      	add	r3, sp, #116	; 0x74
 800a584:	9002      	str	r0, [sp, #8]
 800a586:	9006      	str	r0, [sp, #24]
 800a588:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a58c:	4809      	ldr	r0, [pc, #36]	; (800a5b4 <siprintf+0x38>)
 800a58e:	9107      	str	r1, [sp, #28]
 800a590:	9104      	str	r1, [sp, #16]
 800a592:	4909      	ldr	r1, [pc, #36]	; (800a5b8 <siprintf+0x3c>)
 800a594:	f853 2b04 	ldr.w	r2, [r3], #4
 800a598:	9105      	str	r1, [sp, #20]
 800a59a:	6800      	ldr	r0, [r0, #0]
 800a59c:	9301      	str	r3, [sp, #4]
 800a59e:	a902      	add	r1, sp, #8
 800a5a0:	f001 fcaa 	bl	800bef8 <_svfiprintf_r>
 800a5a4:	9b02      	ldr	r3, [sp, #8]
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	701a      	strb	r2, [r3, #0]
 800a5aa:	b01c      	add	sp, #112	; 0x70
 800a5ac:	f85d eb04 	ldr.w	lr, [sp], #4
 800a5b0:	b003      	add	sp, #12
 800a5b2:	4770      	bx	lr
 800a5b4:	20000108 	.word	0x20000108
 800a5b8:	ffff0208 	.word	0xffff0208

0800a5bc <__sread>:
 800a5bc:	b510      	push	{r4, lr}
 800a5be:	460c      	mov	r4, r1
 800a5c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5c4:	f000 f8da 	bl	800a77c <_read_r>
 800a5c8:	2800      	cmp	r0, #0
 800a5ca:	bfab      	itete	ge
 800a5cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a5ce:	89a3      	ldrhlt	r3, [r4, #12]
 800a5d0:	181b      	addge	r3, r3, r0
 800a5d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a5d6:	bfac      	ite	ge
 800a5d8:	6563      	strge	r3, [r4, #84]	; 0x54
 800a5da:	81a3      	strhlt	r3, [r4, #12]
 800a5dc:	bd10      	pop	{r4, pc}

0800a5de <__swrite>:
 800a5de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5e2:	461f      	mov	r7, r3
 800a5e4:	898b      	ldrh	r3, [r1, #12]
 800a5e6:	05db      	lsls	r3, r3, #23
 800a5e8:	4605      	mov	r5, r0
 800a5ea:	460c      	mov	r4, r1
 800a5ec:	4616      	mov	r6, r2
 800a5ee:	d505      	bpl.n	800a5fc <__swrite+0x1e>
 800a5f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5f4:	2302      	movs	r3, #2
 800a5f6:	2200      	movs	r2, #0
 800a5f8:	f000 f8ae 	bl	800a758 <_lseek_r>
 800a5fc:	89a3      	ldrh	r3, [r4, #12]
 800a5fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a602:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a606:	81a3      	strh	r3, [r4, #12]
 800a608:	4632      	mov	r2, r6
 800a60a:	463b      	mov	r3, r7
 800a60c:	4628      	mov	r0, r5
 800a60e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a612:	f000 b8c5 	b.w	800a7a0 <_write_r>

0800a616 <__sseek>:
 800a616:	b510      	push	{r4, lr}
 800a618:	460c      	mov	r4, r1
 800a61a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a61e:	f000 f89b 	bl	800a758 <_lseek_r>
 800a622:	1c43      	adds	r3, r0, #1
 800a624:	89a3      	ldrh	r3, [r4, #12]
 800a626:	bf15      	itete	ne
 800a628:	6560      	strne	r0, [r4, #84]	; 0x54
 800a62a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a62e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a632:	81a3      	strheq	r3, [r4, #12]
 800a634:	bf18      	it	ne
 800a636:	81a3      	strhne	r3, [r4, #12]
 800a638:	bd10      	pop	{r4, pc}

0800a63a <__sclose>:
 800a63a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a63e:	f000 b87b 	b.w	800a738 <_close_r>

0800a642 <memset>:
 800a642:	4402      	add	r2, r0
 800a644:	4603      	mov	r3, r0
 800a646:	4293      	cmp	r3, r2
 800a648:	d100      	bne.n	800a64c <memset+0xa>
 800a64a:	4770      	bx	lr
 800a64c:	f803 1b01 	strb.w	r1, [r3], #1
 800a650:	e7f9      	b.n	800a646 <memset+0x4>

0800a652 <strncmp>:
 800a652:	b510      	push	{r4, lr}
 800a654:	b16a      	cbz	r2, 800a672 <strncmp+0x20>
 800a656:	3901      	subs	r1, #1
 800a658:	1884      	adds	r4, r0, r2
 800a65a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a65e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a662:	429a      	cmp	r2, r3
 800a664:	d103      	bne.n	800a66e <strncmp+0x1c>
 800a666:	42a0      	cmp	r0, r4
 800a668:	d001      	beq.n	800a66e <strncmp+0x1c>
 800a66a:	2a00      	cmp	r2, #0
 800a66c:	d1f5      	bne.n	800a65a <strncmp+0x8>
 800a66e:	1ad0      	subs	r0, r2, r3
 800a670:	bd10      	pop	{r4, pc}
 800a672:	4610      	mov	r0, r2
 800a674:	e7fc      	b.n	800a670 <strncmp+0x1e>
	...

0800a678 <strtok>:
 800a678:	4b16      	ldr	r3, [pc, #88]	; (800a6d4 <strtok+0x5c>)
 800a67a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a67c:	681e      	ldr	r6, [r3, #0]
 800a67e:	6c74      	ldr	r4, [r6, #68]	; 0x44
 800a680:	4605      	mov	r5, r0
 800a682:	b9fc      	cbnz	r4, 800a6c4 <strtok+0x4c>
 800a684:	2050      	movs	r0, #80	; 0x50
 800a686:	9101      	str	r1, [sp, #4]
 800a688:	f000 ffac 	bl	800b5e4 <malloc>
 800a68c:	9901      	ldr	r1, [sp, #4]
 800a68e:	6470      	str	r0, [r6, #68]	; 0x44
 800a690:	4602      	mov	r2, r0
 800a692:	b920      	cbnz	r0, 800a69e <strtok+0x26>
 800a694:	4b10      	ldr	r3, [pc, #64]	; (800a6d8 <strtok+0x60>)
 800a696:	4811      	ldr	r0, [pc, #68]	; (800a6dc <strtok+0x64>)
 800a698:	215b      	movs	r1, #91	; 0x5b
 800a69a:	f000 f8bf 	bl	800a81c <__assert_func>
 800a69e:	e9c0 4400 	strd	r4, r4, [r0]
 800a6a2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800a6a6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800a6aa:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800a6ae:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800a6b2:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800a6b6:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800a6ba:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800a6be:	6184      	str	r4, [r0, #24]
 800a6c0:	7704      	strb	r4, [r0, #28]
 800a6c2:	6244      	str	r4, [r0, #36]	; 0x24
 800a6c4:	6c72      	ldr	r2, [r6, #68]	; 0x44
 800a6c6:	2301      	movs	r3, #1
 800a6c8:	4628      	mov	r0, r5
 800a6ca:	b002      	add	sp, #8
 800a6cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a6d0:	f000 b806 	b.w	800a6e0 <__strtok_r>
 800a6d4:	20000108 	.word	0x20000108
 800a6d8:	0800cb3d 	.word	0x0800cb3d
 800a6dc:	0800cb54 	.word	0x0800cb54

0800a6e0 <__strtok_r>:
 800a6e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a6e2:	b908      	cbnz	r0, 800a6e8 <__strtok_r+0x8>
 800a6e4:	6810      	ldr	r0, [r2, #0]
 800a6e6:	b188      	cbz	r0, 800a70c <__strtok_r+0x2c>
 800a6e8:	4604      	mov	r4, r0
 800a6ea:	4620      	mov	r0, r4
 800a6ec:	f814 5b01 	ldrb.w	r5, [r4], #1
 800a6f0:	460f      	mov	r7, r1
 800a6f2:	f817 6b01 	ldrb.w	r6, [r7], #1
 800a6f6:	b91e      	cbnz	r6, 800a700 <__strtok_r+0x20>
 800a6f8:	b965      	cbnz	r5, 800a714 <__strtok_r+0x34>
 800a6fa:	6015      	str	r5, [r2, #0]
 800a6fc:	4628      	mov	r0, r5
 800a6fe:	e005      	b.n	800a70c <__strtok_r+0x2c>
 800a700:	42b5      	cmp	r5, r6
 800a702:	d1f6      	bne.n	800a6f2 <__strtok_r+0x12>
 800a704:	2b00      	cmp	r3, #0
 800a706:	d1f0      	bne.n	800a6ea <__strtok_r+0xa>
 800a708:	6014      	str	r4, [r2, #0]
 800a70a:	7003      	strb	r3, [r0, #0]
 800a70c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a70e:	461c      	mov	r4, r3
 800a710:	e00c      	b.n	800a72c <__strtok_r+0x4c>
 800a712:	b915      	cbnz	r5, 800a71a <__strtok_r+0x3a>
 800a714:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a718:	460e      	mov	r6, r1
 800a71a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800a71e:	42ab      	cmp	r3, r5
 800a720:	d1f7      	bne.n	800a712 <__strtok_r+0x32>
 800a722:	2b00      	cmp	r3, #0
 800a724:	d0f3      	beq.n	800a70e <__strtok_r+0x2e>
 800a726:	2300      	movs	r3, #0
 800a728:	f804 3c01 	strb.w	r3, [r4, #-1]
 800a72c:	6014      	str	r4, [r2, #0]
 800a72e:	e7ed      	b.n	800a70c <__strtok_r+0x2c>

0800a730 <_localeconv_r>:
 800a730:	4800      	ldr	r0, [pc, #0]	; (800a734 <_localeconv_r+0x4>)
 800a732:	4770      	bx	lr
 800a734:	200001fc 	.word	0x200001fc

0800a738 <_close_r>:
 800a738:	b538      	push	{r3, r4, r5, lr}
 800a73a:	4d06      	ldr	r5, [pc, #24]	; (800a754 <_close_r+0x1c>)
 800a73c:	2300      	movs	r3, #0
 800a73e:	4604      	mov	r4, r0
 800a740:	4608      	mov	r0, r1
 800a742:	602b      	str	r3, [r5, #0]
 800a744:	f7f7 f993 	bl	8001a6e <_close>
 800a748:	1c43      	adds	r3, r0, #1
 800a74a:	d102      	bne.n	800a752 <_close_r+0x1a>
 800a74c:	682b      	ldr	r3, [r5, #0]
 800a74e:	b103      	cbz	r3, 800a752 <_close_r+0x1a>
 800a750:	6023      	str	r3, [r4, #0]
 800a752:	bd38      	pop	{r3, r4, r5, pc}
 800a754:	20000a44 	.word	0x20000a44

0800a758 <_lseek_r>:
 800a758:	b538      	push	{r3, r4, r5, lr}
 800a75a:	4d07      	ldr	r5, [pc, #28]	; (800a778 <_lseek_r+0x20>)
 800a75c:	4604      	mov	r4, r0
 800a75e:	4608      	mov	r0, r1
 800a760:	4611      	mov	r1, r2
 800a762:	2200      	movs	r2, #0
 800a764:	602a      	str	r2, [r5, #0]
 800a766:	461a      	mov	r2, r3
 800a768:	f7f7 f9a8 	bl	8001abc <_lseek>
 800a76c:	1c43      	adds	r3, r0, #1
 800a76e:	d102      	bne.n	800a776 <_lseek_r+0x1e>
 800a770:	682b      	ldr	r3, [r5, #0]
 800a772:	b103      	cbz	r3, 800a776 <_lseek_r+0x1e>
 800a774:	6023      	str	r3, [r4, #0]
 800a776:	bd38      	pop	{r3, r4, r5, pc}
 800a778:	20000a44 	.word	0x20000a44

0800a77c <_read_r>:
 800a77c:	b538      	push	{r3, r4, r5, lr}
 800a77e:	4d07      	ldr	r5, [pc, #28]	; (800a79c <_read_r+0x20>)
 800a780:	4604      	mov	r4, r0
 800a782:	4608      	mov	r0, r1
 800a784:	4611      	mov	r1, r2
 800a786:	2200      	movs	r2, #0
 800a788:	602a      	str	r2, [r5, #0]
 800a78a:	461a      	mov	r2, r3
 800a78c:	f7f7 f936 	bl	80019fc <_read>
 800a790:	1c43      	adds	r3, r0, #1
 800a792:	d102      	bne.n	800a79a <_read_r+0x1e>
 800a794:	682b      	ldr	r3, [r5, #0]
 800a796:	b103      	cbz	r3, 800a79a <_read_r+0x1e>
 800a798:	6023      	str	r3, [r4, #0]
 800a79a:	bd38      	pop	{r3, r4, r5, pc}
 800a79c:	20000a44 	.word	0x20000a44

0800a7a0 <_write_r>:
 800a7a0:	b538      	push	{r3, r4, r5, lr}
 800a7a2:	4d07      	ldr	r5, [pc, #28]	; (800a7c0 <_write_r+0x20>)
 800a7a4:	4604      	mov	r4, r0
 800a7a6:	4608      	mov	r0, r1
 800a7a8:	4611      	mov	r1, r2
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	602a      	str	r2, [r5, #0]
 800a7ae:	461a      	mov	r2, r3
 800a7b0:	f7f7 f941 	bl	8001a36 <_write>
 800a7b4:	1c43      	adds	r3, r0, #1
 800a7b6:	d102      	bne.n	800a7be <_write_r+0x1e>
 800a7b8:	682b      	ldr	r3, [r5, #0]
 800a7ba:	b103      	cbz	r3, 800a7be <_write_r+0x1e>
 800a7bc:	6023      	str	r3, [r4, #0]
 800a7be:	bd38      	pop	{r3, r4, r5, pc}
 800a7c0:	20000a44 	.word	0x20000a44

0800a7c4 <__errno>:
 800a7c4:	4b01      	ldr	r3, [pc, #4]	; (800a7cc <__errno+0x8>)
 800a7c6:	6818      	ldr	r0, [r3, #0]
 800a7c8:	4770      	bx	lr
 800a7ca:	bf00      	nop
 800a7cc:	20000108 	.word	0x20000108

0800a7d0 <__libc_init_array>:
 800a7d0:	b570      	push	{r4, r5, r6, lr}
 800a7d2:	4d0d      	ldr	r5, [pc, #52]	; (800a808 <__libc_init_array+0x38>)
 800a7d4:	4c0d      	ldr	r4, [pc, #52]	; (800a80c <__libc_init_array+0x3c>)
 800a7d6:	1b64      	subs	r4, r4, r5
 800a7d8:	10a4      	asrs	r4, r4, #2
 800a7da:	2600      	movs	r6, #0
 800a7dc:	42a6      	cmp	r6, r4
 800a7de:	d109      	bne.n	800a7f4 <__libc_init_array+0x24>
 800a7e0:	4d0b      	ldr	r5, [pc, #44]	; (800a810 <__libc_init_array+0x40>)
 800a7e2:	4c0c      	ldr	r4, [pc, #48]	; (800a814 <__libc_init_array+0x44>)
 800a7e4:	f002 f894 	bl	800c910 <_init>
 800a7e8:	1b64      	subs	r4, r4, r5
 800a7ea:	10a4      	asrs	r4, r4, #2
 800a7ec:	2600      	movs	r6, #0
 800a7ee:	42a6      	cmp	r6, r4
 800a7f0:	d105      	bne.n	800a7fe <__libc_init_array+0x2e>
 800a7f2:	bd70      	pop	{r4, r5, r6, pc}
 800a7f4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a7f8:	4798      	blx	r3
 800a7fa:	3601      	adds	r6, #1
 800a7fc:	e7ee      	b.n	800a7dc <__libc_init_array+0xc>
 800a7fe:	f855 3b04 	ldr.w	r3, [r5], #4
 800a802:	4798      	blx	r3
 800a804:	3601      	adds	r6, #1
 800a806:	e7f2      	b.n	800a7ee <__libc_init_array+0x1e>
 800a808:	0800cde0 	.word	0x0800cde0
 800a80c:	0800cde0 	.word	0x0800cde0
 800a810:	0800cde0 	.word	0x0800cde0
 800a814:	0800cde4 	.word	0x0800cde4

0800a818 <__retarget_lock_acquire_recursive>:
 800a818:	4770      	bx	lr

0800a81a <__retarget_lock_release_recursive>:
 800a81a:	4770      	bx	lr

0800a81c <__assert_func>:
 800a81c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a81e:	4614      	mov	r4, r2
 800a820:	461a      	mov	r2, r3
 800a822:	4b09      	ldr	r3, [pc, #36]	; (800a848 <__assert_func+0x2c>)
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	4605      	mov	r5, r0
 800a828:	68d8      	ldr	r0, [r3, #12]
 800a82a:	b14c      	cbz	r4, 800a840 <__assert_func+0x24>
 800a82c:	4b07      	ldr	r3, [pc, #28]	; (800a84c <__assert_func+0x30>)
 800a82e:	9100      	str	r1, [sp, #0]
 800a830:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a834:	4906      	ldr	r1, [pc, #24]	; (800a850 <__assert_func+0x34>)
 800a836:	462b      	mov	r3, r5
 800a838:	f001 fe4e 	bl	800c4d8 <fiprintf>
 800a83c:	f001 ff2c 	bl	800c698 <abort>
 800a840:	4b04      	ldr	r3, [pc, #16]	; (800a854 <__assert_func+0x38>)
 800a842:	461c      	mov	r4, r3
 800a844:	e7f3      	b.n	800a82e <__assert_func+0x12>
 800a846:	bf00      	nop
 800a848:	20000108 	.word	0x20000108
 800a84c:	0800cbae 	.word	0x0800cbae
 800a850:	0800cbbb 	.word	0x0800cbbb
 800a854:	0800cbe9 	.word	0x0800cbe9

0800a858 <quorem>:
 800a858:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a85c:	6903      	ldr	r3, [r0, #16]
 800a85e:	690c      	ldr	r4, [r1, #16]
 800a860:	42a3      	cmp	r3, r4
 800a862:	4607      	mov	r7, r0
 800a864:	db7e      	blt.n	800a964 <quorem+0x10c>
 800a866:	3c01      	subs	r4, #1
 800a868:	f101 0814 	add.w	r8, r1, #20
 800a86c:	f100 0514 	add.w	r5, r0, #20
 800a870:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a874:	9301      	str	r3, [sp, #4]
 800a876:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a87a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a87e:	3301      	adds	r3, #1
 800a880:	429a      	cmp	r2, r3
 800a882:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a886:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a88a:	fbb2 f6f3 	udiv	r6, r2, r3
 800a88e:	d331      	bcc.n	800a8f4 <quorem+0x9c>
 800a890:	f04f 0e00 	mov.w	lr, #0
 800a894:	4640      	mov	r0, r8
 800a896:	46ac      	mov	ip, r5
 800a898:	46f2      	mov	sl, lr
 800a89a:	f850 2b04 	ldr.w	r2, [r0], #4
 800a89e:	b293      	uxth	r3, r2
 800a8a0:	fb06 e303 	mla	r3, r6, r3, lr
 800a8a4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a8a8:	0c1a      	lsrs	r2, r3, #16
 800a8aa:	b29b      	uxth	r3, r3
 800a8ac:	ebaa 0303 	sub.w	r3, sl, r3
 800a8b0:	f8dc a000 	ldr.w	sl, [ip]
 800a8b4:	fa13 f38a 	uxtah	r3, r3, sl
 800a8b8:	fb06 220e 	mla	r2, r6, lr, r2
 800a8bc:	9300      	str	r3, [sp, #0]
 800a8be:	9b00      	ldr	r3, [sp, #0]
 800a8c0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a8c4:	b292      	uxth	r2, r2
 800a8c6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a8ca:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a8ce:	f8bd 3000 	ldrh.w	r3, [sp]
 800a8d2:	4581      	cmp	r9, r0
 800a8d4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a8d8:	f84c 3b04 	str.w	r3, [ip], #4
 800a8dc:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a8e0:	d2db      	bcs.n	800a89a <quorem+0x42>
 800a8e2:	f855 300b 	ldr.w	r3, [r5, fp]
 800a8e6:	b92b      	cbnz	r3, 800a8f4 <quorem+0x9c>
 800a8e8:	9b01      	ldr	r3, [sp, #4]
 800a8ea:	3b04      	subs	r3, #4
 800a8ec:	429d      	cmp	r5, r3
 800a8ee:	461a      	mov	r2, r3
 800a8f0:	d32c      	bcc.n	800a94c <quorem+0xf4>
 800a8f2:	613c      	str	r4, [r7, #16]
 800a8f4:	4638      	mov	r0, r7
 800a8f6:	f001 f9a5 	bl	800bc44 <__mcmp>
 800a8fa:	2800      	cmp	r0, #0
 800a8fc:	db22      	blt.n	800a944 <quorem+0xec>
 800a8fe:	3601      	adds	r6, #1
 800a900:	4629      	mov	r1, r5
 800a902:	2000      	movs	r0, #0
 800a904:	f858 2b04 	ldr.w	r2, [r8], #4
 800a908:	f8d1 c000 	ldr.w	ip, [r1]
 800a90c:	b293      	uxth	r3, r2
 800a90e:	1ac3      	subs	r3, r0, r3
 800a910:	0c12      	lsrs	r2, r2, #16
 800a912:	fa13 f38c 	uxtah	r3, r3, ip
 800a916:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800a91a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a91e:	b29b      	uxth	r3, r3
 800a920:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a924:	45c1      	cmp	r9, r8
 800a926:	f841 3b04 	str.w	r3, [r1], #4
 800a92a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a92e:	d2e9      	bcs.n	800a904 <quorem+0xac>
 800a930:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a934:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a938:	b922      	cbnz	r2, 800a944 <quorem+0xec>
 800a93a:	3b04      	subs	r3, #4
 800a93c:	429d      	cmp	r5, r3
 800a93e:	461a      	mov	r2, r3
 800a940:	d30a      	bcc.n	800a958 <quorem+0x100>
 800a942:	613c      	str	r4, [r7, #16]
 800a944:	4630      	mov	r0, r6
 800a946:	b003      	add	sp, #12
 800a948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a94c:	6812      	ldr	r2, [r2, #0]
 800a94e:	3b04      	subs	r3, #4
 800a950:	2a00      	cmp	r2, #0
 800a952:	d1ce      	bne.n	800a8f2 <quorem+0x9a>
 800a954:	3c01      	subs	r4, #1
 800a956:	e7c9      	b.n	800a8ec <quorem+0x94>
 800a958:	6812      	ldr	r2, [r2, #0]
 800a95a:	3b04      	subs	r3, #4
 800a95c:	2a00      	cmp	r2, #0
 800a95e:	d1f0      	bne.n	800a942 <quorem+0xea>
 800a960:	3c01      	subs	r4, #1
 800a962:	e7eb      	b.n	800a93c <quorem+0xe4>
 800a964:	2000      	movs	r0, #0
 800a966:	e7ee      	b.n	800a946 <quorem+0xee>

0800a968 <_dtoa_r>:
 800a968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a96c:	ed2d 8b04 	vpush	{d8-d9}
 800a970:	69c5      	ldr	r5, [r0, #28]
 800a972:	b093      	sub	sp, #76	; 0x4c
 800a974:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a978:	ec57 6b10 	vmov	r6, r7, d0
 800a97c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a980:	9107      	str	r1, [sp, #28]
 800a982:	4604      	mov	r4, r0
 800a984:	920a      	str	r2, [sp, #40]	; 0x28
 800a986:	930d      	str	r3, [sp, #52]	; 0x34
 800a988:	b975      	cbnz	r5, 800a9a8 <_dtoa_r+0x40>
 800a98a:	2010      	movs	r0, #16
 800a98c:	f000 fe2a 	bl	800b5e4 <malloc>
 800a990:	4602      	mov	r2, r0
 800a992:	61e0      	str	r0, [r4, #28]
 800a994:	b920      	cbnz	r0, 800a9a0 <_dtoa_r+0x38>
 800a996:	4bae      	ldr	r3, [pc, #696]	; (800ac50 <_dtoa_r+0x2e8>)
 800a998:	21ef      	movs	r1, #239	; 0xef
 800a99a:	48ae      	ldr	r0, [pc, #696]	; (800ac54 <_dtoa_r+0x2ec>)
 800a99c:	f7ff ff3e 	bl	800a81c <__assert_func>
 800a9a0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a9a4:	6005      	str	r5, [r0, #0]
 800a9a6:	60c5      	str	r5, [r0, #12]
 800a9a8:	69e3      	ldr	r3, [r4, #28]
 800a9aa:	6819      	ldr	r1, [r3, #0]
 800a9ac:	b151      	cbz	r1, 800a9c4 <_dtoa_r+0x5c>
 800a9ae:	685a      	ldr	r2, [r3, #4]
 800a9b0:	604a      	str	r2, [r1, #4]
 800a9b2:	2301      	movs	r3, #1
 800a9b4:	4093      	lsls	r3, r2
 800a9b6:	608b      	str	r3, [r1, #8]
 800a9b8:	4620      	mov	r0, r4
 800a9ba:	f000 ff07 	bl	800b7cc <_Bfree>
 800a9be:	69e3      	ldr	r3, [r4, #28]
 800a9c0:	2200      	movs	r2, #0
 800a9c2:	601a      	str	r2, [r3, #0]
 800a9c4:	1e3b      	subs	r3, r7, #0
 800a9c6:	bfbb      	ittet	lt
 800a9c8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a9cc:	9303      	strlt	r3, [sp, #12]
 800a9ce:	2300      	movge	r3, #0
 800a9d0:	2201      	movlt	r2, #1
 800a9d2:	bfac      	ite	ge
 800a9d4:	f8c8 3000 	strge.w	r3, [r8]
 800a9d8:	f8c8 2000 	strlt.w	r2, [r8]
 800a9dc:	4b9e      	ldr	r3, [pc, #632]	; (800ac58 <_dtoa_r+0x2f0>)
 800a9de:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a9e2:	ea33 0308 	bics.w	r3, r3, r8
 800a9e6:	d11b      	bne.n	800aa20 <_dtoa_r+0xb8>
 800a9e8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a9ea:	f242 730f 	movw	r3, #9999	; 0x270f
 800a9ee:	6013      	str	r3, [r2, #0]
 800a9f0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800a9f4:	4333      	orrs	r3, r6
 800a9f6:	f000 8593 	beq.w	800b520 <_dtoa_r+0xbb8>
 800a9fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a9fc:	b963      	cbnz	r3, 800aa18 <_dtoa_r+0xb0>
 800a9fe:	4b97      	ldr	r3, [pc, #604]	; (800ac5c <_dtoa_r+0x2f4>)
 800aa00:	e027      	b.n	800aa52 <_dtoa_r+0xea>
 800aa02:	4b97      	ldr	r3, [pc, #604]	; (800ac60 <_dtoa_r+0x2f8>)
 800aa04:	9300      	str	r3, [sp, #0]
 800aa06:	3308      	adds	r3, #8
 800aa08:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800aa0a:	6013      	str	r3, [r2, #0]
 800aa0c:	9800      	ldr	r0, [sp, #0]
 800aa0e:	b013      	add	sp, #76	; 0x4c
 800aa10:	ecbd 8b04 	vpop	{d8-d9}
 800aa14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa18:	4b90      	ldr	r3, [pc, #576]	; (800ac5c <_dtoa_r+0x2f4>)
 800aa1a:	9300      	str	r3, [sp, #0]
 800aa1c:	3303      	adds	r3, #3
 800aa1e:	e7f3      	b.n	800aa08 <_dtoa_r+0xa0>
 800aa20:	ed9d 7b02 	vldr	d7, [sp, #8]
 800aa24:	2200      	movs	r2, #0
 800aa26:	ec51 0b17 	vmov	r0, r1, d7
 800aa2a:	eeb0 8a47 	vmov.f32	s16, s14
 800aa2e:	eef0 8a67 	vmov.f32	s17, s15
 800aa32:	2300      	movs	r3, #0
 800aa34:	f7f6 f880 	bl	8000b38 <__aeabi_dcmpeq>
 800aa38:	4681      	mov	r9, r0
 800aa3a:	b160      	cbz	r0, 800aa56 <_dtoa_r+0xee>
 800aa3c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800aa3e:	2301      	movs	r3, #1
 800aa40:	6013      	str	r3, [r2, #0]
 800aa42:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	f000 8568 	beq.w	800b51a <_dtoa_r+0xbb2>
 800aa4a:	4b86      	ldr	r3, [pc, #536]	; (800ac64 <_dtoa_r+0x2fc>)
 800aa4c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800aa4e:	6013      	str	r3, [r2, #0]
 800aa50:	3b01      	subs	r3, #1
 800aa52:	9300      	str	r3, [sp, #0]
 800aa54:	e7da      	b.n	800aa0c <_dtoa_r+0xa4>
 800aa56:	aa10      	add	r2, sp, #64	; 0x40
 800aa58:	a911      	add	r1, sp, #68	; 0x44
 800aa5a:	4620      	mov	r0, r4
 800aa5c:	eeb0 0a48 	vmov.f32	s0, s16
 800aa60:	eef0 0a68 	vmov.f32	s1, s17
 800aa64:	f001 f994 	bl	800bd90 <__d2b>
 800aa68:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800aa6c:	4682      	mov	sl, r0
 800aa6e:	2d00      	cmp	r5, #0
 800aa70:	d07f      	beq.n	800ab72 <_dtoa_r+0x20a>
 800aa72:	ee18 3a90 	vmov	r3, s17
 800aa76:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aa7a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800aa7e:	ec51 0b18 	vmov	r0, r1, d8
 800aa82:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800aa86:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800aa8a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800aa8e:	4619      	mov	r1, r3
 800aa90:	2200      	movs	r2, #0
 800aa92:	4b75      	ldr	r3, [pc, #468]	; (800ac68 <_dtoa_r+0x300>)
 800aa94:	f7f5 fc30 	bl	80002f8 <__aeabi_dsub>
 800aa98:	a367      	add	r3, pc, #412	; (adr r3, 800ac38 <_dtoa_r+0x2d0>)
 800aa9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa9e:	f7f5 fde3 	bl	8000668 <__aeabi_dmul>
 800aaa2:	a367      	add	r3, pc, #412	; (adr r3, 800ac40 <_dtoa_r+0x2d8>)
 800aaa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaa8:	f7f5 fc28 	bl	80002fc <__adddf3>
 800aaac:	4606      	mov	r6, r0
 800aaae:	4628      	mov	r0, r5
 800aab0:	460f      	mov	r7, r1
 800aab2:	f7f5 fd6f 	bl	8000594 <__aeabi_i2d>
 800aab6:	a364      	add	r3, pc, #400	; (adr r3, 800ac48 <_dtoa_r+0x2e0>)
 800aab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aabc:	f7f5 fdd4 	bl	8000668 <__aeabi_dmul>
 800aac0:	4602      	mov	r2, r0
 800aac2:	460b      	mov	r3, r1
 800aac4:	4630      	mov	r0, r6
 800aac6:	4639      	mov	r1, r7
 800aac8:	f7f5 fc18 	bl	80002fc <__adddf3>
 800aacc:	4606      	mov	r6, r0
 800aace:	460f      	mov	r7, r1
 800aad0:	f7f6 f87a 	bl	8000bc8 <__aeabi_d2iz>
 800aad4:	2200      	movs	r2, #0
 800aad6:	4683      	mov	fp, r0
 800aad8:	2300      	movs	r3, #0
 800aada:	4630      	mov	r0, r6
 800aadc:	4639      	mov	r1, r7
 800aade:	f7f6 f835 	bl	8000b4c <__aeabi_dcmplt>
 800aae2:	b148      	cbz	r0, 800aaf8 <_dtoa_r+0x190>
 800aae4:	4658      	mov	r0, fp
 800aae6:	f7f5 fd55 	bl	8000594 <__aeabi_i2d>
 800aaea:	4632      	mov	r2, r6
 800aaec:	463b      	mov	r3, r7
 800aaee:	f7f6 f823 	bl	8000b38 <__aeabi_dcmpeq>
 800aaf2:	b908      	cbnz	r0, 800aaf8 <_dtoa_r+0x190>
 800aaf4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800aaf8:	f1bb 0f16 	cmp.w	fp, #22
 800aafc:	d857      	bhi.n	800abae <_dtoa_r+0x246>
 800aafe:	4b5b      	ldr	r3, [pc, #364]	; (800ac6c <_dtoa_r+0x304>)
 800ab00:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ab04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab08:	ec51 0b18 	vmov	r0, r1, d8
 800ab0c:	f7f6 f81e 	bl	8000b4c <__aeabi_dcmplt>
 800ab10:	2800      	cmp	r0, #0
 800ab12:	d04e      	beq.n	800abb2 <_dtoa_r+0x24a>
 800ab14:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ab18:	2300      	movs	r3, #0
 800ab1a:	930c      	str	r3, [sp, #48]	; 0x30
 800ab1c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ab1e:	1b5b      	subs	r3, r3, r5
 800ab20:	1e5a      	subs	r2, r3, #1
 800ab22:	bf45      	ittet	mi
 800ab24:	f1c3 0301 	rsbmi	r3, r3, #1
 800ab28:	9305      	strmi	r3, [sp, #20]
 800ab2a:	2300      	movpl	r3, #0
 800ab2c:	2300      	movmi	r3, #0
 800ab2e:	9206      	str	r2, [sp, #24]
 800ab30:	bf54      	ite	pl
 800ab32:	9305      	strpl	r3, [sp, #20]
 800ab34:	9306      	strmi	r3, [sp, #24]
 800ab36:	f1bb 0f00 	cmp.w	fp, #0
 800ab3a:	db3c      	blt.n	800abb6 <_dtoa_r+0x24e>
 800ab3c:	9b06      	ldr	r3, [sp, #24]
 800ab3e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800ab42:	445b      	add	r3, fp
 800ab44:	9306      	str	r3, [sp, #24]
 800ab46:	2300      	movs	r3, #0
 800ab48:	9308      	str	r3, [sp, #32]
 800ab4a:	9b07      	ldr	r3, [sp, #28]
 800ab4c:	2b09      	cmp	r3, #9
 800ab4e:	d868      	bhi.n	800ac22 <_dtoa_r+0x2ba>
 800ab50:	2b05      	cmp	r3, #5
 800ab52:	bfc4      	itt	gt
 800ab54:	3b04      	subgt	r3, #4
 800ab56:	9307      	strgt	r3, [sp, #28]
 800ab58:	9b07      	ldr	r3, [sp, #28]
 800ab5a:	f1a3 0302 	sub.w	r3, r3, #2
 800ab5e:	bfcc      	ite	gt
 800ab60:	2500      	movgt	r5, #0
 800ab62:	2501      	movle	r5, #1
 800ab64:	2b03      	cmp	r3, #3
 800ab66:	f200 8085 	bhi.w	800ac74 <_dtoa_r+0x30c>
 800ab6a:	e8df f003 	tbb	[pc, r3]
 800ab6e:	3b2e      	.short	0x3b2e
 800ab70:	5839      	.short	0x5839
 800ab72:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800ab76:	441d      	add	r5, r3
 800ab78:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ab7c:	2b20      	cmp	r3, #32
 800ab7e:	bfc1      	itttt	gt
 800ab80:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ab84:	fa08 f803 	lslgt.w	r8, r8, r3
 800ab88:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800ab8c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800ab90:	bfd6      	itet	le
 800ab92:	f1c3 0320 	rsble	r3, r3, #32
 800ab96:	ea48 0003 	orrgt.w	r0, r8, r3
 800ab9a:	fa06 f003 	lslle.w	r0, r6, r3
 800ab9e:	f7f5 fce9 	bl	8000574 <__aeabi_ui2d>
 800aba2:	2201      	movs	r2, #1
 800aba4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800aba8:	3d01      	subs	r5, #1
 800abaa:	920e      	str	r2, [sp, #56]	; 0x38
 800abac:	e76f      	b.n	800aa8e <_dtoa_r+0x126>
 800abae:	2301      	movs	r3, #1
 800abb0:	e7b3      	b.n	800ab1a <_dtoa_r+0x1b2>
 800abb2:	900c      	str	r0, [sp, #48]	; 0x30
 800abb4:	e7b2      	b.n	800ab1c <_dtoa_r+0x1b4>
 800abb6:	9b05      	ldr	r3, [sp, #20]
 800abb8:	eba3 030b 	sub.w	r3, r3, fp
 800abbc:	9305      	str	r3, [sp, #20]
 800abbe:	f1cb 0300 	rsb	r3, fp, #0
 800abc2:	9308      	str	r3, [sp, #32]
 800abc4:	2300      	movs	r3, #0
 800abc6:	930b      	str	r3, [sp, #44]	; 0x2c
 800abc8:	e7bf      	b.n	800ab4a <_dtoa_r+0x1e2>
 800abca:	2300      	movs	r3, #0
 800abcc:	9309      	str	r3, [sp, #36]	; 0x24
 800abce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	dc52      	bgt.n	800ac7a <_dtoa_r+0x312>
 800abd4:	2301      	movs	r3, #1
 800abd6:	9301      	str	r3, [sp, #4]
 800abd8:	9304      	str	r3, [sp, #16]
 800abda:	461a      	mov	r2, r3
 800abdc:	920a      	str	r2, [sp, #40]	; 0x28
 800abde:	e00b      	b.n	800abf8 <_dtoa_r+0x290>
 800abe0:	2301      	movs	r3, #1
 800abe2:	e7f3      	b.n	800abcc <_dtoa_r+0x264>
 800abe4:	2300      	movs	r3, #0
 800abe6:	9309      	str	r3, [sp, #36]	; 0x24
 800abe8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800abea:	445b      	add	r3, fp
 800abec:	9301      	str	r3, [sp, #4]
 800abee:	3301      	adds	r3, #1
 800abf0:	2b01      	cmp	r3, #1
 800abf2:	9304      	str	r3, [sp, #16]
 800abf4:	bfb8      	it	lt
 800abf6:	2301      	movlt	r3, #1
 800abf8:	69e0      	ldr	r0, [r4, #28]
 800abfa:	2100      	movs	r1, #0
 800abfc:	2204      	movs	r2, #4
 800abfe:	f102 0614 	add.w	r6, r2, #20
 800ac02:	429e      	cmp	r6, r3
 800ac04:	d93d      	bls.n	800ac82 <_dtoa_r+0x31a>
 800ac06:	6041      	str	r1, [r0, #4]
 800ac08:	4620      	mov	r0, r4
 800ac0a:	f000 fd9f 	bl	800b74c <_Balloc>
 800ac0e:	9000      	str	r0, [sp, #0]
 800ac10:	2800      	cmp	r0, #0
 800ac12:	d139      	bne.n	800ac88 <_dtoa_r+0x320>
 800ac14:	4b16      	ldr	r3, [pc, #88]	; (800ac70 <_dtoa_r+0x308>)
 800ac16:	4602      	mov	r2, r0
 800ac18:	f240 11af 	movw	r1, #431	; 0x1af
 800ac1c:	e6bd      	b.n	800a99a <_dtoa_r+0x32>
 800ac1e:	2301      	movs	r3, #1
 800ac20:	e7e1      	b.n	800abe6 <_dtoa_r+0x27e>
 800ac22:	2501      	movs	r5, #1
 800ac24:	2300      	movs	r3, #0
 800ac26:	9307      	str	r3, [sp, #28]
 800ac28:	9509      	str	r5, [sp, #36]	; 0x24
 800ac2a:	f04f 33ff 	mov.w	r3, #4294967295
 800ac2e:	9301      	str	r3, [sp, #4]
 800ac30:	9304      	str	r3, [sp, #16]
 800ac32:	2200      	movs	r2, #0
 800ac34:	2312      	movs	r3, #18
 800ac36:	e7d1      	b.n	800abdc <_dtoa_r+0x274>
 800ac38:	636f4361 	.word	0x636f4361
 800ac3c:	3fd287a7 	.word	0x3fd287a7
 800ac40:	8b60c8b3 	.word	0x8b60c8b3
 800ac44:	3fc68a28 	.word	0x3fc68a28
 800ac48:	509f79fb 	.word	0x509f79fb
 800ac4c:	3fd34413 	.word	0x3fd34413
 800ac50:	0800cb3d 	.word	0x0800cb3d
 800ac54:	0800cbf7 	.word	0x0800cbf7
 800ac58:	7ff00000 	.word	0x7ff00000
 800ac5c:	0800cbf3 	.word	0x0800cbf3
 800ac60:	0800cbea 	.word	0x0800cbea
 800ac64:	0800cb1a 	.word	0x0800cb1a
 800ac68:	3ff80000 	.word	0x3ff80000
 800ac6c:	0800cce8 	.word	0x0800cce8
 800ac70:	0800cc4f 	.word	0x0800cc4f
 800ac74:	2301      	movs	r3, #1
 800ac76:	9309      	str	r3, [sp, #36]	; 0x24
 800ac78:	e7d7      	b.n	800ac2a <_dtoa_r+0x2c2>
 800ac7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac7c:	9301      	str	r3, [sp, #4]
 800ac7e:	9304      	str	r3, [sp, #16]
 800ac80:	e7ba      	b.n	800abf8 <_dtoa_r+0x290>
 800ac82:	3101      	adds	r1, #1
 800ac84:	0052      	lsls	r2, r2, #1
 800ac86:	e7ba      	b.n	800abfe <_dtoa_r+0x296>
 800ac88:	69e3      	ldr	r3, [r4, #28]
 800ac8a:	9a00      	ldr	r2, [sp, #0]
 800ac8c:	601a      	str	r2, [r3, #0]
 800ac8e:	9b04      	ldr	r3, [sp, #16]
 800ac90:	2b0e      	cmp	r3, #14
 800ac92:	f200 80a8 	bhi.w	800ade6 <_dtoa_r+0x47e>
 800ac96:	2d00      	cmp	r5, #0
 800ac98:	f000 80a5 	beq.w	800ade6 <_dtoa_r+0x47e>
 800ac9c:	f1bb 0f00 	cmp.w	fp, #0
 800aca0:	dd38      	ble.n	800ad14 <_dtoa_r+0x3ac>
 800aca2:	4bc0      	ldr	r3, [pc, #768]	; (800afa4 <_dtoa_r+0x63c>)
 800aca4:	f00b 020f 	and.w	r2, fp, #15
 800aca8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800acac:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800acb0:	e9d3 6700 	ldrd	r6, r7, [r3]
 800acb4:	ea4f 182b 	mov.w	r8, fp, asr #4
 800acb8:	d019      	beq.n	800acee <_dtoa_r+0x386>
 800acba:	4bbb      	ldr	r3, [pc, #748]	; (800afa8 <_dtoa_r+0x640>)
 800acbc:	ec51 0b18 	vmov	r0, r1, d8
 800acc0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800acc4:	f7f5 fdfa 	bl	80008bc <__aeabi_ddiv>
 800acc8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800accc:	f008 080f 	and.w	r8, r8, #15
 800acd0:	2503      	movs	r5, #3
 800acd2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800afa8 <_dtoa_r+0x640>
 800acd6:	f1b8 0f00 	cmp.w	r8, #0
 800acda:	d10a      	bne.n	800acf2 <_dtoa_r+0x38a>
 800acdc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ace0:	4632      	mov	r2, r6
 800ace2:	463b      	mov	r3, r7
 800ace4:	f7f5 fdea 	bl	80008bc <__aeabi_ddiv>
 800ace8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800acec:	e02b      	b.n	800ad46 <_dtoa_r+0x3de>
 800acee:	2502      	movs	r5, #2
 800acf0:	e7ef      	b.n	800acd2 <_dtoa_r+0x36a>
 800acf2:	f018 0f01 	tst.w	r8, #1
 800acf6:	d008      	beq.n	800ad0a <_dtoa_r+0x3a2>
 800acf8:	4630      	mov	r0, r6
 800acfa:	4639      	mov	r1, r7
 800acfc:	e9d9 2300 	ldrd	r2, r3, [r9]
 800ad00:	f7f5 fcb2 	bl	8000668 <__aeabi_dmul>
 800ad04:	3501      	adds	r5, #1
 800ad06:	4606      	mov	r6, r0
 800ad08:	460f      	mov	r7, r1
 800ad0a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800ad0e:	f109 0908 	add.w	r9, r9, #8
 800ad12:	e7e0      	b.n	800acd6 <_dtoa_r+0x36e>
 800ad14:	f000 809f 	beq.w	800ae56 <_dtoa_r+0x4ee>
 800ad18:	f1cb 0600 	rsb	r6, fp, #0
 800ad1c:	4ba1      	ldr	r3, [pc, #644]	; (800afa4 <_dtoa_r+0x63c>)
 800ad1e:	4fa2      	ldr	r7, [pc, #648]	; (800afa8 <_dtoa_r+0x640>)
 800ad20:	f006 020f 	and.w	r2, r6, #15
 800ad24:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ad28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad2c:	ec51 0b18 	vmov	r0, r1, d8
 800ad30:	f7f5 fc9a 	bl	8000668 <__aeabi_dmul>
 800ad34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ad38:	1136      	asrs	r6, r6, #4
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	2502      	movs	r5, #2
 800ad3e:	2e00      	cmp	r6, #0
 800ad40:	d17e      	bne.n	800ae40 <_dtoa_r+0x4d8>
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d1d0      	bne.n	800ace8 <_dtoa_r+0x380>
 800ad46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ad48:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	f000 8084 	beq.w	800ae5a <_dtoa_r+0x4f2>
 800ad52:	4b96      	ldr	r3, [pc, #600]	; (800afac <_dtoa_r+0x644>)
 800ad54:	2200      	movs	r2, #0
 800ad56:	4640      	mov	r0, r8
 800ad58:	4649      	mov	r1, r9
 800ad5a:	f7f5 fef7 	bl	8000b4c <__aeabi_dcmplt>
 800ad5e:	2800      	cmp	r0, #0
 800ad60:	d07b      	beq.n	800ae5a <_dtoa_r+0x4f2>
 800ad62:	9b04      	ldr	r3, [sp, #16]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d078      	beq.n	800ae5a <_dtoa_r+0x4f2>
 800ad68:	9b01      	ldr	r3, [sp, #4]
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	dd39      	ble.n	800ade2 <_dtoa_r+0x47a>
 800ad6e:	4b90      	ldr	r3, [pc, #576]	; (800afb0 <_dtoa_r+0x648>)
 800ad70:	2200      	movs	r2, #0
 800ad72:	4640      	mov	r0, r8
 800ad74:	4649      	mov	r1, r9
 800ad76:	f7f5 fc77 	bl	8000668 <__aeabi_dmul>
 800ad7a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ad7e:	9e01      	ldr	r6, [sp, #4]
 800ad80:	f10b 37ff 	add.w	r7, fp, #4294967295
 800ad84:	3501      	adds	r5, #1
 800ad86:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ad8a:	4628      	mov	r0, r5
 800ad8c:	f7f5 fc02 	bl	8000594 <__aeabi_i2d>
 800ad90:	4642      	mov	r2, r8
 800ad92:	464b      	mov	r3, r9
 800ad94:	f7f5 fc68 	bl	8000668 <__aeabi_dmul>
 800ad98:	4b86      	ldr	r3, [pc, #536]	; (800afb4 <_dtoa_r+0x64c>)
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	f7f5 faae 	bl	80002fc <__adddf3>
 800ada0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800ada4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ada8:	9303      	str	r3, [sp, #12]
 800adaa:	2e00      	cmp	r6, #0
 800adac:	d158      	bne.n	800ae60 <_dtoa_r+0x4f8>
 800adae:	4b82      	ldr	r3, [pc, #520]	; (800afb8 <_dtoa_r+0x650>)
 800adb0:	2200      	movs	r2, #0
 800adb2:	4640      	mov	r0, r8
 800adb4:	4649      	mov	r1, r9
 800adb6:	f7f5 fa9f 	bl	80002f8 <__aeabi_dsub>
 800adba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800adbe:	4680      	mov	r8, r0
 800adc0:	4689      	mov	r9, r1
 800adc2:	f7f5 fee1 	bl	8000b88 <__aeabi_dcmpgt>
 800adc6:	2800      	cmp	r0, #0
 800adc8:	f040 8296 	bne.w	800b2f8 <_dtoa_r+0x990>
 800adcc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800add0:	4640      	mov	r0, r8
 800add2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800add6:	4649      	mov	r1, r9
 800add8:	f7f5 feb8 	bl	8000b4c <__aeabi_dcmplt>
 800addc:	2800      	cmp	r0, #0
 800adde:	f040 8289 	bne.w	800b2f4 <_dtoa_r+0x98c>
 800ade2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800ade6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ade8:	2b00      	cmp	r3, #0
 800adea:	f2c0 814e 	blt.w	800b08a <_dtoa_r+0x722>
 800adee:	f1bb 0f0e 	cmp.w	fp, #14
 800adf2:	f300 814a 	bgt.w	800b08a <_dtoa_r+0x722>
 800adf6:	4b6b      	ldr	r3, [pc, #428]	; (800afa4 <_dtoa_r+0x63c>)
 800adf8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800adfc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ae00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	f280 80dc 	bge.w	800afc0 <_dtoa_r+0x658>
 800ae08:	9b04      	ldr	r3, [sp, #16]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	f300 80d8 	bgt.w	800afc0 <_dtoa_r+0x658>
 800ae10:	f040 826f 	bne.w	800b2f2 <_dtoa_r+0x98a>
 800ae14:	4b68      	ldr	r3, [pc, #416]	; (800afb8 <_dtoa_r+0x650>)
 800ae16:	2200      	movs	r2, #0
 800ae18:	4640      	mov	r0, r8
 800ae1a:	4649      	mov	r1, r9
 800ae1c:	f7f5 fc24 	bl	8000668 <__aeabi_dmul>
 800ae20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ae24:	f7f5 fea6 	bl	8000b74 <__aeabi_dcmpge>
 800ae28:	9e04      	ldr	r6, [sp, #16]
 800ae2a:	4637      	mov	r7, r6
 800ae2c:	2800      	cmp	r0, #0
 800ae2e:	f040 8245 	bne.w	800b2bc <_dtoa_r+0x954>
 800ae32:	9d00      	ldr	r5, [sp, #0]
 800ae34:	2331      	movs	r3, #49	; 0x31
 800ae36:	f805 3b01 	strb.w	r3, [r5], #1
 800ae3a:	f10b 0b01 	add.w	fp, fp, #1
 800ae3e:	e241      	b.n	800b2c4 <_dtoa_r+0x95c>
 800ae40:	07f2      	lsls	r2, r6, #31
 800ae42:	d505      	bpl.n	800ae50 <_dtoa_r+0x4e8>
 800ae44:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ae48:	f7f5 fc0e 	bl	8000668 <__aeabi_dmul>
 800ae4c:	3501      	adds	r5, #1
 800ae4e:	2301      	movs	r3, #1
 800ae50:	1076      	asrs	r6, r6, #1
 800ae52:	3708      	adds	r7, #8
 800ae54:	e773      	b.n	800ad3e <_dtoa_r+0x3d6>
 800ae56:	2502      	movs	r5, #2
 800ae58:	e775      	b.n	800ad46 <_dtoa_r+0x3de>
 800ae5a:	9e04      	ldr	r6, [sp, #16]
 800ae5c:	465f      	mov	r7, fp
 800ae5e:	e792      	b.n	800ad86 <_dtoa_r+0x41e>
 800ae60:	9900      	ldr	r1, [sp, #0]
 800ae62:	4b50      	ldr	r3, [pc, #320]	; (800afa4 <_dtoa_r+0x63c>)
 800ae64:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ae68:	4431      	add	r1, r6
 800ae6a:	9102      	str	r1, [sp, #8]
 800ae6c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ae6e:	eeb0 9a47 	vmov.f32	s18, s14
 800ae72:	eef0 9a67 	vmov.f32	s19, s15
 800ae76:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ae7a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ae7e:	2900      	cmp	r1, #0
 800ae80:	d044      	beq.n	800af0c <_dtoa_r+0x5a4>
 800ae82:	494e      	ldr	r1, [pc, #312]	; (800afbc <_dtoa_r+0x654>)
 800ae84:	2000      	movs	r0, #0
 800ae86:	f7f5 fd19 	bl	80008bc <__aeabi_ddiv>
 800ae8a:	ec53 2b19 	vmov	r2, r3, d9
 800ae8e:	f7f5 fa33 	bl	80002f8 <__aeabi_dsub>
 800ae92:	9d00      	ldr	r5, [sp, #0]
 800ae94:	ec41 0b19 	vmov	d9, r0, r1
 800ae98:	4649      	mov	r1, r9
 800ae9a:	4640      	mov	r0, r8
 800ae9c:	f7f5 fe94 	bl	8000bc8 <__aeabi_d2iz>
 800aea0:	4606      	mov	r6, r0
 800aea2:	f7f5 fb77 	bl	8000594 <__aeabi_i2d>
 800aea6:	4602      	mov	r2, r0
 800aea8:	460b      	mov	r3, r1
 800aeaa:	4640      	mov	r0, r8
 800aeac:	4649      	mov	r1, r9
 800aeae:	f7f5 fa23 	bl	80002f8 <__aeabi_dsub>
 800aeb2:	3630      	adds	r6, #48	; 0x30
 800aeb4:	f805 6b01 	strb.w	r6, [r5], #1
 800aeb8:	ec53 2b19 	vmov	r2, r3, d9
 800aebc:	4680      	mov	r8, r0
 800aebe:	4689      	mov	r9, r1
 800aec0:	f7f5 fe44 	bl	8000b4c <__aeabi_dcmplt>
 800aec4:	2800      	cmp	r0, #0
 800aec6:	d164      	bne.n	800af92 <_dtoa_r+0x62a>
 800aec8:	4642      	mov	r2, r8
 800aeca:	464b      	mov	r3, r9
 800aecc:	4937      	ldr	r1, [pc, #220]	; (800afac <_dtoa_r+0x644>)
 800aece:	2000      	movs	r0, #0
 800aed0:	f7f5 fa12 	bl	80002f8 <__aeabi_dsub>
 800aed4:	ec53 2b19 	vmov	r2, r3, d9
 800aed8:	f7f5 fe38 	bl	8000b4c <__aeabi_dcmplt>
 800aedc:	2800      	cmp	r0, #0
 800aede:	f040 80b6 	bne.w	800b04e <_dtoa_r+0x6e6>
 800aee2:	9b02      	ldr	r3, [sp, #8]
 800aee4:	429d      	cmp	r5, r3
 800aee6:	f43f af7c 	beq.w	800ade2 <_dtoa_r+0x47a>
 800aeea:	4b31      	ldr	r3, [pc, #196]	; (800afb0 <_dtoa_r+0x648>)
 800aeec:	ec51 0b19 	vmov	r0, r1, d9
 800aef0:	2200      	movs	r2, #0
 800aef2:	f7f5 fbb9 	bl	8000668 <__aeabi_dmul>
 800aef6:	4b2e      	ldr	r3, [pc, #184]	; (800afb0 <_dtoa_r+0x648>)
 800aef8:	ec41 0b19 	vmov	d9, r0, r1
 800aefc:	2200      	movs	r2, #0
 800aefe:	4640      	mov	r0, r8
 800af00:	4649      	mov	r1, r9
 800af02:	f7f5 fbb1 	bl	8000668 <__aeabi_dmul>
 800af06:	4680      	mov	r8, r0
 800af08:	4689      	mov	r9, r1
 800af0a:	e7c5      	b.n	800ae98 <_dtoa_r+0x530>
 800af0c:	ec51 0b17 	vmov	r0, r1, d7
 800af10:	f7f5 fbaa 	bl	8000668 <__aeabi_dmul>
 800af14:	9b02      	ldr	r3, [sp, #8]
 800af16:	9d00      	ldr	r5, [sp, #0]
 800af18:	930f      	str	r3, [sp, #60]	; 0x3c
 800af1a:	ec41 0b19 	vmov	d9, r0, r1
 800af1e:	4649      	mov	r1, r9
 800af20:	4640      	mov	r0, r8
 800af22:	f7f5 fe51 	bl	8000bc8 <__aeabi_d2iz>
 800af26:	4606      	mov	r6, r0
 800af28:	f7f5 fb34 	bl	8000594 <__aeabi_i2d>
 800af2c:	3630      	adds	r6, #48	; 0x30
 800af2e:	4602      	mov	r2, r0
 800af30:	460b      	mov	r3, r1
 800af32:	4640      	mov	r0, r8
 800af34:	4649      	mov	r1, r9
 800af36:	f7f5 f9df 	bl	80002f8 <__aeabi_dsub>
 800af3a:	f805 6b01 	strb.w	r6, [r5], #1
 800af3e:	9b02      	ldr	r3, [sp, #8]
 800af40:	429d      	cmp	r5, r3
 800af42:	4680      	mov	r8, r0
 800af44:	4689      	mov	r9, r1
 800af46:	f04f 0200 	mov.w	r2, #0
 800af4a:	d124      	bne.n	800af96 <_dtoa_r+0x62e>
 800af4c:	4b1b      	ldr	r3, [pc, #108]	; (800afbc <_dtoa_r+0x654>)
 800af4e:	ec51 0b19 	vmov	r0, r1, d9
 800af52:	f7f5 f9d3 	bl	80002fc <__adddf3>
 800af56:	4602      	mov	r2, r0
 800af58:	460b      	mov	r3, r1
 800af5a:	4640      	mov	r0, r8
 800af5c:	4649      	mov	r1, r9
 800af5e:	f7f5 fe13 	bl	8000b88 <__aeabi_dcmpgt>
 800af62:	2800      	cmp	r0, #0
 800af64:	d173      	bne.n	800b04e <_dtoa_r+0x6e6>
 800af66:	ec53 2b19 	vmov	r2, r3, d9
 800af6a:	4914      	ldr	r1, [pc, #80]	; (800afbc <_dtoa_r+0x654>)
 800af6c:	2000      	movs	r0, #0
 800af6e:	f7f5 f9c3 	bl	80002f8 <__aeabi_dsub>
 800af72:	4602      	mov	r2, r0
 800af74:	460b      	mov	r3, r1
 800af76:	4640      	mov	r0, r8
 800af78:	4649      	mov	r1, r9
 800af7a:	f7f5 fde7 	bl	8000b4c <__aeabi_dcmplt>
 800af7e:	2800      	cmp	r0, #0
 800af80:	f43f af2f 	beq.w	800ade2 <_dtoa_r+0x47a>
 800af84:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800af86:	1e6b      	subs	r3, r5, #1
 800af88:	930f      	str	r3, [sp, #60]	; 0x3c
 800af8a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800af8e:	2b30      	cmp	r3, #48	; 0x30
 800af90:	d0f8      	beq.n	800af84 <_dtoa_r+0x61c>
 800af92:	46bb      	mov	fp, r7
 800af94:	e04a      	b.n	800b02c <_dtoa_r+0x6c4>
 800af96:	4b06      	ldr	r3, [pc, #24]	; (800afb0 <_dtoa_r+0x648>)
 800af98:	f7f5 fb66 	bl	8000668 <__aeabi_dmul>
 800af9c:	4680      	mov	r8, r0
 800af9e:	4689      	mov	r9, r1
 800afa0:	e7bd      	b.n	800af1e <_dtoa_r+0x5b6>
 800afa2:	bf00      	nop
 800afa4:	0800cce8 	.word	0x0800cce8
 800afa8:	0800ccc0 	.word	0x0800ccc0
 800afac:	3ff00000 	.word	0x3ff00000
 800afb0:	40240000 	.word	0x40240000
 800afb4:	401c0000 	.word	0x401c0000
 800afb8:	40140000 	.word	0x40140000
 800afbc:	3fe00000 	.word	0x3fe00000
 800afc0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800afc4:	9d00      	ldr	r5, [sp, #0]
 800afc6:	4642      	mov	r2, r8
 800afc8:	464b      	mov	r3, r9
 800afca:	4630      	mov	r0, r6
 800afcc:	4639      	mov	r1, r7
 800afce:	f7f5 fc75 	bl	80008bc <__aeabi_ddiv>
 800afd2:	f7f5 fdf9 	bl	8000bc8 <__aeabi_d2iz>
 800afd6:	9001      	str	r0, [sp, #4]
 800afd8:	f7f5 fadc 	bl	8000594 <__aeabi_i2d>
 800afdc:	4642      	mov	r2, r8
 800afde:	464b      	mov	r3, r9
 800afe0:	f7f5 fb42 	bl	8000668 <__aeabi_dmul>
 800afe4:	4602      	mov	r2, r0
 800afe6:	460b      	mov	r3, r1
 800afe8:	4630      	mov	r0, r6
 800afea:	4639      	mov	r1, r7
 800afec:	f7f5 f984 	bl	80002f8 <__aeabi_dsub>
 800aff0:	9e01      	ldr	r6, [sp, #4]
 800aff2:	9f04      	ldr	r7, [sp, #16]
 800aff4:	3630      	adds	r6, #48	; 0x30
 800aff6:	f805 6b01 	strb.w	r6, [r5], #1
 800affa:	9e00      	ldr	r6, [sp, #0]
 800affc:	1bae      	subs	r6, r5, r6
 800affe:	42b7      	cmp	r7, r6
 800b000:	4602      	mov	r2, r0
 800b002:	460b      	mov	r3, r1
 800b004:	d134      	bne.n	800b070 <_dtoa_r+0x708>
 800b006:	f7f5 f979 	bl	80002fc <__adddf3>
 800b00a:	4642      	mov	r2, r8
 800b00c:	464b      	mov	r3, r9
 800b00e:	4606      	mov	r6, r0
 800b010:	460f      	mov	r7, r1
 800b012:	f7f5 fdb9 	bl	8000b88 <__aeabi_dcmpgt>
 800b016:	b9c8      	cbnz	r0, 800b04c <_dtoa_r+0x6e4>
 800b018:	4642      	mov	r2, r8
 800b01a:	464b      	mov	r3, r9
 800b01c:	4630      	mov	r0, r6
 800b01e:	4639      	mov	r1, r7
 800b020:	f7f5 fd8a 	bl	8000b38 <__aeabi_dcmpeq>
 800b024:	b110      	cbz	r0, 800b02c <_dtoa_r+0x6c4>
 800b026:	9b01      	ldr	r3, [sp, #4]
 800b028:	07db      	lsls	r3, r3, #31
 800b02a:	d40f      	bmi.n	800b04c <_dtoa_r+0x6e4>
 800b02c:	4651      	mov	r1, sl
 800b02e:	4620      	mov	r0, r4
 800b030:	f000 fbcc 	bl	800b7cc <_Bfree>
 800b034:	2300      	movs	r3, #0
 800b036:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b038:	702b      	strb	r3, [r5, #0]
 800b03a:	f10b 0301 	add.w	r3, fp, #1
 800b03e:	6013      	str	r3, [r2, #0]
 800b040:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b042:	2b00      	cmp	r3, #0
 800b044:	f43f ace2 	beq.w	800aa0c <_dtoa_r+0xa4>
 800b048:	601d      	str	r5, [r3, #0]
 800b04a:	e4df      	b.n	800aa0c <_dtoa_r+0xa4>
 800b04c:	465f      	mov	r7, fp
 800b04e:	462b      	mov	r3, r5
 800b050:	461d      	mov	r5, r3
 800b052:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b056:	2a39      	cmp	r2, #57	; 0x39
 800b058:	d106      	bne.n	800b068 <_dtoa_r+0x700>
 800b05a:	9a00      	ldr	r2, [sp, #0]
 800b05c:	429a      	cmp	r2, r3
 800b05e:	d1f7      	bne.n	800b050 <_dtoa_r+0x6e8>
 800b060:	9900      	ldr	r1, [sp, #0]
 800b062:	2230      	movs	r2, #48	; 0x30
 800b064:	3701      	adds	r7, #1
 800b066:	700a      	strb	r2, [r1, #0]
 800b068:	781a      	ldrb	r2, [r3, #0]
 800b06a:	3201      	adds	r2, #1
 800b06c:	701a      	strb	r2, [r3, #0]
 800b06e:	e790      	b.n	800af92 <_dtoa_r+0x62a>
 800b070:	4ba3      	ldr	r3, [pc, #652]	; (800b300 <_dtoa_r+0x998>)
 800b072:	2200      	movs	r2, #0
 800b074:	f7f5 faf8 	bl	8000668 <__aeabi_dmul>
 800b078:	2200      	movs	r2, #0
 800b07a:	2300      	movs	r3, #0
 800b07c:	4606      	mov	r6, r0
 800b07e:	460f      	mov	r7, r1
 800b080:	f7f5 fd5a 	bl	8000b38 <__aeabi_dcmpeq>
 800b084:	2800      	cmp	r0, #0
 800b086:	d09e      	beq.n	800afc6 <_dtoa_r+0x65e>
 800b088:	e7d0      	b.n	800b02c <_dtoa_r+0x6c4>
 800b08a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b08c:	2a00      	cmp	r2, #0
 800b08e:	f000 80ca 	beq.w	800b226 <_dtoa_r+0x8be>
 800b092:	9a07      	ldr	r2, [sp, #28]
 800b094:	2a01      	cmp	r2, #1
 800b096:	f300 80ad 	bgt.w	800b1f4 <_dtoa_r+0x88c>
 800b09a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b09c:	2a00      	cmp	r2, #0
 800b09e:	f000 80a5 	beq.w	800b1ec <_dtoa_r+0x884>
 800b0a2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b0a6:	9e08      	ldr	r6, [sp, #32]
 800b0a8:	9d05      	ldr	r5, [sp, #20]
 800b0aa:	9a05      	ldr	r2, [sp, #20]
 800b0ac:	441a      	add	r2, r3
 800b0ae:	9205      	str	r2, [sp, #20]
 800b0b0:	9a06      	ldr	r2, [sp, #24]
 800b0b2:	2101      	movs	r1, #1
 800b0b4:	441a      	add	r2, r3
 800b0b6:	4620      	mov	r0, r4
 800b0b8:	9206      	str	r2, [sp, #24]
 800b0ba:	f000 fc3d 	bl	800b938 <__i2b>
 800b0be:	4607      	mov	r7, r0
 800b0c0:	b165      	cbz	r5, 800b0dc <_dtoa_r+0x774>
 800b0c2:	9b06      	ldr	r3, [sp, #24]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	dd09      	ble.n	800b0dc <_dtoa_r+0x774>
 800b0c8:	42ab      	cmp	r3, r5
 800b0ca:	9a05      	ldr	r2, [sp, #20]
 800b0cc:	bfa8      	it	ge
 800b0ce:	462b      	movge	r3, r5
 800b0d0:	1ad2      	subs	r2, r2, r3
 800b0d2:	9205      	str	r2, [sp, #20]
 800b0d4:	9a06      	ldr	r2, [sp, #24]
 800b0d6:	1aed      	subs	r5, r5, r3
 800b0d8:	1ad3      	subs	r3, r2, r3
 800b0da:	9306      	str	r3, [sp, #24]
 800b0dc:	9b08      	ldr	r3, [sp, #32]
 800b0de:	b1f3      	cbz	r3, 800b11e <_dtoa_r+0x7b6>
 800b0e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	f000 80a3 	beq.w	800b22e <_dtoa_r+0x8c6>
 800b0e8:	2e00      	cmp	r6, #0
 800b0ea:	dd10      	ble.n	800b10e <_dtoa_r+0x7a6>
 800b0ec:	4639      	mov	r1, r7
 800b0ee:	4632      	mov	r2, r6
 800b0f0:	4620      	mov	r0, r4
 800b0f2:	f000 fce1 	bl	800bab8 <__pow5mult>
 800b0f6:	4652      	mov	r2, sl
 800b0f8:	4601      	mov	r1, r0
 800b0fa:	4607      	mov	r7, r0
 800b0fc:	4620      	mov	r0, r4
 800b0fe:	f000 fc31 	bl	800b964 <__multiply>
 800b102:	4651      	mov	r1, sl
 800b104:	4680      	mov	r8, r0
 800b106:	4620      	mov	r0, r4
 800b108:	f000 fb60 	bl	800b7cc <_Bfree>
 800b10c:	46c2      	mov	sl, r8
 800b10e:	9b08      	ldr	r3, [sp, #32]
 800b110:	1b9a      	subs	r2, r3, r6
 800b112:	d004      	beq.n	800b11e <_dtoa_r+0x7b6>
 800b114:	4651      	mov	r1, sl
 800b116:	4620      	mov	r0, r4
 800b118:	f000 fcce 	bl	800bab8 <__pow5mult>
 800b11c:	4682      	mov	sl, r0
 800b11e:	2101      	movs	r1, #1
 800b120:	4620      	mov	r0, r4
 800b122:	f000 fc09 	bl	800b938 <__i2b>
 800b126:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b128:	2b00      	cmp	r3, #0
 800b12a:	4606      	mov	r6, r0
 800b12c:	f340 8081 	ble.w	800b232 <_dtoa_r+0x8ca>
 800b130:	461a      	mov	r2, r3
 800b132:	4601      	mov	r1, r0
 800b134:	4620      	mov	r0, r4
 800b136:	f000 fcbf 	bl	800bab8 <__pow5mult>
 800b13a:	9b07      	ldr	r3, [sp, #28]
 800b13c:	2b01      	cmp	r3, #1
 800b13e:	4606      	mov	r6, r0
 800b140:	dd7a      	ble.n	800b238 <_dtoa_r+0x8d0>
 800b142:	f04f 0800 	mov.w	r8, #0
 800b146:	6933      	ldr	r3, [r6, #16]
 800b148:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b14c:	6918      	ldr	r0, [r3, #16]
 800b14e:	f000 fba5 	bl	800b89c <__hi0bits>
 800b152:	f1c0 0020 	rsb	r0, r0, #32
 800b156:	9b06      	ldr	r3, [sp, #24]
 800b158:	4418      	add	r0, r3
 800b15a:	f010 001f 	ands.w	r0, r0, #31
 800b15e:	f000 8094 	beq.w	800b28a <_dtoa_r+0x922>
 800b162:	f1c0 0320 	rsb	r3, r0, #32
 800b166:	2b04      	cmp	r3, #4
 800b168:	f340 8085 	ble.w	800b276 <_dtoa_r+0x90e>
 800b16c:	9b05      	ldr	r3, [sp, #20]
 800b16e:	f1c0 001c 	rsb	r0, r0, #28
 800b172:	4403      	add	r3, r0
 800b174:	9305      	str	r3, [sp, #20]
 800b176:	9b06      	ldr	r3, [sp, #24]
 800b178:	4403      	add	r3, r0
 800b17a:	4405      	add	r5, r0
 800b17c:	9306      	str	r3, [sp, #24]
 800b17e:	9b05      	ldr	r3, [sp, #20]
 800b180:	2b00      	cmp	r3, #0
 800b182:	dd05      	ble.n	800b190 <_dtoa_r+0x828>
 800b184:	4651      	mov	r1, sl
 800b186:	461a      	mov	r2, r3
 800b188:	4620      	mov	r0, r4
 800b18a:	f000 fcef 	bl	800bb6c <__lshift>
 800b18e:	4682      	mov	sl, r0
 800b190:	9b06      	ldr	r3, [sp, #24]
 800b192:	2b00      	cmp	r3, #0
 800b194:	dd05      	ble.n	800b1a2 <_dtoa_r+0x83a>
 800b196:	4631      	mov	r1, r6
 800b198:	461a      	mov	r2, r3
 800b19a:	4620      	mov	r0, r4
 800b19c:	f000 fce6 	bl	800bb6c <__lshift>
 800b1a0:	4606      	mov	r6, r0
 800b1a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d072      	beq.n	800b28e <_dtoa_r+0x926>
 800b1a8:	4631      	mov	r1, r6
 800b1aa:	4650      	mov	r0, sl
 800b1ac:	f000 fd4a 	bl	800bc44 <__mcmp>
 800b1b0:	2800      	cmp	r0, #0
 800b1b2:	da6c      	bge.n	800b28e <_dtoa_r+0x926>
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	4651      	mov	r1, sl
 800b1b8:	220a      	movs	r2, #10
 800b1ba:	4620      	mov	r0, r4
 800b1bc:	f000 fb28 	bl	800b810 <__multadd>
 800b1c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1c2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b1c6:	4682      	mov	sl, r0
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	f000 81b0 	beq.w	800b52e <_dtoa_r+0xbc6>
 800b1ce:	2300      	movs	r3, #0
 800b1d0:	4639      	mov	r1, r7
 800b1d2:	220a      	movs	r2, #10
 800b1d4:	4620      	mov	r0, r4
 800b1d6:	f000 fb1b 	bl	800b810 <__multadd>
 800b1da:	9b01      	ldr	r3, [sp, #4]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	4607      	mov	r7, r0
 800b1e0:	f300 8096 	bgt.w	800b310 <_dtoa_r+0x9a8>
 800b1e4:	9b07      	ldr	r3, [sp, #28]
 800b1e6:	2b02      	cmp	r3, #2
 800b1e8:	dc59      	bgt.n	800b29e <_dtoa_r+0x936>
 800b1ea:	e091      	b.n	800b310 <_dtoa_r+0x9a8>
 800b1ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b1ee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b1f2:	e758      	b.n	800b0a6 <_dtoa_r+0x73e>
 800b1f4:	9b04      	ldr	r3, [sp, #16]
 800b1f6:	1e5e      	subs	r6, r3, #1
 800b1f8:	9b08      	ldr	r3, [sp, #32]
 800b1fa:	42b3      	cmp	r3, r6
 800b1fc:	bfbf      	itttt	lt
 800b1fe:	9b08      	ldrlt	r3, [sp, #32]
 800b200:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800b202:	9608      	strlt	r6, [sp, #32]
 800b204:	1af3      	sublt	r3, r6, r3
 800b206:	bfb4      	ite	lt
 800b208:	18d2      	addlt	r2, r2, r3
 800b20a:	1b9e      	subge	r6, r3, r6
 800b20c:	9b04      	ldr	r3, [sp, #16]
 800b20e:	bfbc      	itt	lt
 800b210:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800b212:	2600      	movlt	r6, #0
 800b214:	2b00      	cmp	r3, #0
 800b216:	bfb7      	itett	lt
 800b218:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800b21c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800b220:	1a9d      	sublt	r5, r3, r2
 800b222:	2300      	movlt	r3, #0
 800b224:	e741      	b.n	800b0aa <_dtoa_r+0x742>
 800b226:	9e08      	ldr	r6, [sp, #32]
 800b228:	9d05      	ldr	r5, [sp, #20]
 800b22a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b22c:	e748      	b.n	800b0c0 <_dtoa_r+0x758>
 800b22e:	9a08      	ldr	r2, [sp, #32]
 800b230:	e770      	b.n	800b114 <_dtoa_r+0x7ac>
 800b232:	9b07      	ldr	r3, [sp, #28]
 800b234:	2b01      	cmp	r3, #1
 800b236:	dc19      	bgt.n	800b26c <_dtoa_r+0x904>
 800b238:	9b02      	ldr	r3, [sp, #8]
 800b23a:	b9bb      	cbnz	r3, 800b26c <_dtoa_r+0x904>
 800b23c:	9b03      	ldr	r3, [sp, #12]
 800b23e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b242:	b99b      	cbnz	r3, 800b26c <_dtoa_r+0x904>
 800b244:	9b03      	ldr	r3, [sp, #12]
 800b246:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b24a:	0d1b      	lsrs	r3, r3, #20
 800b24c:	051b      	lsls	r3, r3, #20
 800b24e:	b183      	cbz	r3, 800b272 <_dtoa_r+0x90a>
 800b250:	9b05      	ldr	r3, [sp, #20]
 800b252:	3301      	adds	r3, #1
 800b254:	9305      	str	r3, [sp, #20]
 800b256:	9b06      	ldr	r3, [sp, #24]
 800b258:	3301      	adds	r3, #1
 800b25a:	9306      	str	r3, [sp, #24]
 800b25c:	f04f 0801 	mov.w	r8, #1
 800b260:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b262:	2b00      	cmp	r3, #0
 800b264:	f47f af6f 	bne.w	800b146 <_dtoa_r+0x7de>
 800b268:	2001      	movs	r0, #1
 800b26a:	e774      	b.n	800b156 <_dtoa_r+0x7ee>
 800b26c:	f04f 0800 	mov.w	r8, #0
 800b270:	e7f6      	b.n	800b260 <_dtoa_r+0x8f8>
 800b272:	4698      	mov	r8, r3
 800b274:	e7f4      	b.n	800b260 <_dtoa_r+0x8f8>
 800b276:	d082      	beq.n	800b17e <_dtoa_r+0x816>
 800b278:	9a05      	ldr	r2, [sp, #20]
 800b27a:	331c      	adds	r3, #28
 800b27c:	441a      	add	r2, r3
 800b27e:	9205      	str	r2, [sp, #20]
 800b280:	9a06      	ldr	r2, [sp, #24]
 800b282:	441a      	add	r2, r3
 800b284:	441d      	add	r5, r3
 800b286:	9206      	str	r2, [sp, #24]
 800b288:	e779      	b.n	800b17e <_dtoa_r+0x816>
 800b28a:	4603      	mov	r3, r0
 800b28c:	e7f4      	b.n	800b278 <_dtoa_r+0x910>
 800b28e:	9b04      	ldr	r3, [sp, #16]
 800b290:	2b00      	cmp	r3, #0
 800b292:	dc37      	bgt.n	800b304 <_dtoa_r+0x99c>
 800b294:	9b07      	ldr	r3, [sp, #28]
 800b296:	2b02      	cmp	r3, #2
 800b298:	dd34      	ble.n	800b304 <_dtoa_r+0x99c>
 800b29a:	9b04      	ldr	r3, [sp, #16]
 800b29c:	9301      	str	r3, [sp, #4]
 800b29e:	9b01      	ldr	r3, [sp, #4]
 800b2a0:	b963      	cbnz	r3, 800b2bc <_dtoa_r+0x954>
 800b2a2:	4631      	mov	r1, r6
 800b2a4:	2205      	movs	r2, #5
 800b2a6:	4620      	mov	r0, r4
 800b2a8:	f000 fab2 	bl	800b810 <__multadd>
 800b2ac:	4601      	mov	r1, r0
 800b2ae:	4606      	mov	r6, r0
 800b2b0:	4650      	mov	r0, sl
 800b2b2:	f000 fcc7 	bl	800bc44 <__mcmp>
 800b2b6:	2800      	cmp	r0, #0
 800b2b8:	f73f adbb 	bgt.w	800ae32 <_dtoa_r+0x4ca>
 800b2bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b2be:	9d00      	ldr	r5, [sp, #0]
 800b2c0:	ea6f 0b03 	mvn.w	fp, r3
 800b2c4:	f04f 0800 	mov.w	r8, #0
 800b2c8:	4631      	mov	r1, r6
 800b2ca:	4620      	mov	r0, r4
 800b2cc:	f000 fa7e 	bl	800b7cc <_Bfree>
 800b2d0:	2f00      	cmp	r7, #0
 800b2d2:	f43f aeab 	beq.w	800b02c <_dtoa_r+0x6c4>
 800b2d6:	f1b8 0f00 	cmp.w	r8, #0
 800b2da:	d005      	beq.n	800b2e8 <_dtoa_r+0x980>
 800b2dc:	45b8      	cmp	r8, r7
 800b2de:	d003      	beq.n	800b2e8 <_dtoa_r+0x980>
 800b2e0:	4641      	mov	r1, r8
 800b2e2:	4620      	mov	r0, r4
 800b2e4:	f000 fa72 	bl	800b7cc <_Bfree>
 800b2e8:	4639      	mov	r1, r7
 800b2ea:	4620      	mov	r0, r4
 800b2ec:	f000 fa6e 	bl	800b7cc <_Bfree>
 800b2f0:	e69c      	b.n	800b02c <_dtoa_r+0x6c4>
 800b2f2:	2600      	movs	r6, #0
 800b2f4:	4637      	mov	r7, r6
 800b2f6:	e7e1      	b.n	800b2bc <_dtoa_r+0x954>
 800b2f8:	46bb      	mov	fp, r7
 800b2fa:	4637      	mov	r7, r6
 800b2fc:	e599      	b.n	800ae32 <_dtoa_r+0x4ca>
 800b2fe:	bf00      	nop
 800b300:	40240000 	.word	0x40240000
 800b304:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b306:	2b00      	cmp	r3, #0
 800b308:	f000 80c8 	beq.w	800b49c <_dtoa_r+0xb34>
 800b30c:	9b04      	ldr	r3, [sp, #16]
 800b30e:	9301      	str	r3, [sp, #4]
 800b310:	2d00      	cmp	r5, #0
 800b312:	dd05      	ble.n	800b320 <_dtoa_r+0x9b8>
 800b314:	4639      	mov	r1, r7
 800b316:	462a      	mov	r2, r5
 800b318:	4620      	mov	r0, r4
 800b31a:	f000 fc27 	bl	800bb6c <__lshift>
 800b31e:	4607      	mov	r7, r0
 800b320:	f1b8 0f00 	cmp.w	r8, #0
 800b324:	d05b      	beq.n	800b3de <_dtoa_r+0xa76>
 800b326:	6879      	ldr	r1, [r7, #4]
 800b328:	4620      	mov	r0, r4
 800b32a:	f000 fa0f 	bl	800b74c <_Balloc>
 800b32e:	4605      	mov	r5, r0
 800b330:	b928      	cbnz	r0, 800b33e <_dtoa_r+0x9d6>
 800b332:	4b83      	ldr	r3, [pc, #524]	; (800b540 <_dtoa_r+0xbd8>)
 800b334:	4602      	mov	r2, r0
 800b336:	f240 21ef 	movw	r1, #751	; 0x2ef
 800b33a:	f7ff bb2e 	b.w	800a99a <_dtoa_r+0x32>
 800b33e:	693a      	ldr	r2, [r7, #16]
 800b340:	3202      	adds	r2, #2
 800b342:	0092      	lsls	r2, r2, #2
 800b344:	f107 010c 	add.w	r1, r7, #12
 800b348:	300c      	adds	r0, #12
 800b34a:	f001 f997 	bl	800c67c <memcpy>
 800b34e:	2201      	movs	r2, #1
 800b350:	4629      	mov	r1, r5
 800b352:	4620      	mov	r0, r4
 800b354:	f000 fc0a 	bl	800bb6c <__lshift>
 800b358:	9b00      	ldr	r3, [sp, #0]
 800b35a:	3301      	adds	r3, #1
 800b35c:	9304      	str	r3, [sp, #16]
 800b35e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b362:	4413      	add	r3, r2
 800b364:	9308      	str	r3, [sp, #32]
 800b366:	9b02      	ldr	r3, [sp, #8]
 800b368:	f003 0301 	and.w	r3, r3, #1
 800b36c:	46b8      	mov	r8, r7
 800b36e:	9306      	str	r3, [sp, #24]
 800b370:	4607      	mov	r7, r0
 800b372:	9b04      	ldr	r3, [sp, #16]
 800b374:	4631      	mov	r1, r6
 800b376:	3b01      	subs	r3, #1
 800b378:	4650      	mov	r0, sl
 800b37a:	9301      	str	r3, [sp, #4]
 800b37c:	f7ff fa6c 	bl	800a858 <quorem>
 800b380:	4641      	mov	r1, r8
 800b382:	9002      	str	r0, [sp, #8]
 800b384:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b388:	4650      	mov	r0, sl
 800b38a:	f000 fc5b 	bl	800bc44 <__mcmp>
 800b38e:	463a      	mov	r2, r7
 800b390:	9005      	str	r0, [sp, #20]
 800b392:	4631      	mov	r1, r6
 800b394:	4620      	mov	r0, r4
 800b396:	f000 fc71 	bl	800bc7c <__mdiff>
 800b39a:	68c2      	ldr	r2, [r0, #12]
 800b39c:	4605      	mov	r5, r0
 800b39e:	bb02      	cbnz	r2, 800b3e2 <_dtoa_r+0xa7a>
 800b3a0:	4601      	mov	r1, r0
 800b3a2:	4650      	mov	r0, sl
 800b3a4:	f000 fc4e 	bl	800bc44 <__mcmp>
 800b3a8:	4602      	mov	r2, r0
 800b3aa:	4629      	mov	r1, r5
 800b3ac:	4620      	mov	r0, r4
 800b3ae:	9209      	str	r2, [sp, #36]	; 0x24
 800b3b0:	f000 fa0c 	bl	800b7cc <_Bfree>
 800b3b4:	9b07      	ldr	r3, [sp, #28]
 800b3b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b3b8:	9d04      	ldr	r5, [sp, #16]
 800b3ba:	ea43 0102 	orr.w	r1, r3, r2
 800b3be:	9b06      	ldr	r3, [sp, #24]
 800b3c0:	4319      	orrs	r1, r3
 800b3c2:	d110      	bne.n	800b3e6 <_dtoa_r+0xa7e>
 800b3c4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b3c8:	d029      	beq.n	800b41e <_dtoa_r+0xab6>
 800b3ca:	9b05      	ldr	r3, [sp, #20]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	dd02      	ble.n	800b3d6 <_dtoa_r+0xa6e>
 800b3d0:	9b02      	ldr	r3, [sp, #8]
 800b3d2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800b3d6:	9b01      	ldr	r3, [sp, #4]
 800b3d8:	f883 9000 	strb.w	r9, [r3]
 800b3dc:	e774      	b.n	800b2c8 <_dtoa_r+0x960>
 800b3de:	4638      	mov	r0, r7
 800b3e0:	e7ba      	b.n	800b358 <_dtoa_r+0x9f0>
 800b3e2:	2201      	movs	r2, #1
 800b3e4:	e7e1      	b.n	800b3aa <_dtoa_r+0xa42>
 800b3e6:	9b05      	ldr	r3, [sp, #20]
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	db04      	blt.n	800b3f6 <_dtoa_r+0xa8e>
 800b3ec:	9907      	ldr	r1, [sp, #28]
 800b3ee:	430b      	orrs	r3, r1
 800b3f0:	9906      	ldr	r1, [sp, #24]
 800b3f2:	430b      	orrs	r3, r1
 800b3f4:	d120      	bne.n	800b438 <_dtoa_r+0xad0>
 800b3f6:	2a00      	cmp	r2, #0
 800b3f8:	dded      	ble.n	800b3d6 <_dtoa_r+0xa6e>
 800b3fa:	4651      	mov	r1, sl
 800b3fc:	2201      	movs	r2, #1
 800b3fe:	4620      	mov	r0, r4
 800b400:	f000 fbb4 	bl	800bb6c <__lshift>
 800b404:	4631      	mov	r1, r6
 800b406:	4682      	mov	sl, r0
 800b408:	f000 fc1c 	bl	800bc44 <__mcmp>
 800b40c:	2800      	cmp	r0, #0
 800b40e:	dc03      	bgt.n	800b418 <_dtoa_r+0xab0>
 800b410:	d1e1      	bne.n	800b3d6 <_dtoa_r+0xa6e>
 800b412:	f019 0f01 	tst.w	r9, #1
 800b416:	d0de      	beq.n	800b3d6 <_dtoa_r+0xa6e>
 800b418:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b41c:	d1d8      	bne.n	800b3d0 <_dtoa_r+0xa68>
 800b41e:	9a01      	ldr	r2, [sp, #4]
 800b420:	2339      	movs	r3, #57	; 0x39
 800b422:	7013      	strb	r3, [r2, #0]
 800b424:	462b      	mov	r3, r5
 800b426:	461d      	mov	r5, r3
 800b428:	3b01      	subs	r3, #1
 800b42a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b42e:	2a39      	cmp	r2, #57	; 0x39
 800b430:	d06c      	beq.n	800b50c <_dtoa_r+0xba4>
 800b432:	3201      	adds	r2, #1
 800b434:	701a      	strb	r2, [r3, #0]
 800b436:	e747      	b.n	800b2c8 <_dtoa_r+0x960>
 800b438:	2a00      	cmp	r2, #0
 800b43a:	dd07      	ble.n	800b44c <_dtoa_r+0xae4>
 800b43c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b440:	d0ed      	beq.n	800b41e <_dtoa_r+0xab6>
 800b442:	9a01      	ldr	r2, [sp, #4]
 800b444:	f109 0301 	add.w	r3, r9, #1
 800b448:	7013      	strb	r3, [r2, #0]
 800b44a:	e73d      	b.n	800b2c8 <_dtoa_r+0x960>
 800b44c:	9b04      	ldr	r3, [sp, #16]
 800b44e:	9a08      	ldr	r2, [sp, #32]
 800b450:	f803 9c01 	strb.w	r9, [r3, #-1]
 800b454:	4293      	cmp	r3, r2
 800b456:	d043      	beq.n	800b4e0 <_dtoa_r+0xb78>
 800b458:	4651      	mov	r1, sl
 800b45a:	2300      	movs	r3, #0
 800b45c:	220a      	movs	r2, #10
 800b45e:	4620      	mov	r0, r4
 800b460:	f000 f9d6 	bl	800b810 <__multadd>
 800b464:	45b8      	cmp	r8, r7
 800b466:	4682      	mov	sl, r0
 800b468:	f04f 0300 	mov.w	r3, #0
 800b46c:	f04f 020a 	mov.w	r2, #10
 800b470:	4641      	mov	r1, r8
 800b472:	4620      	mov	r0, r4
 800b474:	d107      	bne.n	800b486 <_dtoa_r+0xb1e>
 800b476:	f000 f9cb 	bl	800b810 <__multadd>
 800b47a:	4680      	mov	r8, r0
 800b47c:	4607      	mov	r7, r0
 800b47e:	9b04      	ldr	r3, [sp, #16]
 800b480:	3301      	adds	r3, #1
 800b482:	9304      	str	r3, [sp, #16]
 800b484:	e775      	b.n	800b372 <_dtoa_r+0xa0a>
 800b486:	f000 f9c3 	bl	800b810 <__multadd>
 800b48a:	4639      	mov	r1, r7
 800b48c:	4680      	mov	r8, r0
 800b48e:	2300      	movs	r3, #0
 800b490:	220a      	movs	r2, #10
 800b492:	4620      	mov	r0, r4
 800b494:	f000 f9bc 	bl	800b810 <__multadd>
 800b498:	4607      	mov	r7, r0
 800b49a:	e7f0      	b.n	800b47e <_dtoa_r+0xb16>
 800b49c:	9b04      	ldr	r3, [sp, #16]
 800b49e:	9301      	str	r3, [sp, #4]
 800b4a0:	9d00      	ldr	r5, [sp, #0]
 800b4a2:	4631      	mov	r1, r6
 800b4a4:	4650      	mov	r0, sl
 800b4a6:	f7ff f9d7 	bl	800a858 <quorem>
 800b4aa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b4ae:	9b00      	ldr	r3, [sp, #0]
 800b4b0:	f805 9b01 	strb.w	r9, [r5], #1
 800b4b4:	1aea      	subs	r2, r5, r3
 800b4b6:	9b01      	ldr	r3, [sp, #4]
 800b4b8:	4293      	cmp	r3, r2
 800b4ba:	dd07      	ble.n	800b4cc <_dtoa_r+0xb64>
 800b4bc:	4651      	mov	r1, sl
 800b4be:	2300      	movs	r3, #0
 800b4c0:	220a      	movs	r2, #10
 800b4c2:	4620      	mov	r0, r4
 800b4c4:	f000 f9a4 	bl	800b810 <__multadd>
 800b4c8:	4682      	mov	sl, r0
 800b4ca:	e7ea      	b.n	800b4a2 <_dtoa_r+0xb3a>
 800b4cc:	9b01      	ldr	r3, [sp, #4]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	bfc8      	it	gt
 800b4d2:	461d      	movgt	r5, r3
 800b4d4:	9b00      	ldr	r3, [sp, #0]
 800b4d6:	bfd8      	it	le
 800b4d8:	2501      	movle	r5, #1
 800b4da:	441d      	add	r5, r3
 800b4dc:	f04f 0800 	mov.w	r8, #0
 800b4e0:	4651      	mov	r1, sl
 800b4e2:	2201      	movs	r2, #1
 800b4e4:	4620      	mov	r0, r4
 800b4e6:	f000 fb41 	bl	800bb6c <__lshift>
 800b4ea:	4631      	mov	r1, r6
 800b4ec:	4682      	mov	sl, r0
 800b4ee:	f000 fba9 	bl	800bc44 <__mcmp>
 800b4f2:	2800      	cmp	r0, #0
 800b4f4:	dc96      	bgt.n	800b424 <_dtoa_r+0xabc>
 800b4f6:	d102      	bne.n	800b4fe <_dtoa_r+0xb96>
 800b4f8:	f019 0f01 	tst.w	r9, #1
 800b4fc:	d192      	bne.n	800b424 <_dtoa_r+0xabc>
 800b4fe:	462b      	mov	r3, r5
 800b500:	461d      	mov	r5, r3
 800b502:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b506:	2a30      	cmp	r2, #48	; 0x30
 800b508:	d0fa      	beq.n	800b500 <_dtoa_r+0xb98>
 800b50a:	e6dd      	b.n	800b2c8 <_dtoa_r+0x960>
 800b50c:	9a00      	ldr	r2, [sp, #0]
 800b50e:	429a      	cmp	r2, r3
 800b510:	d189      	bne.n	800b426 <_dtoa_r+0xabe>
 800b512:	f10b 0b01 	add.w	fp, fp, #1
 800b516:	2331      	movs	r3, #49	; 0x31
 800b518:	e796      	b.n	800b448 <_dtoa_r+0xae0>
 800b51a:	4b0a      	ldr	r3, [pc, #40]	; (800b544 <_dtoa_r+0xbdc>)
 800b51c:	f7ff ba99 	b.w	800aa52 <_dtoa_r+0xea>
 800b520:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b522:	2b00      	cmp	r3, #0
 800b524:	f47f aa6d 	bne.w	800aa02 <_dtoa_r+0x9a>
 800b528:	4b07      	ldr	r3, [pc, #28]	; (800b548 <_dtoa_r+0xbe0>)
 800b52a:	f7ff ba92 	b.w	800aa52 <_dtoa_r+0xea>
 800b52e:	9b01      	ldr	r3, [sp, #4]
 800b530:	2b00      	cmp	r3, #0
 800b532:	dcb5      	bgt.n	800b4a0 <_dtoa_r+0xb38>
 800b534:	9b07      	ldr	r3, [sp, #28]
 800b536:	2b02      	cmp	r3, #2
 800b538:	f73f aeb1 	bgt.w	800b29e <_dtoa_r+0x936>
 800b53c:	e7b0      	b.n	800b4a0 <_dtoa_r+0xb38>
 800b53e:	bf00      	nop
 800b540:	0800cc4f 	.word	0x0800cc4f
 800b544:	0800cb19 	.word	0x0800cb19
 800b548:	0800cbea 	.word	0x0800cbea

0800b54c <_free_r>:
 800b54c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b54e:	2900      	cmp	r1, #0
 800b550:	d044      	beq.n	800b5dc <_free_r+0x90>
 800b552:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b556:	9001      	str	r0, [sp, #4]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	f1a1 0404 	sub.w	r4, r1, #4
 800b55e:	bfb8      	it	lt
 800b560:	18e4      	addlt	r4, r4, r3
 800b562:	f000 f8e7 	bl	800b734 <__malloc_lock>
 800b566:	4a1e      	ldr	r2, [pc, #120]	; (800b5e0 <_free_r+0x94>)
 800b568:	9801      	ldr	r0, [sp, #4]
 800b56a:	6813      	ldr	r3, [r2, #0]
 800b56c:	b933      	cbnz	r3, 800b57c <_free_r+0x30>
 800b56e:	6063      	str	r3, [r4, #4]
 800b570:	6014      	str	r4, [r2, #0]
 800b572:	b003      	add	sp, #12
 800b574:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b578:	f000 b8e2 	b.w	800b740 <__malloc_unlock>
 800b57c:	42a3      	cmp	r3, r4
 800b57e:	d908      	bls.n	800b592 <_free_r+0x46>
 800b580:	6825      	ldr	r5, [r4, #0]
 800b582:	1961      	adds	r1, r4, r5
 800b584:	428b      	cmp	r3, r1
 800b586:	bf01      	itttt	eq
 800b588:	6819      	ldreq	r1, [r3, #0]
 800b58a:	685b      	ldreq	r3, [r3, #4]
 800b58c:	1949      	addeq	r1, r1, r5
 800b58e:	6021      	streq	r1, [r4, #0]
 800b590:	e7ed      	b.n	800b56e <_free_r+0x22>
 800b592:	461a      	mov	r2, r3
 800b594:	685b      	ldr	r3, [r3, #4]
 800b596:	b10b      	cbz	r3, 800b59c <_free_r+0x50>
 800b598:	42a3      	cmp	r3, r4
 800b59a:	d9fa      	bls.n	800b592 <_free_r+0x46>
 800b59c:	6811      	ldr	r1, [r2, #0]
 800b59e:	1855      	adds	r5, r2, r1
 800b5a0:	42a5      	cmp	r5, r4
 800b5a2:	d10b      	bne.n	800b5bc <_free_r+0x70>
 800b5a4:	6824      	ldr	r4, [r4, #0]
 800b5a6:	4421      	add	r1, r4
 800b5a8:	1854      	adds	r4, r2, r1
 800b5aa:	42a3      	cmp	r3, r4
 800b5ac:	6011      	str	r1, [r2, #0]
 800b5ae:	d1e0      	bne.n	800b572 <_free_r+0x26>
 800b5b0:	681c      	ldr	r4, [r3, #0]
 800b5b2:	685b      	ldr	r3, [r3, #4]
 800b5b4:	6053      	str	r3, [r2, #4]
 800b5b6:	440c      	add	r4, r1
 800b5b8:	6014      	str	r4, [r2, #0]
 800b5ba:	e7da      	b.n	800b572 <_free_r+0x26>
 800b5bc:	d902      	bls.n	800b5c4 <_free_r+0x78>
 800b5be:	230c      	movs	r3, #12
 800b5c0:	6003      	str	r3, [r0, #0]
 800b5c2:	e7d6      	b.n	800b572 <_free_r+0x26>
 800b5c4:	6825      	ldr	r5, [r4, #0]
 800b5c6:	1961      	adds	r1, r4, r5
 800b5c8:	428b      	cmp	r3, r1
 800b5ca:	bf04      	itt	eq
 800b5cc:	6819      	ldreq	r1, [r3, #0]
 800b5ce:	685b      	ldreq	r3, [r3, #4]
 800b5d0:	6063      	str	r3, [r4, #4]
 800b5d2:	bf04      	itt	eq
 800b5d4:	1949      	addeq	r1, r1, r5
 800b5d6:	6021      	streq	r1, [r4, #0]
 800b5d8:	6054      	str	r4, [r2, #4]
 800b5da:	e7ca      	b.n	800b572 <_free_r+0x26>
 800b5dc:	b003      	add	sp, #12
 800b5de:	bd30      	pop	{r4, r5, pc}
 800b5e0:	20000a4c 	.word	0x20000a4c

0800b5e4 <malloc>:
 800b5e4:	4b02      	ldr	r3, [pc, #8]	; (800b5f0 <malloc+0xc>)
 800b5e6:	4601      	mov	r1, r0
 800b5e8:	6818      	ldr	r0, [r3, #0]
 800b5ea:	f000 b823 	b.w	800b634 <_malloc_r>
 800b5ee:	bf00      	nop
 800b5f0:	20000108 	.word	0x20000108

0800b5f4 <sbrk_aligned>:
 800b5f4:	b570      	push	{r4, r5, r6, lr}
 800b5f6:	4e0e      	ldr	r6, [pc, #56]	; (800b630 <sbrk_aligned+0x3c>)
 800b5f8:	460c      	mov	r4, r1
 800b5fa:	6831      	ldr	r1, [r6, #0]
 800b5fc:	4605      	mov	r5, r0
 800b5fe:	b911      	cbnz	r1, 800b606 <sbrk_aligned+0x12>
 800b600:	f001 f82c 	bl	800c65c <_sbrk_r>
 800b604:	6030      	str	r0, [r6, #0]
 800b606:	4621      	mov	r1, r4
 800b608:	4628      	mov	r0, r5
 800b60a:	f001 f827 	bl	800c65c <_sbrk_r>
 800b60e:	1c43      	adds	r3, r0, #1
 800b610:	d00a      	beq.n	800b628 <sbrk_aligned+0x34>
 800b612:	1cc4      	adds	r4, r0, #3
 800b614:	f024 0403 	bic.w	r4, r4, #3
 800b618:	42a0      	cmp	r0, r4
 800b61a:	d007      	beq.n	800b62c <sbrk_aligned+0x38>
 800b61c:	1a21      	subs	r1, r4, r0
 800b61e:	4628      	mov	r0, r5
 800b620:	f001 f81c 	bl	800c65c <_sbrk_r>
 800b624:	3001      	adds	r0, #1
 800b626:	d101      	bne.n	800b62c <sbrk_aligned+0x38>
 800b628:	f04f 34ff 	mov.w	r4, #4294967295
 800b62c:	4620      	mov	r0, r4
 800b62e:	bd70      	pop	{r4, r5, r6, pc}
 800b630:	20000a50 	.word	0x20000a50

0800b634 <_malloc_r>:
 800b634:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b638:	1ccd      	adds	r5, r1, #3
 800b63a:	f025 0503 	bic.w	r5, r5, #3
 800b63e:	3508      	adds	r5, #8
 800b640:	2d0c      	cmp	r5, #12
 800b642:	bf38      	it	cc
 800b644:	250c      	movcc	r5, #12
 800b646:	2d00      	cmp	r5, #0
 800b648:	4607      	mov	r7, r0
 800b64a:	db01      	blt.n	800b650 <_malloc_r+0x1c>
 800b64c:	42a9      	cmp	r1, r5
 800b64e:	d905      	bls.n	800b65c <_malloc_r+0x28>
 800b650:	230c      	movs	r3, #12
 800b652:	603b      	str	r3, [r7, #0]
 800b654:	2600      	movs	r6, #0
 800b656:	4630      	mov	r0, r6
 800b658:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b65c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b730 <_malloc_r+0xfc>
 800b660:	f000 f868 	bl	800b734 <__malloc_lock>
 800b664:	f8d8 3000 	ldr.w	r3, [r8]
 800b668:	461c      	mov	r4, r3
 800b66a:	bb5c      	cbnz	r4, 800b6c4 <_malloc_r+0x90>
 800b66c:	4629      	mov	r1, r5
 800b66e:	4638      	mov	r0, r7
 800b670:	f7ff ffc0 	bl	800b5f4 <sbrk_aligned>
 800b674:	1c43      	adds	r3, r0, #1
 800b676:	4604      	mov	r4, r0
 800b678:	d155      	bne.n	800b726 <_malloc_r+0xf2>
 800b67a:	f8d8 4000 	ldr.w	r4, [r8]
 800b67e:	4626      	mov	r6, r4
 800b680:	2e00      	cmp	r6, #0
 800b682:	d145      	bne.n	800b710 <_malloc_r+0xdc>
 800b684:	2c00      	cmp	r4, #0
 800b686:	d048      	beq.n	800b71a <_malloc_r+0xe6>
 800b688:	6823      	ldr	r3, [r4, #0]
 800b68a:	4631      	mov	r1, r6
 800b68c:	4638      	mov	r0, r7
 800b68e:	eb04 0903 	add.w	r9, r4, r3
 800b692:	f000 ffe3 	bl	800c65c <_sbrk_r>
 800b696:	4581      	cmp	r9, r0
 800b698:	d13f      	bne.n	800b71a <_malloc_r+0xe6>
 800b69a:	6821      	ldr	r1, [r4, #0]
 800b69c:	1a6d      	subs	r5, r5, r1
 800b69e:	4629      	mov	r1, r5
 800b6a0:	4638      	mov	r0, r7
 800b6a2:	f7ff ffa7 	bl	800b5f4 <sbrk_aligned>
 800b6a6:	3001      	adds	r0, #1
 800b6a8:	d037      	beq.n	800b71a <_malloc_r+0xe6>
 800b6aa:	6823      	ldr	r3, [r4, #0]
 800b6ac:	442b      	add	r3, r5
 800b6ae:	6023      	str	r3, [r4, #0]
 800b6b0:	f8d8 3000 	ldr.w	r3, [r8]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d038      	beq.n	800b72a <_malloc_r+0xf6>
 800b6b8:	685a      	ldr	r2, [r3, #4]
 800b6ba:	42a2      	cmp	r2, r4
 800b6bc:	d12b      	bne.n	800b716 <_malloc_r+0xe2>
 800b6be:	2200      	movs	r2, #0
 800b6c0:	605a      	str	r2, [r3, #4]
 800b6c2:	e00f      	b.n	800b6e4 <_malloc_r+0xb0>
 800b6c4:	6822      	ldr	r2, [r4, #0]
 800b6c6:	1b52      	subs	r2, r2, r5
 800b6c8:	d41f      	bmi.n	800b70a <_malloc_r+0xd6>
 800b6ca:	2a0b      	cmp	r2, #11
 800b6cc:	d917      	bls.n	800b6fe <_malloc_r+0xca>
 800b6ce:	1961      	adds	r1, r4, r5
 800b6d0:	42a3      	cmp	r3, r4
 800b6d2:	6025      	str	r5, [r4, #0]
 800b6d4:	bf18      	it	ne
 800b6d6:	6059      	strne	r1, [r3, #4]
 800b6d8:	6863      	ldr	r3, [r4, #4]
 800b6da:	bf08      	it	eq
 800b6dc:	f8c8 1000 	streq.w	r1, [r8]
 800b6e0:	5162      	str	r2, [r4, r5]
 800b6e2:	604b      	str	r3, [r1, #4]
 800b6e4:	4638      	mov	r0, r7
 800b6e6:	f104 060b 	add.w	r6, r4, #11
 800b6ea:	f000 f829 	bl	800b740 <__malloc_unlock>
 800b6ee:	f026 0607 	bic.w	r6, r6, #7
 800b6f2:	1d23      	adds	r3, r4, #4
 800b6f4:	1af2      	subs	r2, r6, r3
 800b6f6:	d0ae      	beq.n	800b656 <_malloc_r+0x22>
 800b6f8:	1b9b      	subs	r3, r3, r6
 800b6fa:	50a3      	str	r3, [r4, r2]
 800b6fc:	e7ab      	b.n	800b656 <_malloc_r+0x22>
 800b6fe:	42a3      	cmp	r3, r4
 800b700:	6862      	ldr	r2, [r4, #4]
 800b702:	d1dd      	bne.n	800b6c0 <_malloc_r+0x8c>
 800b704:	f8c8 2000 	str.w	r2, [r8]
 800b708:	e7ec      	b.n	800b6e4 <_malloc_r+0xb0>
 800b70a:	4623      	mov	r3, r4
 800b70c:	6864      	ldr	r4, [r4, #4]
 800b70e:	e7ac      	b.n	800b66a <_malloc_r+0x36>
 800b710:	4634      	mov	r4, r6
 800b712:	6876      	ldr	r6, [r6, #4]
 800b714:	e7b4      	b.n	800b680 <_malloc_r+0x4c>
 800b716:	4613      	mov	r3, r2
 800b718:	e7cc      	b.n	800b6b4 <_malloc_r+0x80>
 800b71a:	230c      	movs	r3, #12
 800b71c:	603b      	str	r3, [r7, #0]
 800b71e:	4638      	mov	r0, r7
 800b720:	f000 f80e 	bl	800b740 <__malloc_unlock>
 800b724:	e797      	b.n	800b656 <_malloc_r+0x22>
 800b726:	6025      	str	r5, [r4, #0]
 800b728:	e7dc      	b.n	800b6e4 <_malloc_r+0xb0>
 800b72a:	605b      	str	r3, [r3, #4]
 800b72c:	deff      	udf	#255	; 0xff
 800b72e:	bf00      	nop
 800b730:	20000a4c 	.word	0x20000a4c

0800b734 <__malloc_lock>:
 800b734:	4801      	ldr	r0, [pc, #4]	; (800b73c <__malloc_lock+0x8>)
 800b736:	f7ff b86f 	b.w	800a818 <__retarget_lock_acquire_recursive>
 800b73a:	bf00      	nop
 800b73c:	20000a48 	.word	0x20000a48

0800b740 <__malloc_unlock>:
 800b740:	4801      	ldr	r0, [pc, #4]	; (800b748 <__malloc_unlock+0x8>)
 800b742:	f7ff b86a 	b.w	800a81a <__retarget_lock_release_recursive>
 800b746:	bf00      	nop
 800b748:	20000a48 	.word	0x20000a48

0800b74c <_Balloc>:
 800b74c:	b570      	push	{r4, r5, r6, lr}
 800b74e:	69c6      	ldr	r6, [r0, #28]
 800b750:	4604      	mov	r4, r0
 800b752:	460d      	mov	r5, r1
 800b754:	b976      	cbnz	r6, 800b774 <_Balloc+0x28>
 800b756:	2010      	movs	r0, #16
 800b758:	f7ff ff44 	bl	800b5e4 <malloc>
 800b75c:	4602      	mov	r2, r0
 800b75e:	61e0      	str	r0, [r4, #28]
 800b760:	b920      	cbnz	r0, 800b76c <_Balloc+0x20>
 800b762:	4b18      	ldr	r3, [pc, #96]	; (800b7c4 <_Balloc+0x78>)
 800b764:	4818      	ldr	r0, [pc, #96]	; (800b7c8 <_Balloc+0x7c>)
 800b766:	216b      	movs	r1, #107	; 0x6b
 800b768:	f7ff f858 	bl	800a81c <__assert_func>
 800b76c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b770:	6006      	str	r6, [r0, #0]
 800b772:	60c6      	str	r6, [r0, #12]
 800b774:	69e6      	ldr	r6, [r4, #28]
 800b776:	68f3      	ldr	r3, [r6, #12]
 800b778:	b183      	cbz	r3, 800b79c <_Balloc+0x50>
 800b77a:	69e3      	ldr	r3, [r4, #28]
 800b77c:	68db      	ldr	r3, [r3, #12]
 800b77e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b782:	b9b8      	cbnz	r0, 800b7b4 <_Balloc+0x68>
 800b784:	2101      	movs	r1, #1
 800b786:	fa01 f605 	lsl.w	r6, r1, r5
 800b78a:	1d72      	adds	r2, r6, #5
 800b78c:	0092      	lsls	r2, r2, #2
 800b78e:	4620      	mov	r0, r4
 800b790:	f000 ff89 	bl	800c6a6 <_calloc_r>
 800b794:	b160      	cbz	r0, 800b7b0 <_Balloc+0x64>
 800b796:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b79a:	e00e      	b.n	800b7ba <_Balloc+0x6e>
 800b79c:	2221      	movs	r2, #33	; 0x21
 800b79e:	2104      	movs	r1, #4
 800b7a0:	4620      	mov	r0, r4
 800b7a2:	f000 ff80 	bl	800c6a6 <_calloc_r>
 800b7a6:	69e3      	ldr	r3, [r4, #28]
 800b7a8:	60f0      	str	r0, [r6, #12]
 800b7aa:	68db      	ldr	r3, [r3, #12]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d1e4      	bne.n	800b77a <_Balloc+0x2e>
 800b7b0:	2000      	movs	r0, #0
 800b7b2:	bd70      	pop	{r4, r5, r6, pc}
 800b7b4:	6802      	ldr	r2, [r0, #0]
 800b7b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b7c0:	e7f7      	b.n	800b7b2 <_Balloc+0x66>
 800b7c2:	bf00      	nop
 800b7c4:	0800cb3d 	.word	0x0800cb3d
 800b7c8:	0800cc60 	.word	0x0800cc60

0800b7cc <_Bfree>:
 800b7cc:	b570      	push	{r4, r5, r6, lr}
 800b7ce:	69c6      	ldr	r6, [r0, #28]
 800b7d0:	4605      	mov	r5, r0
 800b7d2:	460c      	mov	r4, r1
 800b7d4:	b976      	cbnz	r6, 800b7f4 <_Bfree+0x28>
 800b7d6:	2010      	movs	r0, #16
 800b7d8:	f7ff ff04 	bl	800b5e4 <malloc>
 800b7dc:	4602      	mov	r2, r0
 800b7de:	61e8      	str	r0, [r5, #28]
 800b7e0:	b920      	cbnz	r0, 800b7ec <_Bfree+0x20>
 800b7e2:	4b09      	ldr	r3, [pc, #36]	; (800b808 <_Bfree+0x3c>)
 800b7e4:	4809      	ldr	r0, [pc, #36]	; (800b80c <_Bfree+0x40>)
 800b7e6:	218f      	movs	r1, #143	; 0x8f
 800b7e8:	f7ff f818 	bl	800a81c <__assert_func>
 800b7ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b7f0:	6006      	str	r6, [r0, #0]
 800b7f2:	60c6      	str	r6, [r0, #12]
 800b7f4:	b13c      	cbz	r4, 800b806 <_Bfree+0x3a>
 800b7f6:	69eb      	ldr	r3, [r5, #28]
 800b7f8:	6862      	ldr	r2, [r4, #4]
 800b7fa:	68db      	ldr	r3, [r3, #12]
 800b7fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b800:	6021      	str	r1, [r4, #0]
 800b802:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b806:	bd70      	pop	{r4, r5, r6, pc}
 800b808:	0800cb3d 	.word	0x0800cb3d
 800b80c:	0800cc60 	.word	0x0800cc60

0800b810 <__multadd>:
 800b810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b814:	690d      	ldr	r5, [r1, #16]
 800b816:	4607      	mov	r7, r0
 800b818:	460c      	mov	r4, r1
 800b81a:	461e      	mov	r6, r3
 800b81c:	f101 0c14 	add.w	ip, r1, #20
 800b820:	2000      	movs	r0, #0
 800b822:	f8dc 3000 	ldr.w	r3, [ip]
 800b826:	b299      	uxth	r1, r3
 800b828:	fb02 6101 	mla	r1, r2, r1, r6
 800b82c:	0c1e      	lsrs	r6, r3, #16
 800b82e:	0c0b      	lsrs	r3, r1, #16
 800b830:	fb02 3306 	mla	r3, r2, r6, r3
 800b834:	b289      	uxth	r1, r1
 800b836:	3001      	adds	r0, #1
 800b838:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b83c:	4285      	cmp	r5, r0
 800b83e:	f84c 1b04 	str.w	r1, [ip], #4
 800b842:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b846:	dcec      	bgt.n	800b822 <__multadd+0x12>
 800b848:	b30e      	cbz	r6, 800b88e <__multadd+0x7e>
 800b84a:	68a3      	ldr	r3, [r4, #8]
 800b84c:	42ab      	cmp	r3, r5
 800b84e:	dc19      	bgt.n	800b884 <__multadd+0x74>
 800b850:	6861      	ldr	r1, [r4, #4]
 800b852:	4638      	mov	r0, r7
 800b854:	3101      	adds	r1, #1
 800b856:	f7ff ff79 	bl	800b74c <_Balloc>
 800b85a:	4680      	mov	r8, r0
 800b85c:	b928      	cbnz	r0, 800b86a <__multadd+0x5a>
 800b85e:	4602      	mov	r2, r0
 800b860:	4b0c      	ldr	r3, [pc, #48]	; (800b894 <__multadd+0x84>)
 800b862:	480d      	ldr	r0, [pc, #52]	; (800b898 <__multadd+0x88>)
 800b864:	21ba      	movs	r1, #186	; 0xba
 800b866:	f7fe ffd9 	bl	800a81c <__assert_func>
 800b86a:	6922      	ldr	r2, [r4, #16]
 800b86c:	3202      	adds	r2, #2
 800b86e:	f104 010c 	add.w	r1, r4, #12
 800b872:	0092      	lsls	r2, r2, #2
 800b874:	300c      	adds	r0, #12
 800b876:	f000 ff01 	bl	800c67c <memcpy>
 800b87a:	4621      	mov	r1, r4
 800b87c:	4638      	mov	r0, r7
 800b87e:	f7ff ffa5 	bl	800b7cc <_Bfree>
 800b882:	4644      	mov	r4, r8
 800b884:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b888:	3501      	adds	r5, #1
 800b88a:	615e      	str	r6, [r3, #20]
 800b88c:	6125      	str	r5, [r4, #16]
 800b88e:	4620      	mov	r0, r4
 800b890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b894:	0800cc4f 	.word	0x0800cc4f
 800b898:	0800cc60 	.word	0x0800cc60

0800b89c <__hi0bits>:
 800b89c:	0c03      	lsrs	r3, r0, #16
 800b89e:	041b      	lsls	r3, r3, #16
 800b8a0:	b9d3      	cbnz	r3, 800b8d8 <__hi0bits+0x3c>
 800b8a2:	0400      	lsls	r0, r0, #16
 800b8a4:	2310      	movs	r3, #16
 800b8a6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b8aa:	bf04      	itt	eq
 800b8ac:	0200      	lsleq	r0, r0, #8
 800b8ae:	3308      	addeq	r3, #8
 800b8b0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b8b4:	bf04      	itt	eq
 800b8b6:	0100      	lsleq	r0, r0, #4
 800b8b8:	3304      	addeq	r3, #4
 800b8ba:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b8be:	bf04      	itt	eq
 800b8c0:	0080      	lsleq	r0, r0, #2
 800b8c2:	3302      	addeq	r3, #2
 800b8c4:	2800      	cmp	r0, #0
 800b8c6:	db05      	blt.n	800b8d4 <__hi0bits+0x38>
 800b8c8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b8cc:	f103 0301 	add.w	r3, r3, #1
 800b8d0:	bf08      	it	eq
 800b8d2:	2320      	moveq	r3, #32
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	4770      	bx	lr
 800b8d8:	2300      	movs	r3, #0
 800b8da:	e7e4      	b.n	800b8a6 <__hi0bits+0xa>

0800b8dc <__lo0bits>:
 800b8dc:	6803      	ldr	r3, [r0, #0]
 800b8de:	f013 0207 	ands.w	r2, r3, #7
 800b8e2:	d00c      	beq.n	800b8fe <__lo0bits+0x22>
 800b8e4:	07d9      	lsls	r1, r3, #31
 800b8e6:	d422      	bmi.n	800b92e <__lo0bits+0x52>
 800b8e8:	079a      	lsls	r2, r3, #30
 800b8ea:	bf49      	itett	mi
 800b8ec:	085b      	lsrmi	r3, r3, #1
 800b8ee:	089b      	lsrpl	r3, r3, #2
 800b8f0:	6003      	strmi	r3, [r0, #0]
 800b8f2:	2201      	movmi	r2, #1
 800b8f4:	bf5c      	itt	pl
 800b8f6:	6003      	strpl	r3, [r0, #0]
 800b8f8:	2202      	movpl	r2, #2
 800b8fa:	4610      	mov	r0, r2
 800b8fc:	4770      	bx	lr
 800b8fe:	b299      	uxth	r1, r3
 800b900:	b909      	cbnz	r1, 800b906 <__lo0bits+0x2a>
 800b902:	0c1b      	lsrs	r3, r3, #16
 800b904:	2210      	movs	r2, #16
 800b906:	b2d9      	uxtb	r1, r3
 800b908:	b909      	cbnz	r1, 800b90e <__lo0bits+0x32>
 800b90a:	3208      	adds	r2, #8
 800b90c:	0a1b      	lsrs	r3, r3, #8
 800b90e:	0719      	lsls	r1, r3, #28
 800b910:	bf04      	itt	eq
 800b912:	091b      	lsreq	r3, r3, #4
 800b914:	3204      	addeq	r2, #4
 800b916:	0799      	lsls	r1, r3, #30
 800b918:	bf04      	itt	eq
 800b91a:	089b      	lsreq	r3, r3, #2
 800b91c:	3202      	addeq	r2, #2
 800b91e:	07d9      	lsls	r1, r3, #31
 800b920:	d403      	bmi.n	800b92a <__lo0bits+0x4e>
 800b922:	085b      	lsrs	r3, r3, #1
 800b924:	f102 0201 	add.w	r2, r2, #1
 800b928:	d003      	beq.n	800b932 <__lo0bits+0x56>
 800b92a:	6003      	str	r3, [r0, #0]
 800b92c:	e7e5      	b.n	800b8fa <__lo0bits+0x1e>
 800b92e:	2200      	movs	r2, #0
 800b930:	e7e3      	b.n	800b8fa <__lo0bits+0x1e>
 800b932:	2220      	movs	r2, #32
 800b934:	e7e1      	b.n	800b8fa <__lo0bits+0x1e>
	...

0800b938 <__i2b>:
 800b938:	b510      	push	{r4, lr}
 800b93a:	460c      	mov	r4, r1
 800b93c:	2101      	movs	r1, #1
 800b93e:	f7ff ff05 	bl	800b74c <_Balloc>
 800b942:	4602      	mov	r2, r0
 800b944:	b928      	cbnz	r0, 800b952 <__i2b+0x1a>
 800b946:	4b05      	ldr	r3, [pc, #20]	; (800b95c <__i2b+0x24>)
 800b948:	4805      	ldr	r0, [pc, #20]	; (800b960 <__i2b+0x28>)
 800b94a:	f240 1145 	movw	r1, #325	; 0x145
 800b94e:	f7fe ff65 	bl	800a81c <__assert_func>
 800b952:	2301      	movs	r3, #1
 800b954:	6144      	str	r4, [r0, #20]
 800b956:	6103      	str	r3, [r0, #16]
 800b958:	bd10      	pop	{r4, pc}
 800b95a:	bf00      	nop
 800b95c:	0800cc4f 	.word	0x0800cc4f
 800b960:	0800cc60 	.word	0x0800cc60

0800b964 <__multiply>:
 800b964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b968:	4691      	mov	r9, r2
 800b96a:	690a      	ldr	r2, [r1, #16]
 800b96c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b970:	429a      	cmp	r2, r3
 800b972:	bfb8      	it	lt
 800b974:	460b      	movlt	r3, r1
 800b976:	460c      	mov	r4, r1
 800b978:	bfbc      	itt	lt
 800b97a:	464c      	movlt	r4, r9
 800b97c:	4699      	movlt	r9, r3
 800b97e:	6927      	ldr	r7, [r4, #16]
 800b980:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b984:	68a3      	ldr	r3, [r4, #8]
 800b986:	6861      	ldr	r1, [r4, #4]
 800b988:	eb07 060a 	add.w	r6, r7, sl
 800b98c:	42b3      	cmp	r3, r6
 800b98e:	b085      	sub	sp, #20
 800b990:	bfb8      	it	lt
 800b992:	3101      	addlt	r1, #1
 800b994:	f7ff feda 	bl	800b74c <_Balloc>
 800b998:	b930      	cbnz	r0, 800b9a8 <__multiply+0x44>
 800b99a:	4602      	mov	r2, r0
 800b99c:	4b44      	ldr	r3, [pc, #272]	; (800bab0 <__multiply+0x14c>)
 800b99e:	4845      	ldr	r0, [pc, #276]	; (800bab4 <__multiply+0x150>)
 800b9a0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800b9a4:	f7fe ff3a 	bl	800a81c <__assert_func>
 800b9a8:	f100 0514 	add.w	r5, r0, #20
 800b9ac:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b9b0:	462b      	mov	r3, r5
 800b9b2:	2200      	movs	r2, #0
 800b9b4:	4543      	cmp	r3, r8
 800b9b6:	d321      	bcc.n	800b9fc <__multiply+0x98>
 800b9b8:	f104 0314 	add.w	r3, r4, #20
 800b9bc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b9c0:	f109 0314 	add.w	r3, r9, #20
 800b9c4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b9c8:	9202      	str	r2, [sp, #8]
 800b9ca:	1b3a      	subs	r2, r7, r4
 800b9cc:	3a15      	subs	r2, #21
 800b9ce:	f022 0203 	bic.w	r2, r2, #3
 800b9d2:	3204      	adds	r2, #4
 800b9d4:	f104 0115 	add.w	r1, r4, #21
 800b9d8:	428f      	cmp	r7, r1
 800b9da:	bf38      	it	cc
 800b9dc:	2204      	movcc	r2, #4
 800b9de:	9201      	str	r2, [sp, #4]
 800b9e0:	9a02      	ldr	r2, [sp, #8]
 800b9e2:	9303      	str	r3, [sp, #12]
 800b9e4:	429a      	cmp	r2, r3
 800b9e6:	d80c      	bhi.n	800ba02 <__multiply+0x9e>
 800b9e8:	2e00      	cmp	r6, #0
 800b9ea:	dd03      	ble.n	800b9f4 <__multiply+0x90>
 800b9ec:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d05b      	beq.n	800baac <__multiply+0x148>
 800b9f4:	6106      	str	r6, [r0, #16]
 800b9f6:	b005      	add	sp, #20
 800b9f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9fc:	f843 2b04 	str.w	r2, [r3], #4
 800ba00:	e7d8      	b.n	800b9b4 <__multiply+0x50>
 800ba02:	f8b3 a000 	ldrh.w	sl, [r3]
 800ba06:	f1ba 0f00 	cmp.w	sl, #0
 800ba0a:	d024      	beq.n	800ba56 <__multiply+0xf2>
 800ba0c:	f104 0e14 	add.w	lr, r4, #20
 800ba10:	46a9      	mov	r9, r5
 800ba12:	f04f 0c00 	mov.w	ip, #0
 800ba16:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ba1a:	f8d9 1000 	ldr.w	r1, [r9]
 800ba1e:	fa1f fb82 	uxth.w	fp, r2
 800ba22:	b289      	uxth	r1, r1
 800ba24:	fb0a 110b 	mla	r1, sl, fp, r1
 800ba28:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ba2c:	f8d9 2000 	ldr.w	r2, [r9]
 800ba30:	4461      	add	r1, ip
 800ba32:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ba36:	fb0a c20b 	mla	r2, sl, fp, ip
 800ba3a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ba3e:	b289      	uxth	r1, r1
 800ba40:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ba44:	4577      	cmp	r7, lr
 800ba46:	f849 1b04 	str.w	r1, [r9], #4
 800ba4a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ba4e:	d8e2      	bhi.n	800ba16 <__multiply+0xb2>
 800ba50:	9a01      	ldr	r2, [sp, #4]
 800ba52:	f845 c002 	str.w	ip, [r5, r2]
 800ba56:	9a03      	ldr	r2, [sp, #12]
 800ba58:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ba5c:	3304      	adds	r3, #4
 800ba5e:	f1b9 0f00 	cmp.w	r9, #0
 800ba62:	d021      	beq.n	800baa8 <__multiply+0x144>
 800ba64:	6829      	ldr	r1, [r5, #0]
 800ba66:	f104 0c14 	add.w	ip, r4, #20
 800ba6a:	46ae      	mov	lr, r5
 800ba6c:	f04f 0a00 	mov.w	sl, #0
 800ba70:	f8bc b000 	ldrh.w	fp, [ip]
 800ba74:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ba78:	fb09 220b 	mla	r2, r9, fp, r2
 800ba7c:	4452      	add	r2, sl
 800ba7e:	b289      	uxth	r1, r1
 800ba80:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ba84:	f84e 1b04 	str.w	r1, [lr], #4
 800ba88:	f85c 1b04 	ldr.w	r1, [ip], #4
 800ba8c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ba90:	f8be 1000 	ldrh.w	r1, [lr]
 800ba94:	fb09 110a 	mla	r1, r9, sl, r1
 800ba98:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800ba9c:	4567      	cmp	r7, ip
 800ba9e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800baa2:	d8e5      	bhi.n	800ba70 <__multiply+0x10c>
 800baa4:	9a01      	ldr	r2, [sp, #4]
 800baa6:	50a9      	str	r1, [r5, r2]
 800baa8:	3504      	adds	r5, #4
 800baaa:	e799      	b.n	800b9e0 <__multiply+0x7c>
 800baac:	3e01      	subs	r6, #1
 800baae:	e79b      	b.n	800b9e8 <__multiply+0x84>
 800bab0:	0800cc4f 	.word	0x0800cc4f
 800bab4:	0800cc60 	.word	0x0800cc60

0800bab8 <__pow5mult>:
 800bab8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800babc:	4615      	mov	r5, r2
 800babe:	f012 0203 	ands.w	r2, r2, #3
 800bac2:	4606      	mov	r6, r0
 800bac4:	460f      	mov	r7, r1
 800bac6:	d007      	beq.n	800bad8 <__pow5mult+0x20>
 800bac8:	4c25      	ldr	r4, [pc, #148]	; (800bb60 <__pow5mult+0xa8>)
 800baca:	3a01      	subs	r2, #1
 800bacc:	2300      	movs	r3, #0
 800bace:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bad2:	f7ff fe9d 	bl	800b810 <__multadd>
 800bad6:	4607      	mov	r7, r0
 800bad8:	10ad      	asrs	r5, r5, #2
 800bada:	d03d      	beq.n	800bb58 <__pow5mult+0xa0>
 800badc:	69f4      	ldr	r4, [r6, #28]
 800bade:	b97c      	cbnz	r4, 800bb00 <__pow5mult+0x48>
 800bae0:	2010      	movs	r0, #16
 800bae2:	f7ff fd7f 	bl	800b5e4 <malloc>
 800bae6:	4602      	mov	r2, r0
 800bae8:	61f0      	str	r0, [r6, #28]
 800baea:	b928      	cbnz	r0, 800baf8 <__pow5mult+0x40>
 800baec:	4b1d      	ldr	r3, [pc, #116]	; (800bb64 <__pow5mult+0xac>)
 800baee:	481e      	ldr	r0, [pc, #120]	; (800bb68 <__pow5mult+0xb0>)
 800baf0:	f240 11b3 	movw	r1, #435	; 0x1b3
 800baf4:	f7fe fe92 	bl	800a81c <__assert_func>
 800baf8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bafc:	6004      	str	r4, [r0, #0]
 800bafe:	60c4      	str	r4, [r0, #12]
 800bb00:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800bb04:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bb08:	b94c      	cbnz	r4, 800bb1e <__pow5mult+0x66>
 800bb0a:	f240 2171 	movw	r1, #625	; 0x271
 800bb0e:	4630      	mov	r0, r6
 800bb10:	f7ff ff12 	bl	800b938 <__i2b>
 800bb14:	2300      	movs	r3, #0
 800bb16:	f8c8 0008 	str.w	r0, [r8, #8]
 800bb1a:	4604      	mov	r4, r0
 800bb1c:	6003      	str	r3, [r0, #0]
 800bb1e:	f04f 0900 	mov.w	r9, #0
 800bb22:	07eb      	lsls	r3, r5, #31
 800bb24:	d50a      	bpl.n	800bb3c <__pow5mult+0x84>
 800bb26:	4639      	mov	r1, r7
 800bb28:	4622      	mov	r2, r4
 800bb2a:	4630      	mov	r0, r6
 800bb2c:	f7ff ff1a 	bl	800b964 <__multiply>
 800bb30:	4639      	mov	r1, r7
 800bb32:	4680      	mov	r8, r0
 800bb34:	4630      	mov	r0, r6
 800bb36:	f7ff fe49 	bl	800b7cc <_Bfree>
 800bb3a:	4647      	mov	r7, r8
 800bb3c:	106d      	asrs	r5, r5, #1
 800bb3e:	d00b      	beq.n	800bb58 <__pow5mult+0xa0>
 800bb40:	6820      	ldr	r0, [r4, #0]
 800bb42:	b938      	cbnz	r0, 800bb54 <__pow5mult+0x9c>
 800bb44:	4622      	mov	r2, r4
 800bb46:	4621      	mov	r1, r4
 800bb48:	4630      	mov	r0, r6
 800bb4a:	f7ff ff0b 	bl	800b964 <__multiply>
 800bb4e:	6020      	str	r0, [r4, #0]
 800bb50:	f8c0 9000 	str.w	r9, [r0]
 800bb54:	4604      	mov	r4, r0
 800bb56:	e7e4      	b.n	800bb22 <__pow5mult+0x6a>
 800bb58:	4638      	mov	r0, r7
 800bb5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb5e:	bf00      	nop
 800bb60:	0800cdb0 	.word	0x0800cdb0
 800bb64:	0800cb3d 	.word	0x0800cb3d
 800bb68:	0800cc60 	.word	0x0800cc60

0800bb6c <__lshift>:
 800bb6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb70:	460c      	mov	r4, r1
 800bb72:	6849      	ldr	r1, [r1, #4]
 800bb74:	6923      	ldr	r3, [r4, #16]
 800bb76:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bb7a:	68a3      	ldr	r3, [r4, #8]
 800bb7c:	4607      	mov	r7, r0
 800bb7e:	4691      	mov	r9, r2
 800bb80:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bb84:	f108 0601 	add.w	r6, r8, #1
 800bb88:	42b3      	cmp	r3, r6
 800bb8a:	db0b      	blt.n	800bba4 <__lshift+0x38>
 800bb8c:	4638      	mov	r0, r7
 800bb8e:	f7ff fddd 	bl	800b74c <_Balloc>
 800bb92:	4605      	mov	r5, r0
 800bb94:	b948      	cbnz	r0, 800bbaa <__lshift+0x3e>
 800bb96:	4602      	mov	r2, r0
 800bb98:	4b28      	ldr	r3, [pc, #160]	; (800bc3c <__lshift+0xd0>)
 800bb9a:	4829      	ldr	r0, [pc, #164]	; (800bc40 <__lshift+0xd4>)
 800bb9c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800bba0:	f7fe fe3c 	bl	800a81c <__assert_func>
 800bba4:	3101      	adds	r1, #1
 800bba6:	005b      	lsls	r3, r3, #1
 800bba8:	e7ee      	b.n	800bb88 <__lshift+0x1c>
 800bbaa:	2300      	movs	r3, #0
 800bbac:	f100 0114 	add.w	r1, r0, #20
 800bbb0:	f100 0210 	add.w	r2, r0, #16
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	4553      	cmp	r3, sl
 800bbb8:	db33      	blt.n	800bc22 <__lshift+0xb6>
 800bbba:	6920      	ldr	r0, [r4, #16]
 800bbbc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bbc0:	f104 0314 	add.w	r3, r4, #20
 800bbc4:	f019 091f 	ands.w	r9, r9, #31
 800bbc8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bbcc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bbd0:	d02b      	beq.n	800bc2a <__lshift+0xbe>
 800bbd2:	f1c9 0e20 	rsb	lr, r9, #32
 800bbd6:	468a      	mov	sl, r1
 800bbd8:	2200      	movs	r2, #0
 800bbda:	6818      	ldr	r0, [r3, #0]
 800bbdc:	fa00 f009 	lsl.w	r0, r0, r9
 800bbe0:	4310      	orrs	r0, r2
 800bbe2:	f84a 0b04 	str.w	r0, [sl], #4
 800bbe6:	f853 2b04 	ldr.w	r2, [r3], #4
 800bbea:	459c      	cmp	ip, r3
 800bbec:	fa22 f20e 	lsr.w	r2, r2, lr
 800bbf0:	d8f3      	bhi.n	800bbda <__lshift+0x6e>
 800bbf2:	ebac 0304 	sub.w	r3, ip, r4
 800bbf6:	3b15      	subs	r3, #21
 800bbf8:	f023 0303 	bic.w	r3, r3, #3
 800bbfc:	3304      	adds	r3, #4
 800bbfe:	f104 0015 	add.w	r0, r4, #21
 800bc02:	4584      	cmp	ip, r0
 800bc04:	bf38      	it	cc
 800bc06:	2304      	movcc	r3, #4
 800bc08:	50ca      	str	r2, [r1, r3]
 800bc0a:	b10a      	cbz	r2, 800bc10 <__lshift+0xa4>
 800bc0c:	f108 0602 	add.w	r6, r8, #2
 800bc10:	3e01      	subs	r6, #1
 800bc12:	4638      	mov	r0, r7
 800bc14:	612e      	str	r6, [r5, #16]
 800bc16:	4621      	mov	r1, r4
 800bc18:	f7ff fdd8 	bl	800b7cc <_Bfree>
 800bc1c:	4628      	mov	r0, r5
 800bc1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc22:	f842 0f04 	str.w	r0, [r2, #4]!
 800bc26:	3301      	adds	r3, #1
 800bc28:	e7c5      	b.n	800bbb6 <__lshift+0x4a>
 800bc2a:	3904      	subs	r1, #4
 800bc2c:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc30:	f841 2f04 	str.w	r2, [r1, #4]!
 800bc34:	459c      	cmp	ip, r3
 800bc36:	d8f9      	bhi.n	800bc2c <__lshift+0xc0>
 800bc38:	e7ea      	b.n	800bc10 <__lshift+0xa4>
 800bc3a:	bf00      	nop
 800bc3c:	0800cc4f 	.word	0x0800cc4f
 800bc40:	0800cc60 	.word	0x0800cc60

0800bc44 <__mcmp>:
 800bc44:	b530      	push	{r4, r5, lr}
 800bc46:	6902      	ldr	r2, [r0, #16]
 800bc48:	690c      	ldr	r4, [r1, #16]
 800bc4a:	1b12      	subs	r2, r2, r4
 800bc4c:	d10e      	bne.n	800bc6c <__mcmp+0x28>
 800bc4e:	f100 0314 	add.w	r3, r0, #20
 800bc52:	3114      	adds	r1, #20
 800bc54:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bc58:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bc5c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bc60:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bc64:	42a5      	cmp	r5, r4
 800bc66:	d003      	beq.n	800bc70 <__mcmp+0x2c>
 800bc68:	d305      	bcc.n	800bc76 <__mcmp+0x32>
 800bc6a:	2201      	movs	r2, #1
 800bc6c:	4610      	mov	r0, r2
 800bc6e:	bd30      	pop	{r4, r5, pc}
 800bc70:	4283      	cmp	r3, r0
 800bc72:	d3f3      	bcc.n	800bc5c <__mcmp+0x18>
 800bc74:	e7fa      	b.n	800bc6c <__mcmp+0x28>
 800bc76:	f04f 32ff 	mov.w	r2, #4294967295
 800bc7a:	e7f7      	b.n	800bc6c <__mcmp+0x28>

0800bc7c <__mdiff>:
 800bc7c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc80:	460c      	mov	r4, r1
 800bc82:	4606      	mov	r6, r0
 800bc84:	4611      	mov	r1, r2
 800bc86:	4620      	mov	r0, r4
 800bc88:	4690      	mov	r8, r2
 800bc8a:	f7ff ffdb 	bl	800bc44 <__mcmp>
 800bc8e:	1e05      	subs	r5, r0, #0
 800bc90:	d110      	bne.n	800bcb4 <__mdiff+0x38>
 800bc92:	4629      	mov	r1, r5
 800bc94:	4630      	mov	r0, r6
 800bc96:	f7ff fd59 	bl	800b74c <_Balloc>
 800bc9a:	b930      	cbnz	r0, 800bcaa <__mdiff+0x2e>
 800bc9c:	4b3a      	ldr	r3, [pc, #232]	; (800bd88 <__mdiff+0x10c>)
 800bc9e:	4602      	mov	r2, r0
 800bca0:	f240 2137 	movw	r1, #567	; 0x237
 800bca4:	4839      	ldr	r0, [pc, #228]	; (800bd8c <__mdiff+0x110>)
 800bca6:	f7fe fdb9 	bl	800a81c <__assert_func>
 800bcaa:	2301      	movs	r3, #1
 800bcac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bcb0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcb4:	bfa4      	itt	ge
 800bcb6:	4643      	movge	r3, r8
 800bcb8:	46a0      	movge	r8, r4
 800bcba:	4630      	mov	r0, r6
 800bcbc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800bcc0:	bfa6      	itte	ge
 800bcc2:	461c      	movge	r4, r3
 800bcc4:	2500      	movge	r5, #0
 800bcc6:	2501      	movlt	r5, #1
 800bcc8:	f7ff fd40 	bl	800b74c <_Balloc>
 800bccc:	b920      	cbnz	r0, 800bcd8 <__mdiff+0x5c>
 800bcce:	4b2e      	ldr	r3, [pc, #184]	; (800bd88 <__mdiff+0x10c>)
 800bcd0:	4602      	mov	r2, r0
 800bcd2:	f240 2145 	movw	r1, #581	; 0x245
 800bcd6:	e7e5      	b.n	800bca4 <__mdiff+0x28>
 800bcd8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800bcdc:	6926      	ldr	r6, [r4, #16]
 800bcde:	60c5      	str	r5, [r0, #12]
 800bce0:	f104 0914 	add.w	r9, r4, #20
 800bce4:	f108 0514 	add.w	r5, r8, #20
 800bce8:	f100 0e14 	add.w	lr, r0, #20
 800bcec:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800bcf0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bcf4:	f108 0210 	add.w	r2, r8, #16
 800bcf8:	46f2      	mov	sl, lr
 800bcfa:	2100      	movs	r1, #0
 800bcfc:	f859 3b04 	ldr.w	r3, [r9], #4
 800bd00:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800bd04:	fa11 f88b 	uxtah	r8, r1, fp
 800bd08:	b299      	uxth	r1, r3
 800bd0a:	0c1b      	lsrs	r3, r3, #16
 800bd0c:	eba8 0801 	sub.w	r8, r8, r1
 800bd10:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bd14:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800bd18:	fa1f f888 	uxth.w	r8, r8
 800bd1c:	1419      	asrs	r1, r3, #16
 800bd1e:	454e      	cmp	r6, r9
 800bd20:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800bd24:	f84a 3b04 	str.w	r3, [sl], #4
 800bd28:	d8e8      	bhi.n	800bcfc <__mdiff+0x80>
 800bd2a:	1b33      	subs	r3, r6, r4
 800bd2c:	3b15      	subs	r3, #21
 800bd2e:	f023 0303 	bic.w	r3, r3, #3
 800bd32:	3304      	adds	r3, #4
 800bd34:	3415      	adds	r4, #21
 800bd36:	42a6      	cmp	r6, r4
 800bd38:	bf38      	it	cc
 800bd3a:	2304      	movcc	r3, #4
 800bd3c:	441d      	add	r5, r3
 800bd3e:	4473      	add	r3, lr
 800bd40:	469e      	mov	lr, r3
 800bd42:	462e      	mov	r6, r5
 800bd44:	4566      	cmp	r6, ip
 800bd46:	d30e      	bcc.n	800bd66 <__mdiff+0xea>
 800bd48:	f10c 0203 	add.w	r2, ip, #3
 800bd4c:	1b52      	subs	r2, r2, r5
 800bd4e:	f022 0203 	bic.w	r2, r2, #3
 800bd52:	3d03      	subs	r5, #3
 800bd54:	45ac      	cmp	ip, r5
 800bd56:	bf38      	it	cc
 800bd58:	2200      	movcc	r2, #0
 800bd5a:	4413      	add	r3, r2
 800bd5c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800bd60:	b17a      	cbz	r2, 800bd82 <__mdiff+0x106>
 800bd62:	6107      	str	r7, [r0, #16]
 800bd64:	e7a4      	b.n	800bcb0 <__mdiff+0x34>
 800bd66:	f856 8b04 	ldr.w	r8, [r6], #4
 800bd6a:	fa11 f288 	uxtah	r2, r1, r8
 800bd6e:	1414      	asrs	r4, r2, #16
 800bd70:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800bd74:	b292      	uxth	r2, r2
 800bd76:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800bd7a:	f84e 2b04 	str.w	r2, [lr], #4
 800bd7e:	1421      	asrs	r1, r4, #16
 800bd80:	e7e0      	b.n	800bd44 <__mdiff+0xc8>
 800bd82:	3f01      	subs	r7, #1
 800bd84:	e7ea      	b.n	800bd5c <__mdiff+0xe0>
 800bd86:	bf00      	nop
 800bd88:	0800cc4f 	.word	0x0800cc4f
 800bd8c:	0800cc60 	.word	0x0800cc60

0800bd90 <__d2b>:
 800bd90:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bd94:	460f      	mov	r7, r1
 800bd96:	2101      	movs	r1, #1
 800bd98:	ec59 8b10 	vmov	r8, r9, d0
 800bd9c:	4616      	mov	r6, r2
 800bd9e:	f7ff fcd5 	bl	800b74c <_Balloc>
 800bda2:	4604      	mov	r4, r0
 800bda4:	b930      	cbnz	r0, 800bdb4 <__d2b+0x24>
 800bda6:	4602      	mov	r2, r0
 800bda8:	4b24      	ldr	r3, [pc, #144]	; (800be3c <__d2b+0xac>)
 800bdaa:	4825      	ldr	r0, [pc, #148]	; (800be40 <__d2b+0xb0>)
 800bdac:	f240 310f 	movw	r1, #783	; 0x30f
 800bdb0:	f7fe fd34 	bl	800a81c <__assert_func>
 800bdb4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bdb8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bdbc:	bb2d      	cbnz	r5, 800be0a <__d2b+0x7a>
 800bdbe:	9301      	str	r3, [sp, #4]
 800bdc0:	f1b8 0300 	subs.w	r3, r8, #0
 800bdc4:	d026      	beq.n	800be14 <__d2b+0x84>
 800bdc6:	4668      	mov	r0, sp
 800bdc8:	9300      	str	r3, [sp, #0]
 800bdca:	f7ff fd87 	bl	800b8dc <__lo0bits>
 800bdce:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bdd2:	b1e8      	cbz	r0, 800be10 <__d2b+0x80>
 800bdd4:	f1c0 0320 	rsb	r3, r0, #32
 800bdd8:	fa02 f303 	lsl.w	r3, r2, r3
 800bddc:	430b      	orrs	r3, r1
 800bdde:	40c2      	lsrs	r2, r0
 800bde0:	6163      	str	r3, [r4, #20]
 800bde2:	9201      	str	r2, [sp, #4]
 800bde4:	9b01      	ldr	r3, [sp, #4]
 800bde6:	61a3      	str	r3, [r4, #24]
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	bf14      	ite	ne
 800bdec:	2202      	movne	r2, #2
 800bdee:	2201      	moveq	r2, #1
 800bdf0:	6122      	str	r2, [r4, #16]
 800bdf2:	b1bd      	cbz	r5, 800be24 <__d2b+0x94>
 800bdf4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800bdf8:	4405      	add	r5, r0
 800bdfa:	603d      	str	r5, [r7, #0]
 800bdfc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800be00:	6030      	str	r0, [r6, #0]
 800be02:	4620      	mov	r0, r4
 800be04:	b003      	add	sp, #12
 800be06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800be0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800be0e:	e7d6      	b.n	800bdbe <__d2b+0x2e>
 800be10:	6161      	str	r1, [r4, #20]
 800be12:	e7e7      	b.n	800bde4 <__d2b+0x54>
 800be14:	a801      	add	r0, sp, #4
 800be16:	f7ff fd61 	bl	800b8dc <__lo0bits>
 800be1a:	9b01      	ldr	r3, [sp, #4]
 800be1c:	6163      	str	r3, [r4, #20]
 800be1e:	3020      	adds	r0, #32
 800be20:	2201      	movs	r2, #1
 800be22:	e7e5      	b.n	800bdf0 <__d2b+0x60>
 800be24:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800be28:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800be2c:	6038      	str	r0, [r7, #0]
 800be2e:	6918      	ldr	r0, [r3, #16]
 800be30:	f7ff fd34 	bl	800b89c <__hi0bits>
 800be34:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800be38:	e7e2      	b.n	800be00 <__d2b+0x70>
 800be3a:	bf00      	nop
 800be3c:	0800cc4f 	.word	0x0800cc4f
 800be40:	0800cc60 	.word	0x0800cc60

0800be44 <__ssputs_r>:
 800be44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be48:	688e      	ldr	r6, [r1, #8]
 800be4a:	461f      	mov	r7, r3
 800be4c:	42be      	cmp	r6, r7
 800be4e:	680b      	ldr	r3, [r1, #0]
 800be50:	4682      	mov	sl, r0
 800be52:	460c      	mov	r4, r1
 800be54:	4690      	mov	r8, r2
 800be56:	d82c      	bhi.n	800beb2 <__ssputs_r+0x6e>
 800be58:	898a      	ldrh	r2, [r1, #12]
 800be5a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800be5e:	d026      	beq.n	800beae <__ssputs_r+0x6a>
 800be60:	6965      	ldr	r5, [r4, #20]
 800be62:	6909      	ldr	r1, [r1, #16]
 800be64:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800be68:	eba3 0901 	sub.w	r9, r3, r1
 800be6c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800be70:	1c7b      	adds	r3, r7, #1
 800be72:	444b      	add	r3, r9
 800be74:	106d      	asrs	r5, r5, #1
 800be76:	429d      	cmp	r5, r3
 800be78:	bf38      	it	cc
 800be7a:	461d      	movcc	r5, r3
 800be7c:	0553      	lsls	r3, r2, #21
 800be7e:	d527      	bpl.n	800bed0 <__ssputs_r+0x8c>
 800be80:	4629      	mov	r1, r5
 800be82:	f7ff fbd7 	bl	800b634 <_malloc_r>
 800be86:	4606      	mov	r6, r0
 800be88:	b360      	cbz	r0, 800bee4 <__ssputs_r+0xa0>
 800be8a:	6921      	ldr	r1, [r4, #16]
 800be8c:	464a      	mov	r2, r9
 800be8e:	f000 fbf5 	bl	800c67c <memcpy>
 800be92:	89a3      	ldrh	r3, [r4, #12]
 800be94:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800be98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be9c:	81a3      	strh	r3, [r4, #12]
 800be9e:	6126      	str	r6, [r4, #16]
 800bea0:	6165      	str	r5, [r4, #20]
 800bea2:	444e      	add	r6, r9
 800bea4:	eba5 0509 	sub.w	r5, r5, r9
 800bea8:	6026      	str	r6, [r4, #0]
 800beaa:	60a5      	str	r5, [r4, #8]
 800beac:	463e      	mov	r6, r7
 800beae:	42be      	cmp	r6, r7
 800beb0:	d900      	bls.n	800beb4 <__ssputs_r+0x70>
 800beb2:	463e      	mov	r6, r7
 800beb4:	6820      	ldr	r0, [r4, #0]
 800beb6:	4632      	mov	r2, r6
 800beb8:	4641      	mov	r1, r8
 800beba:	f000 fbb5 	bl	800c628 <memmove>
 800bebe:	68a3      	ldr	r3, [r4, #8]
 800bec0:	1b9b      	subs	r3, r3, r6
 800bec2:	60a3      	str	r3, [r4, #8]
 800bec4:	6823      	ldr	r3, [r4, #0]
 800bec6:	4433      	add	r3, r6
 800bec8:	6023      	str	r3, [r4, #0]
 800beca:	2000      	movs	r0, #0
 800becc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bed0:	462a      	mov	r2, r5
 800bed2:	f000 fc10 	bl	800c6f6 <_realloc_r>
 800bed6:	4606      	mov	r6, r0
 800bed8:	2800      	cmp	r0, #0
 800beda:	d1e0      	bne.n	800be9e <__ssputs_r+0x5a>
 800bedc:	6921      	ldr	r1, [r4, #16]
 800bede:	4650      	mov	r0, sl
 800bee0:	f7ff fb34 	bl	800b54c <_free_r>
 800bee4:	230c      	movs	r3, #12
 800bee6:	f8ca 3000 	str.w	r3, [sl]
 800beea:	89a3      	ldrh	r3, [r4, #12]
 800beec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bef0:	81a3      	strh	r3, [r4, #12]
 800bef2:	f04f 30ff 	mov.w	r0, #4294967295
 800bef6:	e7e9      	b.n	800becc <__ssputs_r+0x88>

0800bef8 <_svfiprintf_r>:
 800bef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800befc:	4698      	mov	r8, r3
 800befe:	898b      	ldrh	r3, [r1, #12]
 800bf00:	061b      	lsls	r3, r3, #24
 800bf02:	b09d      	sub	sp, #116	; 0x74
 800bf04:	4607      	mov	r7, r0
 800bf06:	460d      	mov	r5, r1
 800bf08:	4614      	mov	r4, r2
 800bf0a:	d50e      	bpl.n	800bf2a <_svfiprintf_r+0x32>
 800bf0c:	690b      	ldr	r3, [r1, #16]
 800bf0e:	b963      	cbnz	r3, 800bf2a <_svfiprintf_r+0x32>
 800bf10:	2140      	movs	r1, #64	; 0x40
 800bf12:	f7ff fb8f 	bl	800b634 <_malloc_r>
 800bf16:	6028      	str	r0, [r5, #0]
 800bf18:	6128      	str	r0, [r5, #16]
 800bf1a:	b920      	cbnz	r0, 800bf26 <_svfiprintf_r+0x2e>
 800bf1c:	230c      	movs	r3, #12
 800bf1e:	603b      	str	r3, [r7, #0]
 800bf20:	f04f 30ff 	mov.w	r0, #4294967295
 800bf24:	e0d0      	b.n	800c0c8 <_svfiprintf_r+0x1d0>
 800bf26:	2340      	movs	r3, #64	; 0x40
 800bf28:	616b      	str	r3, [r5, #20]
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	9309      	str	r3, [sp, #36]	; 0x24
 800bf2e:	2320      	movs	r3, #32
 800bf30:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bf34:	f8cd 800c 	str.w	r8, [sp, #12]
 800bf38:	2330      	movs	r3, #48	; 0x30
 800bf3a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c0e0 <_svfiprintf_r+0x1e8>
 800bf3e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bf42:	f04f 0901 	mov.w	r9, #1
 800bf46:	4623      	mov	r3, r4
 800bf48:	469a      	mov	sl, r3
 800bf4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bf4e:	b10a      	cbz	r2, 800bf54 <_svfiprintf_r+0x5c>
 800bf50:	2a25      	cmp	r2, #37	; 0x25
 800bf52:	d1f9      	bne.n	800bf48 <_svfiprintf_r+0x50>
 800bf54:	ebba 0b04 	subs.w	fp, sl, r4
 800bf58:	d00b      	beq.n	800bf72 <_svfiprintf_r+0x7a>
 800bf5a:	465b      	mov	r3, fp
 800bf5c:	4622      	mov	r2, r4
 800bf5e:	4629      	mov	r1, r5
 800bf60:	4638      	mov	r0, r7
 800bf62:	f7ff ff6f 	bl	800be44 <__ssputs_r>
 800bf66:	3001      	adds	r0, #1
 800bf68:	f000 80a9 	beq.w	800c0be <_svfiprintf_r+0x1c6>
 800bf6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bf6e:	445a      	add	r2, fp
 800bf70:	9209      	str	r2, [sp, #36]	; 0x24
 800bf72:	f89a 3000 	ldrb.w	r3, [sl]
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	f000 80a1 	beq.w	800c0be <_svfiprintf_r+0x1c6>
 800bf7c:	2300      	movs	r3, #0
 800bf7e:	f04f 32ff 	mov.w	r2, #4294967295
 800bf82:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bf86:	f10a 0a01 	add.w	sl, sl, #1
 800bf8a:	9304      	str	r3, [sp, #16]
 800bf8c:	9307      	str	r3, [sp, #28]
 800bf8e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bf92:	931a      	str	r3, [sp, #104]	; 0x68
 800bf94:	4654      	mov	r4, sl
 800bf96:	2205      	movs	r2, #5
 800bf98:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf9c:	4850      	ldr	r0, [pc, #320]	; (800c0e0 <_svfiprintf_r+0x1e8>)
 800bf9e:	f7f4 f94f 	bl	8000240 <memchr>
 800bfa2:	9a04      	ldr	r2, [sp, #16]
 800bfa4:	b9d8      	cbnz	r0, 800bfde <_svfiprintf_r+0xe6>
 800bfa6:	06d0      	lsls	r0, r2, #27
 800bfa8:	bf44      	itt	mi
 800bfaa:	2320      	movmi	r3, #32
 800bfac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bfb0:	0711      	lsls	r1, r2, #28
 800bfb2:	bf44      	itt	mi
 800bfb4:	232b      	movmi	r3, #43	; 0x2b
 800bfb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bfba:	f89a 3000 	ldrb.w	r3, [sl]
 800bfbe:	2b2a      	cmp	r3, #42	; 0x2a
 800bfc0:	d015      	beq.n	800bfee <_svfiprintf_r+0xf6>
 800bfc2:	9a07      	ldr	r2, [sp, #28]
 800bfc4:	4654      	mov	r4, sl
 800bfc6:	2000      	movs	r0, #0
 800bfc8:	f04f 0c0a 	mov.w	ip, #10
 800bfcc:	4621      	mov	r1, r4
 800bfce:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bfd2:	3b30      	subs	r3, #48	; 0x30
 800bfd4:	2b09      	cmp	r3, #9
 800bfd6:	d94d      	bls.n	800c074 <_svfiprintf_r+0x17c>
 800bfd8:	b1b0      	cbz	r0, 800c008 <_svfiprintf_r+0x110>
 800bfda:	9207      	str	r2, [sp, #28]
 800bfdc:	e014      	b.n	800c008 <_svfiprintf_r+0x110>
 800bfde:	eba0 0308 	sub.w	r3, r0, r8
 800bfe2:	fa09 f303 	lsl.w	r3, r9, r3
 800bfe6:	4313      	orrs	r3, r2
 800bfe8:	9304      	str	r3, [sp, #16]
 800bfea:	46a2      	mov	sl, r4
 800bfec:	e7d2      	b.n	800bf94 <_svfiprintf_r+0x9c>
 800bfee:	9b03      	ldr	r3, [sp, #12]
 800bff0:	1d19      	adds	r1, r3, #4
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	9103      	str	r1, [sp, #12]
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	bfbb      	ittet	lt
 800bffa:	425b      	neglt	r3, r3
 800bffc:	f042 0202 	orrlt.w	r2, r2, #2
 800c000:	9307      	strge	r3, [sp, #28]
 800c002:	9307      	strlt	r3, [sp, #28]
 800c004:	bfb8      	it	lt
 800c006:	9204      	strlt	r2, [sp, #16]
 800c008:	7823      	ldrb	r3, [r4, #0]
 800c00a:	2b2e      	cmp	r3, #46	; 0x2e
 800c00c:	d10c      	bne.n	800c028 <_svfiprintf_r+0x130>
 800c00e:	7863      	ldrb	r3, [r4, #1]
 800c010:	2b2a      	cmp	r3, #42	; 0x2a
 800c012:	d134      	bne.n	800c07e <_svfiprintf_r+0x186>
 800c014:	9b03      	ldr	r3, [sp, #12]
 800c016:	1d1a      	adds	r2, r3, #4
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	9203      	str	r2, [sp, #12]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	bfb8      	it	lt
 800c020:	f04f 33ff 	movlt.w	r3, #4294967295
 800c024:	3402      	adds	r4, #2
 800c026:	9305      	str	r3, [sp, #20]
 800c028:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800c0f0 <_svfiprintf_r+0x1f8>
 800c02c:	7821      	ldrb	r1, [r4, #0]
 800c02e:	2203      	movs	r2, #3
 800c030:	4650      	mov	r0, sl
 800c032:	f7f4 f905 	bl	8000240 <memchr>
 800c036:	b138      	cbz	r0, 800c048 <_svfiprintf_r+0x150>
 800c038:	9b04      	ldr	r3, [sp, #16]
 800c03a:	eba0 000a 	sub.w	r0, r0, sl
 800c03e:	2240      	movs	r2, #64	; 0x40
 800c040:	4082      	lsls	r2, r0
 800c042:	4313      	orrs	r3, r2
 800c044:	3401      	adds	r4, #1
 800c046:	9304      	str	r3, [sp, #16]
 800c048:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c04c:	4825      	ldr	r0, [pc, #148]	; (800c0e4 <_svfiprintf_r+0x1ec>)
 800c04e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c052:	2206      	movs	r2, #6
 800c054:	f7f4 f8f4 	bl	8000240 <memchr>
 800c058:	2800      	cmp	r0, #0
 800c05a:	d038      	beq.n	800c0ce <_svfiprintf_r+0x1d6>
 800c05c:	4b22      	ldr	r3, [pc, #136]	; (800c0e8 <_svfiprintf_r+0x1f0>)
 800c05e:	bb1b      	cbnz	r3, 800c0a8 <_svfiprintf_r+0x1b0>
 800c060:	9b03      	ldr	r3, [sp, #12]
 800c062:	3307      	adds	r3, #7
 800c064:	f023 0307 	bic.w	r3, r3, #7
 800c068:	3308      	adds	r3, #8
 800c06a:	9303      	str	r3, [sp, #12]
 800c06c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c06e:	4433      	add	r3, r6
 800c070:	9309      	str	r3, [sp, #36]	; 0x24
 800c072:	e768      	b.n	800bf46 <_svfiprintf_r+0x4e>
 800c074:	fb0c 3202 	mla	r2, ip, r2, r3
 800c078:	460c      	mov	r4, r1
 800c07a:	2001      	movs	r0, #1
 800c07c:	e7a6      	b.n	800bfcc <_svfiprintf_r+0xd4>
 800c07e:	2300      	movs	r3, #0
 800c080:	3401      	adds	r4, #1
 800c082:	9305      	str	r3, [sp, #20]
 800c084:	4619      	mov	r1, r3
 800c086:	f04f 0c0a 	mov.w	ip, #10
 800c08a:	4620      	mov	r0, r4
 800c08c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c090:	3a30      	subs	r2, #48	; 0x30
 800c092:	2a09      	cmp	r2, #9
 800c094:	d903      	bls.n	800c09e <_svfiprintf_r+0x1a6>
 800c096:	2b00      	cmp	r3, #0
 800c098:	d0c6      	beq.n	800c028 <_svfiprintf_r+0x130>
 800c09a:	9105      	str	r1, [sp, #20]
 800c09c:	e7c4      	b.n	800c028 <_svfiprintf_r+0x130>
 800c09e:	fb0c 2101 	mla	r1, ip, r1, r2
 800c0a2:	4604      	mov	r4, r0
 800c0a4:	2301      	movs	r3, #1
 800c0a6:	e7f0      	b.n	800c08a <_svfiprintf_r+0x192>
 800c0a8:	ab03      	add	r3, sp, #12
 800c0aa:	9300      	str	r3, [sp, #0]
 800c0ac:	462a      	mov	r2, r5
 800c0ae:	4b0f      	ldr	r3, [pc, #60]	; (800c0ec <_svfiprintf_r+0x1f4>)
 800c0b0:	a904      	add	r1, sp, #16
 800c0b2:	4638      	mov	r0, r7
 800c0b4:	f7fd fda6 	bl	8009c04 <_printf_float>
 800c0b8:	1c42      	adds	r2, r0, #1
 800c0ba:	4606      	mov	r6, r0
 800c0bc:	d1d6      	bne.n	800c06c <_svfiprintf_r+0x174>
 800c0be:	89ab      	ldrh	r3, [r5, #12]
 800c0c0:	065b      	lsls	r3, r3, #25
 800c0c2:	f53f af2d 	bmi.w	800bf20 <_svfiprintf_r+0x28>
 800c0c6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c0c8:	b01d      	add	sp, #116	; 0x74
 800c0ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0ce:	ab03      	add	r3, sp, #12
 800c0d0:	9300      	str	r3, [sp, #0]
 800c0d2:	462a      	mov	r2, r5
 800c0d4:	4b05      	ldr	r3, [pc, #20]	; (800c0ec <_svfiprintf_r+0x1f4>)
 800c0d6:	a904      	add	r1, sp, #16
 800c0d8:	4638      	mov	r0, r7
 800c0da:	f7fe f837 	bl	800a14c <_printf_i>
 800c0de:	e7eb      	b.n	800c0b8 <_svfiprintf_r+0x1c0>
 800c0e0:	0800cdbc 	.word	0x0800cdbc
 800c0e4:	0800cdc6 	.word	0x0800cdc6
 800c0e8:	08009c05 	.word	0x08009c05
 800c0ec:	0800be45 	.word	0x0800be45
 800c0f0:	0800cdc2 	.word	0x0800cdc2

0800c0f4 <__sfputc_r>:
 800c0f4:	6893      	ldr	r3, [r2, #8]
 800c0f6:	3b01      	subs	r3, #1
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	b410      	push	{r4}
 800c0fc:	6093      	str	r3, [r2, #8]
 800c0fe:	da08      	bge.n	800c112 <__sfputc_r+0x1e>
 800c100:	6994      	ldr	r4, [r2, #24]
 800c102:	42a3      	cmp	r3, r4
 800c104:	db01      	blt.n	800c10a <__sfputc_r+0x16>
 800c106:	290a      	cmp	r1, #10
 800c108:	d103      	bne.n	800c112 <__sfputc_r+0x1e>
 800c10a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c10e:	f000 b9f5 	b.w	800c4fc <__swbuf_r>
 800c112:	6813      	ldr	r3, [r2, #0]
 800c114:	1c58      	adds	r0, r3, #1
 800c116:	6010      	str	r0, [r2, #0]
 800c118:	7019      	strb	r1, [r3, #0]
 800c11a:	4608      	mov	r0, r1
 800c11c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c120:	4770      	bx	lr

0800c122 <__sfputs_r>:
 800c122:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c124:	4606      	mov	r6, r0
 800c126:	460f      	mov	r7, r1
 800c128:	4614      	mov	r4, r2
 800c12a:	18d5      	adds	r5, r2, r3
 800c12c:	42ac      	cmp	r4, r5
 800c12e:	d101      	bne.n	800c134 <__sfputs_r+0x12>
 800c130:	2000      	movs	r0, #0
 800c132:	e007      	b.n	800c144 <__sfputs_r+0x22>
 800c134:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c138:	463a      	mov	r2, r7
 800c13a:	4630      	mov	r0, r6
 800c13c:	f7ff ffda 	bl	800c0f4 <__sfputc_r>
 800c140:	1c43      	adds	r3, r0, #1
 800c142:	d1f3      	bne.n	800c12c <__sfputs_r+0xa>
 800c144:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c148 <_vfiprintf_r>:
 800c148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c14c:	460d      	mov	r5, r1
 800c14e:	b09d      	sub	sp, #116	; 0x74
 800c150:	4614      	mov	r4, r2
 800c152:	4698      	mov	r8, r3
 800c154:	4606      	mov	r6, r0
 800c156:	b118      	cbz	r0, 800c160 <_vfiprintf_r+0x18>
 800c158:	6a03      	ldr	r3, [r0, #32]
 800c15a:	b90b      	cbnz	r3, 800c160 <_vfiprintf_r+0x18>
 800c15c:	f7fe f992 	bl	800a484 <__sinit>
 800c160:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c162:	07d9      	lsls	r1, r3, #31
 800c164:	d405      	bmi.n	800c172 <_vfiprintf_r+0x2a>
 800c166:	89ab      	ldrh	r3, [r5, #12]
 800c168:	059a      	lsls	r2, r3, #22
 800c16a:	d402      	bmi.n	800c172 <_vfiprintf_r+0x2a>
 800c16c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c16e:	f7fe fb53 	bl	800a818 <__retarget_lock_acquire_recursive>
 800c172:	89ab      	ldrh	r3, [r5, #12]
 800c174:	071b      	lsls	r3, r3, #28
 800c176:	d501      	bpl.n	800c17c <_vfiprintf_r+0x34>
 800c178:	692b      	ldr	r3, [r5, #16]
 800c17a:	b99b      	cbnz	r3, 800c1a4 <_vfiprintf_r+0x5c>
 800c17c:	4629      	mov	r1, r5
 800c17e:	4630      	mov	r0, r6
 800c180:	f000 f9fa 	bl	800c578 <__swsetup_r>
 800c184:	b170      	cbz	r0, 800c1a4 <_vfiprintf_r+0x5c>
 800c186:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c188:	07dc      	lsls	r4, r3, #31
 800c18a:	d504      	bpl.n	800c196 <_vfiprintf_r+0x4e>
 800c18c:	f04f 30ff 	mov.w	r0, #4294967295
 800c190:	b01d      	add	sp, #116	; 0x74
 800c192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c196:	89ab      	ldrh	r3, [r5, #12]
 800c198:	0598      	lsls	r0, r3, #22
 800c19a:	d4f7      	bmi.n	800c18c <_vfiprintf_r+0x44>
 800c19c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c19e:	f7fe fb3c 	bl	800a81a <__retarget_lock_release_recursive>
 800c1a2:	e7f3      	b.n	800c18c <_vfiprintf_r+0x44>
 800c1a4:	2300      	movs	r3, #0
 800c1a6:	9309      	str	r3, [sp, #36]	; 0x24
 800c1a8:	2320      	movs	r3, #32
 800c1aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c1ae:	f8cd 800c 	str.w	r8, [sp, #12]
 800c1b2:	2330      	movs	r3, #48	; 0x30
 800c1b4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800c368 <_vfiprintf_r+0x220>
 800c1b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c1bc:	f04f 0901 	mov.w	r9, #1
 800c1c0:	4623      	mov	r3, r4
 800c1c2:	469a      	mov	sl, r3
 800c1c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c1c8:	b10a      	cbz	r2, 800c1ce <_vfiprintf_r+0x86>
 800c1ca:	2a25      	cmp	r2, #37	; 0x25
 800c1cc:	d1f9      	bne.n	800c1c2 <_vfiprintf_r+0x7a>
 800c1ce:	ebba 0b04 	subs.w	fp, sl, r4
 800c1d2:	d00b      	beq.n	800c1ec <_vfiprintf_r+0xa4>
 800c1d4:	465b      	mov	r3, fp
 800c1d6:	4622      	mov	r2, r4
 800c1d8:	4629      	mov	r1, r5
 800c1da:	4630      	mov	r0, r6
 800c1dc:	f7ff ffa1 	bl	800c122 <__sfputs_r>
 800c1e0:	3001      	adds	r0, #1
 800c1e2:	f000 80a9 	beq.w	800c338 <_vfiprintf_r+0x1f0>
 800c1e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c1e8:	445a      	add	r2, fp
 800c1ea:	9209      	str	r2, [sp, #36]	; 0x24
 800c1ec:	f89a 3000 	ldrb.w	r3, [sl]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	f000 80a1 	beq.w	800c338 <_vfiprintf_r+0x1f0>
 800c1f6:	2300      	movs	r3, #0
 800c1f8:	f04f 32ff 	mov.w	r2, #4294967295
 800c1fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c200:	f10a 0a01 	add.w	sl, sl, #1
 800c204:	9304      	str	r3, [sp, #16]
 800c206:	9307      	str	r3, [sp, #28]
 800c208:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c20c:	931a      	str	r3, [sp, #104]	; 0x68
 800c20e:	4654      	mov	r4, sl
 800c210:	2205      	movs	r2, #5
 800c212:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c216:	4854      	ldr	r0, [pc, #336]	; (800c368 <_vfiprintf_r+0x220>)
 800c218:	f7f4 f812 	bl	8000240 <memchr>
 800c21c:	9a04      	ldr	r2, [sp, #16]
 800c21e:	b9d8      	cbnz	r0, 800c258 <_vfiprintf_r+0x110>
 800c220:	06d1      	lsls	r1, r2, #27
 800c222:	bf44      	itt	mi
 800c224:	2320      	movmi	r3, #32
 800c226:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c22a:	0713      	lsls	r3, r2, #28
 800c22c:	bf44      	itt	mi
 800c22e:	232b      	movmi	r3, #43	; 0x2b
 800c230:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c234:	f89a 3000 	ldrb.w	r3, [sl]
 800c238:	2b2a      	cmp	r3, #42	; 0x2a
 800c23a:	d015      	beq.n	800c268 <_vfiprintf_r+0x120>
 800c23c:	9a07      	ldr	r2, [sp, #28]
 800c23e:	4654      	mov	r4, sl
 800c240:	2000      	movs	r0, #0
 800c242:	f04f 0c0a 	mov.w	ip, #10
 800c246:	4621      	mov	r1, r4
 800c248:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c24c:	3b30      	subs	r3, #48	; 0x30
 800c24e:	2b09      	cmp	r3, #9
 800c250:	d94d      	bls.n	800c2ee <_vfiprintf_r+0x1a6>
 800c252:	b1b0      	cbz	r0, 800c282 <_vfiprintf_r+0x13a>
 800c254:	9207      	str	r2, [sp, #28]
 800c256:	e014      	b.n	800c282 <_vfiprintf_r+0x13a>
 800c258:	eba0 0308 	sub.w	r3, r0, r8
 800c25c:	fa09 f303 	lsl.w	r3, r9, r3
 800c260:	4313      	orrs	r3, r2
 800c262:	9304      	str	r3, [sp, #16]
 800c264:	46a2      	mov	sl, r4
 800c266:	e7d2      	b.n	800c20e <_vfiprintf_r+0xc6>
 800c268:	9b03      	ldr	r3, [sp, #12]
 800c26a:	1d19      	adds	r1, r3, #4
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	9103      	str	r1, [sp, #12]
 800c270:	2b00      	cmp	r3, #0
 800c272:	bfbb      	ittet	lt
 800c274:	425b      	neglt	r3, r3
 800c276:	f042 0202 	orrlt.w	r2, r2, #2
 800c27a:	9307      	strge	r3, [sp, #28]
 800c27c:	9307      	strlt	r3, [sp, #28]
 800c27e:	bfb8      	it	lt
 800c280:	9204      	strlt	r2, [sp, #16]
 800c282:	7823      	ldrb	r3, [r4, #0]
 800c284:	2b2e      	cmp	r3, #46	; 0x2e
 800c286:	d10c      	bne.n	800c2a2 <_vfiprintf_r+0x15a>
 800c288:	7863      	ldrb	r3, [r4, #1]
 800c28a:	2b2a      	cmp	r3, #42	; 0x2a
 800c28c:	d134      	bne.n	800c2f8 <_vfiprintf_r+0x1b0>
 800c28e:	9b03      	ldr	r3, [sp, #12]
 800c290:	1d1a      	adds	r2, r3, #4
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	9203      	str	r2, [sp, #12]
 800c296:	2b00      	cmp	r3, #0
 800c298:	bfb8      	it	lt
 800c29a:	f04f 33ff 	movlt.w	r3, #4294967295
 800c29e:	3402      	adds	r4, #2
 800c2a0:	9305      	str	r3, [sp, #20]
 800c2a2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800c378 <_vfiprintf_r+0x230>
 800c2a6:	7821      	ldrb	r1, [r4, #0]
 800c2a8:	2203      	movs	r2, #3
 800c2aa:	4650      	mov	r0, sl
 800c2ac:	f7f3 ffc8 	bl	8000240 <memchr>
 800c2b0:	b138      	cbz	r0, 800c2c2 <_vfiprintf_r+0x17a>
 800c2b2:	9b04      	ldr	r3, [sp, #16]
 800c2b4:	eba0 000a 	sub.w	r0, r0, sl
 800c2b8:	2240      	movs	r2, #64	; 0x40
 800c2ba:	4082      	lsls	r2, r0
 800c2bc:	4313      	orrs	r3, r2
 800c2be:	3401      	adds	r4, #1
 800c2c0:	9304      	str	r3, [sp, #16]
 800c2c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c2c6:	4829      	ldr	r0, [pc, #164]	; (800c36c <_vfiprintf_r+0x224>)
 800c2c8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c2cc:	2206      	movs	r2, #6
 800c2ce:	f7f3 ffb7 	bl	8000240 <memchr>
 800c2d2:	2800      	cmp	r0, #0
 800c2d4:	d03f      	beq.n	800c356 <_vfiprintf_r+0x20e>
 800c2d6:	4b26      	ldr	r3, [pc, #152]	; (800c370 <_vfiprintf_r+0x228>)
 800c2d8:	bb1b      	cbnz	r3, 800c322 <_vfiprintf_r+0x1da>
 800c2da:	9b03      	ldr	r3, [sp, #12]
 800c2dc:	3307      	adds	r3, #7
 800c2de:	f023 0307 	bic.w	r3, r3, #7
 800c2e2:	3308      	adds	r3, #8
 800c2e4:	9303      	str	r3, [sp, #12]
 800c2e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c2e8:	443b      	add	r3, r7
 800c2ea:	9309      	str	r3, [sp, #36]	; 0x24
 800c2ec:	e768      	b.n	800c1c0 <_vfiprintf_r+0x78>
 800c2ee:	fb0c 3202 	mla	r2, ip, r2, r3
 800c2f2:	460c      	mov	r4, r1
 800c2f4:	2001      	movs	r0, #1
 800c2f6:	e7a6      	b.n	800c246 <_vfiprintf_r+0xfe>
 800c2f8:	2300      	movs	r3, #0
 800c2fa:	3401      	adds	r4, #1
 800c2fc:	9305      	str	r3, [sp, #20]
 800c2fe:	4619      	mov	r1, r3
 800c300:	f04f 0c0a 	mov.w	ip, #10
 800c304:	4620      	mov	r0, r4
 800c306:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c30a:	3a30      	subs	r2, #48	; 0x30
 800c30c:	2a09      	cmp	r2, #9
 800c30e:	d903      	bls.n	800c318 <_vfiprintf_r+0x1d0>
 800c310:	2b00      	cmp	r3, #0
 800c312:	d0c6      	beq.n	800c2a2 <_vfiprintf_r+0x15a>
 800c314:	9105      	str	r1, [sp, #20]
 800c316:	e7c4      	b.n	800c2a2 <_vfiprintf_r+0x15a>
 800c318:	fb0c 2101 	mla	r1, ip, r1, r2
 800c31c:	4604      	mov	r4, r0
 800c31e:	2301      	movs	r3, #1
 800c320:	e7f0      	b.n	800c304 <_vfiprintf_r+0x1bc>
 800c322:	ab03      	add	r3, sp, #12
 800c324:	9300      	str	r3, [sp, #0]
 800c326:	462a      	mov	r2, r5
 800c328:	4b12      	ldr	r3, [pc, #72]	; (800c374 <_vfiprintf_r+0x22c>)
 800c32a:	a904      	add	r1, sp, #16
 800c32c:	4630      	mov	r0, r6
 800c32e:	f7fd fc69 	bl	8009c04 <_printf_float>
 800c332:	4607      	mov	r7, r0
 800c334:	1c78      	adds	r0, r7, #1
 800c336:	d1d6      	bne.n	800c2e6 <_vfiprintf_r+0x19e>
 800c338:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c33a:	07d9      	lsls	r1, r3, #31
 800c33c:	d405      	bmi.n	800c34a <_vfiprintf_r+0x202>
 800c33e:	89ab      	ldrh	r3, [r5, #12]
 800c340:	059a      	lsls	r2, r3, #22
 800c342:	d402      	bmi.n	800c34a <_vfiprintf_r+0x202>
 800c344:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c346:	f7fe fa68 	bl	800a81a <__retarget_lock_release_recursive>
 800c34a:	89ab      	ldrh	r3, [r5, #12]
 800c34c:	065b      	lsls	r3, r3, #25
 800c34e:	f53f af1d 	bmi.w	800c18c <_vfiprintf_r+0x44>
 800c352:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c354:	e71c      	b.n	800c190 <_vfiprintf_r+0x48>
 800c356:	ab03      	add	r3, sp, #12
 800c358:	9300      	str	r3, [sp, #0]
 800c35a:	462a      	mov	r2, r5
 800c35c:	4b05      	ldr	r3, [pc, #20]	; (800c374 <_vfiprintf_r+0x22c>)
 800c35e:	a904      	add	r1, sp, #16
 800c360:	4630      	mov	r0, r6
 800c362:	f7fd fef3 	bl	800a14c <_printf_i>
 800c366:	e7e4      	b.n	800c332 <_vfiprintf_r+0x1ea>
 800c368:	0800cdbc 	.word	0x0800cdbc
 800c36c:	0800cdc6 	.word	0x0800cdc6
 800c370:	08009c05 	.word	0x08009c05
 800c374:	0800c123 	.word	0x0800c123
 800c378:	0800cdc2 	.word	0x0800cdc2

0800c37c <__sflush_r>:
 800c37c:	898a      	ldrh	r2, [r1, #12]
 800c37e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c382:	4605      	mov	r5, r0
 800c384:	0710      	lsls	r0, r2, #28
 800c386:	460c      	mov	r4, r1
 800c388:	d458      	bmi.n	800c43c <__sflush_r+0xc0>
 800c38a:	684b      	ldr	r3, [r1, #4]
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	dc05      	bgt.n	800c39c <__sflush_r+0x20>
 800c390:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c392:	2b00      	cmp	r3, #0
 800c394:	dc02      	bgt.n	800c39c <__sflush_r+0x20>
 800c396:	2000      	movs	r0, #0
 800c398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c39c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c39e:	2e00      	cmp	r6, #0
 800c3a0:	d0f9      	beq.n	800c396 <__sflush_r+0x1a>
 800c3a2:	2300      	movs	r3, #0
 800c3a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c3a8:	682f      	ldr	r7, [r5, #0]
 800c3aa:	6a21      	ldr	r1, [r4, #32]
 800c3ac:	602b      	str	r3, [r5, #0]
 800c3ae:	d032      	beq.n	800c416 <__sflush_r+0x9a>
 800c3b0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c3b2:	89a3      	ldrh	r3, [r4, #12]
 800c3b4:	075a      	lsls	r2, r3, #29
 800c3b6:	d505      	bpl.n	800c3c4 <__sflush_r+0x48>
 800c3b8:	6863      	ldr	r3, [r4, #4]
 800c3ba:	1ac0      	subs	r0, r0, r3
 800c3bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c3be:	b10b      	cbz	r3, 800c3c4 <__sflush_r+0x48>
 800c3c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c3c2:	1ac0      	subs	r0, r0, r3
 800c3c4:	2300      	movs	r3, #0
 800c3c6:	4602      	mov	r2, r0
 800c3c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c3ca:	6a21      	ldr	r1, [r4, #32]
 800c3cc:	4628      	mov	r0, r5
 800c3ce:	47b0      	blx	r6
 800c3d0:	1c43      	adds	r3, r0, #1
 800c3d2:	89a3      	ldrh	r3, [r4, #12]
 800c3d4:	d106      	bne.n	800c3e4 <__sflush_r+0x68>
 800c3d6:	6829      	ldr	r1, [r5, #0]
 800c3d8:	291d      	cmp	r1, #29
 800c3da:	d82b      	bhi.n	800c434 <__sflush_r+0xb8>
 800c3dc:	4a29      	ldr	r2, [pc, #164]	; (800c484 <__sflush_r+0x108>)
 800c3de:	410a      	asrs	r2, r1
 800c3e0:	07d6      	lsls	r6, r2, #31
 800c3e2:	d427      	bmi.n	800c434 <__sflush_r+0xb8>
 800c3e4:	2200      	movs	r2, #0
 800c3e6:	6062      	str	r2, [r4, #4]
 800c3e8:	04d9      	lsls	r1, r3, #19
 800c3ea:	6922      	ldr	r2, [r4, #16]
 800c3ec:	6022      	str	r2, [r4, #0]
 800c3ee:	d504      	bpl.n	800c3fa <__sflush_r+0x7e>
 800c3f0:	1c42      	adds	r2, r0, #1
 800c3f2:	d101      	bne.n	800c3f8 <__sflush_r+0x7c>
 800c3f4:	682b      	ldr	r3, [r5, #0]
 800c3f6:	b903      	cbnz	r3, 800c3fa <__sflush_r+0x7e>
 800c3f8:	6560      	str	r0, [r4, #84]	; 0x54
 800c3fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c3fc:	602f      	str	r7, [r5, #0]
 800c3fe:	2900      	cmp	r1, #0
 800c400:	d0c9      	beq.n	800c396 <__sflush_r+0x1a>
 800c402:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c406:	4299      	cmp	r1, r3
 800c408:	d002      	beq.n	800c410 <__sflush_r+0x94>
 800c40a:	4628      	mov	r0, r5
 800c40c:	f7ff f89e 	bl	800b54c <_free_r>
 800c410:	2000      	movs	r0, #0
 800c412:	6360      	str	r0, [r4, #52]	; 0x34
 800c414:	e7c0      	b.n	800c398 <__sflush_r+0x1c>
 800c416:	2301      	movs	r3, #1
 800c418:	4628      	mov	r0, r5
 800c41a:	47b0      	blx	r6
 800c41c:	1c41      	adds	r1, r0, #1
 800c41e:	d1c8      	bne.n	800c3b2 <__sflush_r+0x36>
 800c420:	682b      	ldr	r3, [r5, #0]
 800c422:	2b00      	cmp	r3, #0
 800c424:	d0c5      	beq.n	800c3b2 <__sflush_r+0x36>
 800c426:	2b1d      	cmp	r3, #29
 800c428:	d001      	beq.n	800c42e <__sflush_r+0xb2>
 800c42a:	2b16      	cmp	r3, #22
 800c42c:	d101      	bne.n	800c432 <__sflush_r+0xb6>
 800c42e:	602f      	str	r7, [r5, #0]
 800c430:	e7b1      	b.n	800c396 <__sflush_r+0x1a>
 800c432:	89a3      	ldrh	r3, [r4, #12]
 800c434:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c438:	81a3      	strh	r3, [r4, #12]
 800c43a:	e7ad      	b.n	800c398 <__sflush_r+0x1c>
 800c43c:	690f      	ldr	r7, [r1, #16]
 800c43e:	2f00      	cmp	r7, #0
 800c440:	d0a9      	beq.n	800c396 <__sflush_r+0x1a>
 800c442:	0793      	lsls	r3, r2, #30
 800c444:	680e      	ldr	r6, [r1, #0]
 800c446:	bf08      	it	eq
 800c448:	694b      	ldreq	r3, [r1, #20]
 800c44a:	600f      	str	r7, [r1, #0]
 800c44c:	bf18      	it	ne
 800c44e:	2300      	movne	r3, #0
 800c450:	eba6 0807 	sub.w	r8, r6, r7
 800c454:	608b      	str	r3, [r1, #8]
 800c456:	f1b8 0f00 	cmp.w	r8, #0
 800c45a:	dd9c      	ble.n	800c396 <__sflush_r+0x1a>
 800c45c:	6a21      	ldr	r1, [r4, #32]
 800c45e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c460:	4643      	mov	r3, r8
 800c462:	463a      	mov	r2, r7
 800c464:	4628      	mov	r0, r5
 800c466:	47b0      	blx	r6
 800c468:	2800      	cmp	r0, #0
 800c46a:	dc06      	bgt.n	800c47a <__sflush_r+0xfe>
 800c46c:	89a3      	ldrh	r3, [r4, #12]
 800c46e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c472:	81a3      	strh	r3, [r4, #12]
 800c474:	f04f 30ff 	mov.w	r0, #4294967295
 800c478:	e78e      	b.n	800c398 <__sflush_r+0x1c>
 800c47a:	4407      	add	r7, r0
 800c47c:	eba8 0800 	sub.w	r8, r8, r0
 800c480:	e7e9      	b.n	800c456 <__sflush_r+0xda>
 800c482:	bf00      	nop
 800c484:	dfbffffe 	.word	0xdfbffffe

0800c488 <_fflush_r>:
 800c488:	b538      	push	{r3, r4, r5, lr}
 800c48a:	690b      	ldr	r3, [r1, #16]
 800c48c:	4605      	mov	r5, r0
 800c48e:	460c      	mov	r4, r1
 800c490:	b913      	cbnz	r3, 800c498 <_fflush_r+0x10>
 800c492:	2500      	movs	r5, #0
 800c494:	4628      	mov	r0, r5
 800c496:	bd38      	pop	{r3, r4, r5, pc}
 800c498:	b118      	cbz	r0, 800c4a2 <_fflush_r+0x1a>
 800c49a:	6a03      	ldr	r3, [r0, #32]
 800c49c:	b90b      	cbnz	r3, 800c4a2 <_fflush_r+0x1a>
 800c49e:	f7fd fff1 	bl	800a484 <__sinit>
 800c4a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d0f3      	beq.n	800c492 <_fflush_r+0xa>
 800c4aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c4ac:	07d0      	lsls	r0, r2, #31
 800c4ae:	d404      	bmi.n	800c4ba <_fflush_r+0x32>
 800c4b0:	0599      	lsls	r1, r3, #22
 800c4b2:	d402      	bmi.n	800c4ba <_fflush_r+0x32>
 800c4b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c4b6:	f7fe f9af 	bl	800a818 <__retarget_lock_acquire_recursive>
 800c4ba:	4628      	mov	r0, r5
 800c4bc:	4621      	mov	r1, r4
 800c4be:	f7ff ff5d 	bl	800c37c <__sflush_r>
 800c4c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c4c4:	07da      	lsls	r2, r3, #31
 800c4c6:	4605      	mov	r5, r0
 800c4c8:	d4e4      	bmi.n	800c494 <_fflush_r+0xc>
 800c4ca:	89a3      	ldrh	r3, [r4, #12]
 800c4cc:	059b      	lsls	r3, r3, #22
 800c4ce:	d4e1      	bmi.n	800c494 <_fflush_r+0xc>
 800c4d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c4d2:	f7fe f9a2 	bl	800a81a <__retarget_lock_release_recursive>
 800c4d6:	e7dd      	b.n	800c494 <_fflush_r+0xc>

0800c4d8 <fiprintf>:
 800c4d8:	b40e      	push	{r1, r2, r3}
 800c4da:	b503      	push	{r0, r1, lr}
 800c4dc:	4601      	mov	r1, r0
 800c4de:	ab03      	add	r3, sp, #12
 800c4e0:	4805      	ldr	r0, [pc, #20]	; (800c4f8 <fiprintf+0x20>)
 800c4e2:	f853 2b04 	ldr.w	r2, [r3], #4
 800c4e6:	6800      	ldr	r0, [r0, #0]
 800c4e8:	9301      	str	r3, [sp, #4]
 800c4ea:	f7ff fe2d 	bl	800c148 <_vfiprintf_r>
 800c4ee:	b002      	add	sp, #8
 800c4f0:	f85d eb04 	ldr.w	lr, [sp], #4
 800c4f4:	b003      	add	sp, #12
 800c4f6:	4770      	bx	lr
 800c4f8:	20000108 	.word	0x20000108

0800c4fc <__swbuf_r>:
 800c4fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4fe:	460e      	mov	r6, r1
 800c500:	4614      	mov	r4, r2
 800c502:	4605      	mov	r5, r0
 800c504:	b118      	cbz	r0, 800c50e <__swbuf_r+0x12>
 800c506:	6a03      	ldr	r3, [r0, #32]
 800c508:	b90b      	cbnz	r3, 800c50e <__swbuf_r+0x12>
 800c50a:	f7fd ffbb 	bl	800a484 <__sinit>
 800c50e:	69a3      	ldr	r3, [r4, #24]
 800c510:	60a3      	str	r3, [r4, #8]
 800c512:	89a3      	ldrh	r3, [r4, #12]
 800c514:	071a      	lsls	r2, r3, #28
 800c516:	d525      	bpl.n	800c564 <__swbuf_r+0x68>
 800c518:	6923      	ldr	r3, [r4, #16]
 800c51a:	b31b      	cbz	r3, 800c564 <__swbuf_r+0x68>
 800c51c:	6823      	ldr	r3, [r4, #0]
 800c51e:	6922      	ldr	r2, [r4, #16]
 800c520:	1a98      	subs	r0, r3, r2
 800c522:	6963      	ldr	r3, [r4, #20]
 800c524:	b2f6      	uxtb	r6, r6
 800c526:	4283      	cmp	r3, r0
 800c528:	4637      	mov	r7, r6
 800c52a:	dc04      	bgt.n	800c536 <__swbuf_r+0x3a>
 800c52c:	4621      	mov	r1, r4
 800c52e:	4628      	mov	r0, r5
 800c530:	f7ff ffaa 	bl	800c488 <_fflush_r>
 800c534:	b9e0      	cbnz	r0, 800c570 <__swbuf_r+0x74>
 800c536:	68a3      	ldr	r3, [r4, #8]
 800c538:	3b01      	subs	r3, #1
 800c53a:	60a3      	str	r3, [r4, #8]
 800c53c:	6823      	ldr	r3, [r4, #0]
 800c53e:	1c5a      	adds	r2, r3, #1
 800c540:	6022      	str	r2, [r4, #0]
 800c542:	701e      	strb	r6, [r3, #0]
 800c544:	6962      	ldr	r2, [r4, #20]
 800c546:	1c43      	adds	r3, r0, #1
 800c548:	429a      	cmp	r2, r3
 800c54a:	d004      	beq.n	800c556 <__swbuf_r+0x5a>
 800c54c:	89a3      	ldrh	r3, [r4, #12]
 800c54e:	07db      	lsls	r3, r3, #31
 800c550:	d506      	bpl.n	800c560 <__swbuf_r+0x64>
 800c552:	2e0a      	cmp	r6, #10
 800c554:	d104      	bne.n	800c560 <__swbuf_r+0x64>
 800c556:	4621      	mov	r1, r4
 800c558:	4628      	mov	r0, r5
 800c55a:	f7ff ff95 	bl	800c488 <_fflush_r>
 800c55e:	b938      	cbnz	r0, 800c570 <__swbuf_r+0x74>
 800c560:	4638      	mov	r0, r7
 800c562:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c564:	4621      	mov	r1, r4
 800c566:	4628      	mov	r0, r5
 800c568:	f000 f806 	bl	800c578 <__swsetup_r>
 800c56c:	2800      	cmp	r0, #0
 800c56e:	d0d5      	beq.n	800c51c <__swbuf_r+0x20>
 800c570:	f04f 37ff 	mov.w	r7, #4294967295
 800c574:	e7f4      	b.n	800c560 <__swbuf_r+0x64>
	...

0800c578 <__swsetup_r>:
 800c578:	b538      	push	{r3, r4, r5, lr}
 800c57a:	4b2a      	ldr	r3, [pc, #168]	; (800c624 <__swsetup_r+0xac>)
 800c57c:	4605      	mov	r5, r0
 800c57e:	6818      	ldr	r0, [r3, #0]
 800c580:	460c      	mov	r4, r1
 800c582:	b118      	cbz	r0, 800c58c <__swsetup_r+0x14>
 800c584:	6a03      	ldr	r3, [r0, #32]
 800c586:	b90b      	cbnz	r3, 800c58c <__swsetup_r+0x14>
 800c588:	f7fd ff7c 	bl	800a484 <__sinit>
 800c58c:	89a3      	ldrh	r3, [r4, #12]
 800c58e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c592:	0718      	lsls	r0, r3, #28
 800c594:	d422      	bmi.n	800c5dc <__swsetup_r+0x64>
 800c596:	06d9      	lsls	r1, r3, #27
 800c598:	d407      	bmi.n	800c5aa <__swsetup_r+0x32>
 800c59a:	2309      	movs	r3, #9
 800c59c:	602b      	str	r3, [r5, #0]
 800c59e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c5a2:	81a3      	strh	r3, [r4, #12]
 800c5a4:	f04f 30ff 	mov.w	r0, #4294967295
 800c5a8:	e034      	b.n	800c614 <__swsetup_r+0x9c>
 800c5aa:	0758      	lsls	r0, r3, #29
 800c5ac:	d512      	bpl.n	800c5d4 <__swsetup_r+0x5c>
 800c5ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c5b0:	b141      	cbz	r1, 800c5c4 <__swsetup_r+0x4c>
 800c5b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c5b6:	4299      	cmp	r1, r3
 800c5b8:	d002      	beq.n	800c5c0 <__swsetup_r+0x48>
 800c5ba:	4628      	mov	r0, r5
 800c5bc:	f7fe ffc6 	bl	800b54c <_free_r>
 800c5c0:	2300      	movs	r3, #0
 800c5c2:	6363      	str	r3, [r4, #52]	; 0x34
 800c5c4:	89a3      	ldrh	r3, [r4, #12]
 800c5c6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c5ca:	81a3      	strh	r3, [r4, #12]
 800c5cc:	2300      	movs	r3, #0
 800c5ce:	6063      	str	r3, [r4, #4]
 800c5d0:	6923      	ldr	r3, [r4, #16]
 800c5d2:	6023      	str	r3, [r4, #0]
 800c5d4:	89a3      	ldrh	r3, [r4, #12]
 800c5d6:	f043 0308 	orr.w	r3, r3, #8
 800c5da:	81a3      	strh	r3, [r4, #12]
 800c5dc:	6923      	ldr	r3, [r4, #16]
 800c5de:	b94b      	cbnz	r3, 800c5f4 <__swsetup_r+0x7c>
 800c5e0:	89a3      	ldrh	r3, [r4, #12]
 800c5e2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c5e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c5ea:	d003      	beq.n	800c5f4 <__swsetup_r+0x7c>
 800c5ec:	4621      	mov	r1, r4
 800c5ee:	4628      	mov	r0, r5
 800c5f0:	f000 f8e3 	bl	800c7ba <__smakebuf_r>
 800c5f4:	89a0      	ldrh	r0, [r4, #12]
 800c5f6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c5fa:	f010 0301 	ands.w	r3, r0, #1
 800c5fe:	d00a      	beq.n	800c616 <__swsetup_r+0x9e>
 800c600:	2300      	movs	r3, #0
 800c602:	60a3      	str	r3, [r4, #8]
 800c604:	6963      	ldr	r3, [r4, #20]
 800c606:	425b      	negs	r3, r3
 800c608:	61a3      	str	r3, [r4, #24]
 800c60a:	6923      	ldr	r3, [r4, #16]
 800c60c:	b943      	cbnz	r3, 800c620 <__swsetup_r+0xa8>
 800c60e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c612:	d1c4      	bne.n	800c59e <__swsetup_r+0x26>
 800c614:	bd38      	pop	{r3, r4, r5, pc}
 800c616:	0781      	lsls	r1, r0, #30
 800c618:	bf58      	it	pl
 800c61a:	6963      	ldrpl	r3, [r4, #20]
 800c61c:	60a3      	str	r3, [r4, #8]
 800c61e:	e7f4      	b.n	800c60a <__swsetup_r+0x92>
 800c620:	2000      	movs	r0, #0
 800c622:	e7f7      	b.n	800c614 <__swsetup_r+0x9c>
 800c624:	20000108 	.word	0x20000108

0800c628 <memmove>:
 800c628:	4288      	cmp	r0, r1
 800c62a:	b510      	push	{r4, lr}
 800c62c:	eb01 0402 	add.w	r4, r1, r2
 800c630:	d902      	bls.n	800c638 <memmove+0x10>
 800c632:	4284      	cmp	r4, r0
 800c634:	4623      	mov	r3, r4
 800c636:	d807      	bhi.n	800c648 <memmove+0x20>
 800c638:	1e43      	subs	r3, r0, #1
 800c63a:	42a1      	cmp	r1, r4
 800c63c:	d008      	beq.n	800c650 <memmove+0x28>
 800c63e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c642:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c646:	e7f8      	b.n	800c63a <memmove+0x12>
 800c648:	4402      	add	r2, r0
 800c64a:	4601      	mov	r1, r0
 800c64c:	428a      	cmp	r2, r1
 800c64e:	d100      	bne.n	800c652 <memmove+0x2a>
 800c650:	bd10      	pop	{r4, pc}
 800c652:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c656:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c65a:	e7f7      	b.n	800c64c <memmove+0x24>

0800c65c <_sbrk_r>:
 800c65c:	b538      	push	{r3, r4, r5, lr}
 800c65e:	4d06      	ldr	r5, [pc, #24]	; (800c678 <_sbrk_r+0x1c>)
 800c660:	2300      	movs	r3, #0
 800c662:	4604      	mov	r4, r0
 800c664:	4608      	mov	r0, r1
 800c666:	602b      	str	r3, [r5, #0]
 800c668:	f7f5 fa36 	bl	8001ad8 <_sbrk>
 800c66c:	1c43      	adds	r3, r0, #1
 800c66e:	d102      	bne.n	800c676 <_sbrk_r+0x1a>
 800c670:	682b      	ldr	r3, [r5, #0]
 800c672:	b103      	cbz	r3, 800c676 <_sbrk_r+0x1a>
 800c674:	6023      	str	r3, [r4, #0]
 800c676:	bd38      	pop	{r3, r4, r5, pc}
 800c678:	20000a44 	.word	0x20000a44

0800c67c <memcpy>:
 800c67c:	440a      	add	r2, r1
 800c67e:	4291      	cmp	r1, r2
 800c680:	f100 33ff 	add.w	r3, r0, #4294967295
 800c684:	d100      	bne.n	800c688 <memcpy+0xc>
 800c686:	4770      	bx	lr
 800c688:	b510      	push	{r4, lr}
 800c68a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c68e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c692:	4291      	cmp	r1, r2
 800c694:	d1f9      	bne.n	800c68a <memcpy+0xe>
 800c696:	bd10      	pop	{r4, pc}

0800c698 <abort>:
 800c698:	b508      	push	{r3, lr}
 800c69a:	2006      	movs	r0, #6
 800c69c:	f000 f8f2 	bl	800c884 <raise>
 800c6a0:	2001      	movs	r0, #1
 800c6a2:	f7f5 f9a1 	bl	80019e8 <_exit>

0800c6a6 <_calloc_r>:
 800c6a6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c6a8:	fba1 2402 	umull	r2, r4, r1, r2
 800c6ac:	b94c      	cbnz	r4, 800c6c2 <_calloc_r+0x1c>
 800c6ae:	4611      	mov	r1, r2
 800c6b0:	9201      	str	r2, [sp, #4]
 800c6b2:	f7fe ffbf 	bl	800b634 <_malloc_r>
 800c6b6:	9a01      	ldr	r2, [sp, #4]
 800c6b8:	4605      	mov	r5, r0
 800c6ba:	b930      	cbnz	r0, 800c6ca <_calloc_r+0x24>
 800c6bc:	4628      	mov	r0, r5
 800c6be:	b003      	add	sp, #12
 800c6c0:	bd30      	pop	{r4, r5, pc}
 800c6c2:	220c      	movs	r2, #12
 800c6c4:	6002      	str	r2, [r0, #0]
 800c6c6:	2500      	movs	r5, #0
 800c6c8:	e7f8      	b.n	800c6bc <_calloc_r+0x16>
 800c6ca:	4621      	mov	r1, r4
 800c6cc:	f7fd ffb9 	bl	800a642 <memset>
 800c6d0:	e7f4      	b.n	800c6bc <_calloc_r+0x16>

0800c6d2 <__ascii_mbtowc>:
 800c6d2:	b082      	sub	sp, #8
 800c6d4:	b901      	cbnz	r1, 800c6d8 <__ascii_mbtowc+0x6>
 800c6d6:	a901      	add	r1, sp, #4
 800c6d8:	b142      	cbz	r2, 800c6ec <__ascii_mbtowc+0x1a>
 800c6da:	b14b      	cbz	r3, 800c6f0 <__ascii_mbtowc+0x1e>
 800c6dc:	7813      	ldrb	r3, [r2, #0]
 800c6de:	600b      	str	r3, [r1, #0]
 800c6e0:	7812      	ldrb	r2, [r2, #0]
 800c6e2:	1e10      	subs	r0, r2, #0
 800c6e4:	bf18      	it	ne
 800c6e6:	2001      	movne	r0, #1
 800c6e8:	b002      	add	sp, #8
 800c6ea:	4770      	bx	lr
 800c6ec:	4610      	mov	r0, r2
 800c6ee:	e7fb      	b.n	800c6e8 <__ascii_mbtowc+0x16>
 800c6f0:	f06f 0001 	mvn.w	r0, #1
 800c6f4:	e7f8      	b.n	800c6e8 <__ascii_mbtowc+0x16>

0800c6f6 <_realloc_r>:
 800c6f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6fa:	4680      	mov	r8, r0
 800c6fc:	4614      	mov	r4, r2
 800c6fe:	460e      	mov	r6, r1
 800c700:	b921      	cbnz	r1, 800c70c <_realloc_r+0x16>
 800c702:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c706:	4611      	mov	r1, r2
 800c708:	f7fe bf94 	b.w	800b634 <_malloc_r>
 800c70c:	b92a      	cbnz	r2, 800c71a <_realloc_r+0x24>
 800c70e:	f7fe ff1d 	bl	800b54c <_free_r>
 800c712:	4625      	mov	r5, r4
 800c714:	4628      	mov	r0, r5
 800c716:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c71a:	f000 f8f1 	bl	800c900 <_malloc_usable_size_r>
 800c71e:	4284      	cmp	r4, r0
 800c720:	4607      	mov	r7, r0
 800c722:	d802      	bhi.n	800c72a <_realloc_r+0x34>
 800c724:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c728:	d812      	bhi.n	800c750 <_realloc_r+0x5a>
 800c72a:	4621      	mov	r1, r4
 800c72c:	4640      	mov	r0, r8
 800c72e:	f7fe ff81 	bl	800b634 <_malloc_r>
 800c732:	4605      	mov	r5, r0
 800c734:	2800      	cmp	r0, #0
 800c736:	d0ed      	beq.n	800c714 <_realloc_r+0x1e>
 800c738:	42bc      	cmp	r4, r7
 800c73a:	4622      	mov	r2, r4
 800c73c:	4631      	mov	r1, r6
 800c73e:	bf28      	it	cs
 800c740:	463a      	movcs	r2, r7
 800c742:	f7ff ff9b 	bl	800c67c <memcpy>
 800c746:	4631      	mov	r1, r6
 800c748:	4640      	mov	r0, r8
 800c74a:	f7fe feff 	bl	800b54c <_free_r>
 800c74e:	e7e1      	b.n	800c714 <_realloc_r+0x1e>
 800c750:	4635      	mov	r5, r6
 800c752:	e7df      	b.n	800c714 <_realloc_r+0x1e>

0800c754 <__ascii_wctomb>:
 800c754:	b149      	cbz	r1, 800c76a <__ascii_wctomb+0x16>
 800c756:	2aff      	cmp	r2, #255	; 0xff
 800c758:	bf85      	ittet	hi
 800c75a:	238a      	movhi	r3, #138	; 0x8a
 800c75c:	6003      	strhi	r3, [r0, #0]
 800c75e:	700a      	strbls	r2, [r1, #0]
 800c760:	f04f 30ff 	movhi.w	r0, #4294967295
 800c764:	bf98      	it	ls
 800c766:	2001      	movls	r0, #1
 800c768:	4770      	bx	lr
 800c76a:	4608      	mov	r0, r1
 800c76c:	4770      	bx	lr

0800c76e <__swhatbuf_r>:
 800c76e:	b570      	push	{r4, r5, r6, lr}
 800c770:	460c      	mov	r4, r1
 800c772:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c776:	2900      	cmp	r1, #0
 800c778:	b096      	sub	sp, #88	; 0x58
 800c77a:	4615      	mov	r5, r2
 800c77c:	461e      	mov	r6, r3
 800c77e:	da0d      	bge.n	800c79c <__swhatbuf_r+0x2e>
 800c780:	89a3      	ldrh	r3, [r4, #12]
 800c782:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c786:	f04f 0100 	mov.w	r1, #0
 800c78a:	bf0c      	ite	eq
 800c78c:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c790:	2340      	movne	r3, #64	; 0x40
 800c792:	2000      	movs	r0, #0
 800c794:	6031      	str	r1, [r6, #0]
 800c796:	602b      	str	r3, [r5, #0]
 800c798:	b016      	add	sp, #88	; 0x58
 800c79a:	bd70      	pop	{r4, r5, r6, pc}
 800c79c:	466a      	mov	r2, sp
 800c79e:	f000 f879 	bl	800c894 <_fstat_r>
 800c7a2:	2800      	cmp	r0, #0
 800c7a4:	dbec      	blt.n	800c780 <__swhatbuf_r+0x12>
 800c7a6:	9901      	ldr	r1, [sp, #4]
 800c7a8:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c7ac:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c7b0:	4259      	negs	r1, r3
 800c7b2:	4159      	adcs	r1, r3
 800c7b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c7b8:	e7eb      	b.n	800c792 <__swhatbuf_r+0x24>

0800c7ba <__smakebuf_r>:
 800c7ba:	898b      	ldrh	r3, [r1, #12]
 800c7bc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c7be:	079d      	lsls	r5, r3, #30
 800c7c0:	4606      	mov	r6, r0
 800c7c2:	460c      	mov	r4, r1
 800c7c4:	d507      	bpl.n	800c7d6 <__smakebuf_r+0x1c>
 800c7c6:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c7ca:	6023      	str	r3, [r4, #0]
 800c7cc:	6123      	str	r3, [r4, #16]
 800c7ce:	2301      	movs	r3, #1
 800c7d0:	6163      	str	r3, [r4, #20]
 800c7d2:	b002      	add	sp, #8
 800c7d4:	bd70      	pop	{r4, r5, r6, pc}
 800c7d6:	ab01      	add	r3, sp, #4
 800c7d8:	466a      	mov	r2, sp
 800c7da:	f7ff ffc8 	bl	800c76e <__swhatbuf_r>
 800c7de:	9900      	ldr	r1, [sp, #0]
 800c7e0:	4605      	mov	r5, r0
 800c7e2:	4630      	mov	r0, r6
 800c7e4:	f7fe ff26 	bl	800b634 <_malloc_r>
 800c7e8:	b948      	cbnz	r0, 800c7fe <__smakebuf_r+0x44>
 800c7ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c7ee:	059a      	lsls	r2, r3, #22
 800c7f0:	d4ef      	bmi.n	800c7d2 <__smakebuf_r+0x18>
 800c7f2:	f023 0303 	bic.w	r3, r3, #3
 800c7f6:	f043 0302 	orr.w	r3, r3, #2
 800c7fa:	81a3      	strh	r3, [r4, #12]
 800c7fc:	e7e3      	b.n	800c7c6 <__smakebuf_r+0xc>
 800c7fe:	89a3      	ldrh	r3, [r4, #12]
 800c800:	6020      	str	r0, [r4, #0]
 800c802:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c806:	81a3      	strh	r3, [r4, #12]
 800c808:	9b00      	ldr	r3, [sp, #0]
 800c80a:	6163      	str	r3, [r4, #20]
 800c80c:	9b01      	ldr	r3, [sp, #4]
 800c80e:	6120      	str	r0, [r4, #16]
 800c810:	b15b      	cbz	r3, 800c82a <__smakebuf_r+0x70>
 800c812:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c816:	4630      	mov	r0, r6
 800c818:	f000 f84e 	bl	800c8b8 <_isatty_r>
 800c81c:	b128      	cbz	r0, 800c82a <__smakebuf_r+0x70>
 800c81e:	89a3      	ldrh	r3, [r4, #12]
 800c820:	f023 0303 	bic.w	r3, r3, #3
 800c824:	f043 0301 	orr.w	r3, r3, #1
 800c828:	81a3      	strh	r3, [r4, #12]
 800c82a:	89a3      	ldrh	r3, [r4, #12]
 800c82c:	431d      	orrs	r5, r3
 800c82e:	81a5      	strh	r5, [r4, #12]
 800c830:	e7cf      	b.n	800c7d2 <__smakebuf_r+0x18>

0800c832 <_raise_r>:
 800c832:	291f      	cmp	r1, #31
 800c834:	b538      	push	{r3, r4, r5, lr}
 800c836:	4604      	mov	r4, r0
 800c838:	460d      	mov	r5, r1
 800c83a:	d904      	bls.n	800c846 <_raise_r+0x14>
 800c83c:	2316      	movs	r3, #22
 800c83e:	6003      	str	r3, [r0, #0]
 800c840:	f04f 30ff 	mov.w	r0, #4294967295
 800c844:	bd38      	pop	{r3, r4, r5, pc}
 800c846:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c848:	b112      	cbz	r2, 800c850 <_raise_r+0x1e>
 800c84a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c84e:	b94b      	cbnz	r3, 800c864 <_raise_r+0x32>
 800c850:	4620      	mov	r0, r4
 800c852:	f000 f853 	bl	800c8fc <_getpid_r>
 800c856:	462a      	mov	r2, r5
 800c858:	4601      	mov	r1, r0
 800c85a:	4620      	mov	r0, r4
 800c85c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c860:	f000 b83a 	b.w	800c8d8 <_kill_r>
 800c864:	2b01      	cmp	r3, #1
 800c866:	d00a      	beq.n	800c87e <_raise_r+0x4c>
 800c868:	1c59      	adds	r1, r3, #1
 800c86a:	d103      	bne.n	800c874 <_raise_r+0x42>
 800c86c:	2316      	movs	r3, #22
 800c86e:	6003      	str	r3, [r0, #0]
 800c870:	2001      	movs	r0, #1
 800c872:	e7e7      	b.n	800c844 <_raise_r+0x12>
 800c874:	2400      	movs	r4, #0
 800c876:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c87a:	4628      	mov	r0, r5
 800c87c:	4798      	blx	r3
 800c87e:	2000      	movs	r0, #0
 800c880:	e7e0      	b.n	800c844 <_raise_r+0x12>
	...

0800c884 <raise>:
 800c884:	4b02      	ldr	r3, [pc, #8]	; (800c890 <raise+0xc>)
 800c886:	4601      	mov	r1, r0
 800c888:	6818      	ldr	r0, [r3, #0]
 800c88a:	f7ff bfd2 	b.w	800c832 <_raise_r>
 800c88e:	bf00      	nop
 800c890:	20000108 	.word	0x20000108

0800c894 <_fstat_r>:
 800c894:	b538      	push	{r3, r4, r5, lr}
 800c896:	4d07      	ldr	r5, [pc, #28]	; (800c8b4 <_fstat_r+0x20>)
 800c898:	2300      	movs	r3, #0
 800c89a:	4604      	mov	r4, r0
 800c89c:	4608      	mov	r0, r1
 800c89e:	4611      	mov	r1, r2
 800c8a0:	602b      	str	r3, [r5, #0]
 800c8a2:	f7f5 f8f0 	bl	8001a86 <_fstat>
 800c8a6:	1c43      	adds	r3, r0, #1
 800c8a8:	d102      	bne.n	800c8b0 <_fstat_r+0x1c>
 800c8aa:	682b      	ldr	r3, [r5, #0]
 800c8ac:	b103      	cbz	r3, 800c8b0 <_fstat_r+0x1c>
 800c8ae:	6023      	str	r3, [r4, #0]
 800c8b0:	bd38      	pop	{r3, r4, r5, pc}
 800c8b2:	bf00      	nop
 800c8b4:	20000a44 	.word	0x20000a44

0800c8b8 <_isatty_r>:
 800c8b8:	b538      	push	{r3, r4, r5, lr}
 800c8ba:	4d06      	ldr	r5, [pc, #24]	; (800c8d4 <_isatty_r+0x1c>)
 800c8bc:	2300      	movs	r3, #0
 800c8be:	4604      	mov	r4, r0
 800c8c0:	4608      	mov	r0, r1
 800c8c2:	602b      	str	r3, [r5, #0]
 800c8c4:	f7f5 f8ef 	bl	8001aa6 <_isatty>
 800c8c8:	1c43      	adds	r3, r0, #1
 800c8ca:	d102      	bne.n	800c8d2 <_isatty_r+0x1a>
 800c8cc:	682b      	ldr	r3, [r5, #0]
 800c8ce:	b103      	cbz	r3, 800c8d2 <_isatty_r+0x1a>
 800c8d0:	6023      	str	r3, [r4, #0]
 800c8d2:	bd38      	pop	{r3, r4, r5, pc}
 800c8d4:	20000a44 	.word	0x20000a44

0800c8d8 <_kill_r>:
 800c8d8:	b538      	push	{r3, r4, r5, lr}
 800c8da:	4d07      	ldr	r5, [pc, #28]	; (800c8f8 <_kill_r+0x20>)
 800c8dc:	2300      	movs	r3, #0
 800c8de:	4604      	mov	r4, r0
 800c8e0:	4608      	mov	r0, r1
 800c8e2:	4611      	mov	r1, r2
 800c8e4:	602b      	str	r3, [r5, #0]
 800c8e6:	f7f5 f86f 	bl	80019c8 <_kill>
 800c8ea:	1c43      	adds	r3, r0, #1
 800c8ec:	d102      	bne.n	800c8f4 <_kill_r+0x1c>
 800c8ee:	682b      	ldr	r3, [r5, #0]
 800c8f0:	b103      	cbz	r3, 800c8f4 <_kill_r+0x1c>
 800c8f2:	6023      	str	r3, [r4, #0]
 800c8f4:	bd38      	pop	{r3, r4, r5, pc}
 800c8f6:	bf00      	nop
 800c8f8:	20000a44 	.word	0x20000a44

0800c8fc <_getpid_r>:
 800c8fc:	f7f5 b85c 	b.w	80019b8 <_getpid>

0800c900 <_malloc_usable_size_r>:
 800c900:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c904:	1f18      	subs	r0, r3, #4
 800c906:	2b00      	cmp	r3, #0
 800c908:	bfbc      	itt	lt
 800c90a:	580b      	ldrlt	r3, [r1, r0]
 800c90c:	18c0      	addlt	r0, r0, r3
 800c90e:	4770      	bx	lr

0800c910 <_init>:
 800c910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c912:	bf00      	nop
 800c914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c916:	bc08      	pop	{r3}
 800c918:	469e      	mov	lr, r3
 800c91a:	4770      	bx	lr

0800c91c <_fini>:
 800c91c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c91e:	bf00      	nop
 800c920:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c922:	bc08      	pop	{r3}
 800c924:	469e      	mov	lr, r3
 800c926:	4770      	bx	lr
